{
  "version": 3,
  "sources": ["../../@egjs/component/src/utils.ts", "../../@egjs/component/src/ActualComponentEvent.ts", "../../@egjs/component/src/Component.ts", "../../@egjs/component/src/ComponentEvent.ts", "../../@egjs/component/src/index.ts", "../../@egjs/agent/src/utils.ts", "../../@egjs/agent/src/presets.ts", "../../@egjs/agent/src/userAgent.ts", "../../@egjs/agent/src/userAgentData.ts", "../../@egjs/agent/src/agent.ts", "../../@cfcs/core/src/core/utils.ts", "../../@cfcs/core/src/dom/utils.ts", "../../@cfcs/core/src/reactive/const.ts", "../../@cfcs/core/src/reactive/Observer.ts", "../../@cfcs/core/src/reactive/utils.ts", "../../@cfcs/core/src/reactive/Reactive.ts", "../../@cfcs/core/src/reactive/ReactiveSubscribe.ts", "../../@cfcs/core/src/reactive/inlineReactive.ts", "../../@cfcs/core/src/reactive/adaptReactive.ts", "../../@egjs/axes/src/browser.ts", "../../@egjs/axes/src/const.ts", "../../@egjs/axes/src/utils.ts", "../../@egjs/axes/src/EventManager.ts", "../../@egjs/axes/src/InterruptManager.ts", "../../@egjs/axes/src/Coordinate.ts", "../../@egjs/axes/src/AxisManager.ts", "../../@egjs/axes/src/eventInput/EventInput.ts", "../../@egjs/axes/src/eventInput/MouseEventInput.ts", "../../@egjs/axes/src/eventInput/TouchEventInput.ts", "../../@egjs/axes/src/eventInput/PointerEventInput.ts", "../../@egjs/axes/src/eventInput/TouchMouseEventInput.ts", "../../@egjs/axes/src/inputType/InputType.ts", "../../@egjs/axes/src/InputObserver.ts", "../../@egjs/axes/src/animation/AnimationManager.ts", "../../@egjs/axes/src/animation/EasingManager.ts", "../../@egjs/axes/src/Axes.ts", "../../@egjs/axes/src/inputType/PanInput.ts", "../../@egjs/axes/src/inputType/RotatePanInput.ts", "../../@egjs/axes/src/inputType/PinchInput.ts", "../../@egjs/axes/src/inputType/WheelInput.ts", "../../@egjs/axes/src/inputType/MoveKeyInput.ts", "../../@egjs/axes/src/reactive.ts", "../../@egjs/axes/src/index.ts", "../../@egjs/imready/src/consts.ts", "../../@egjs/imready/src/utils.ts", "../../@egjs/imready/src/AutoSizer.ts", "../../@egjs/imready/src/loaders/Loader.ts", "../../@egjs/imready/src/loaders/ElementLoader.ts", "../../@egjs/imready/src/ImReadyManager.ts", "../../@egjs/imready/src/loaders/ImageLoader.ts", "../../@egjs/imready/src/loaders/VideoLoader.ts", "../../@egjs/imready/src/ImReady.ts", "../../@egjs/imready/src/index.ts", "../../@egjs/flicking/src/const/error.ts", "../../@egjs/flicking/src/const/external.ts", "../../@egjs/flicking/src/utils.ts", "../../@egjs/flicking/src/core/FlickingError.ts", "../../@egjs/flicking/src/core/Viewport.ts", "../../@egjs/flicking/src/core/AutoResizer.ts", "../../@egjs/flicking/src/core/panel/provider/VanillaElementProvider.ts", "../../@egjs/flicking/src/core/panel/provider/VirtualElementProvider.ts", "../../@egjs/flicking/src/core/VirtualManager.ts", "../../@egjs/flicking/src/const/axes.ts", "../../@egjs/flicking/src/control/states/State.ts", "../../@egjs/flicking/src/control/states/IdleState.ts", "../../@egjs/flicking/src/control/states/HoldingState.ts", "../../@egjs/flicking/src/control/states/DraggingState.ts", "../../@egjs/flicking/src/control/states/AnimatingState.ts", "../../@egjs/flicking/src/control/states/DisabledState.ts", "../../@egjs/flicking/src/control/StateMachine.ts", "../../@egjs/flicking/src/control/AxesController.ts", "../../@egjs/flicking/src/control/Control.ts", "../../@egjs/flicking/src/core/AnchorPoint.ts", "../../@egjs/flicking/src/control/SnapControl.ts", "../../@egjs/flicking/src/control/FreeControl.ts", "../../@egjs/flicking/src/control/StrictControl.ts", "../../@egjs/flicking/src/camera/mode/CameraMode.ts", "../../@egjs/flicking/src/camera/mode/LinearCameraMode.ts", "../../@egjs/flicking/src/camera/mode/CircularCameraMode.ts", "../../@egjs/flicking/src/camera/mode/BoundCameraMode.ts", "../../@egjs/flicking/src/camera/Camera.ts", "../../@egjs/flicking/src/renderer/Renderer.ts", "../../@egjs/flicking/src/renderer/VanillaRenderer.ts", "../../@egjs/flicking/src/renderer/ExternalRenderer.ts", "../../@egjs/flicking/src/core/panel/Panel.ts", "../../@egjs/flicking/src/renderer/strategy/NormalRenderingStrategy.ts", "../../@egjs/flicking/src/core/panel/VirtualPanel.ts", "../../@egjs/flicking/src/renderer/strategy/VirtualRenderingStrategy.ts", "../../@egjs/flicking/src/Flicking.ts", "../../@egjs/flicking/src/cfc/withFlickingMethods.ts", "../../@egjs/flicking/src/cfc/sync.ts", "../../@egjs/flicking/src/cfc/getRenderingPanels.ts", "../../@egjs/flicking/src/cfc/getDefaultCameraTransform.ts", "../../@egjs/flicking/src/index.ts"],
  "sourcesContent": ["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport const isUndefined = (value: any): value is undefined => typeof value === \"undefined\";\n", "import { DefaultProps } from \"./types\";\n\n// This class name is not matched to file name intentionally\n/**\n * Event class to provide additional properties\n * @ko Component에서 추가적인 프로퍼티를 제공하는 이벤트 클래스\n */\nclass ComponentEvent<PROPS extends Record<string, any>, TYPE extends string = string, THIS = any> implements DefaultProps<TYPE, THIS> {\n  /**\n   * A Component instance that triggered event.\n   * @type Component\n   * @ko 이벤트를 트리거한 Component 인스턴스.\n   * @example\n   * ```ts\n   * class ExtendedClass extends Component<{\n   *   someEvent: ComponentEvent<{ foo: number; bar: string }>\n   * }> {}\n   *\n   * new ExtendedClass().on(\"someEvent\", e => {\n   *   e.currentTarget; // ExtendedClass\n   * });\n   * ```\n   */\n  public currentTarget: THIS;\n\n  /**\n   * The name of the event.\n   * @type string\n   * @ko 이벤트 이름.\n   * @example\n   * ```ts\n   * class ExtendedClass extends Component<{\n   *   someEvent: ComponentEvent\n   * }> {}\n   *\n   * new ExtendedClass().on(\"someEvent\", e => {\n   *   e.eventType; // \"someEvent\"\n   * });\n   * ```\n   */\n  public eventType: TYPE;\n\n  private _canceled: boolean;\n\n  /**\n   * Create a new instance of ComponentEvent.\n   * @ko ComponentEvent의 새로운 인스턴스를 생성한다.\n   * @param eventType The name of the event.<ko>이벤트 이름.</ko>\n   * @param props An object that contains additional event properties.<ko>추가적인 이벤트 프로퍼티 오브젝트.</ko>\n   */\n  public constructor(\n    eventType: TYPE,\n    props: PROPS\n  ) {\n    this._canceled = false;\n\n    if (props) {\n      for (const key of Object.keys(props as Record<string, any>)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this[key] = props[key];\n      }\n    }\n\n    this.eventType = eventType;\n  }\n\n  /**\n   * Stop the event. {@link ComponentEvent#isCanceled} will return `true` after.\n   * @ko 이벤트를 중단한다. 이후 {@link ComponentEvent#isCanceled}가 `true`를 반환한다.\n   */\n  public stop() {\n    this._canceled = true;\n  }\n\n  /**\n   * Returns a boolean value that indicates whether {@link ComponentEvent#stop} is called before.\n   * @ko {@link ComponentEvent#stop}이 호출되었는지 여부를 반환한다.\n   * @return {boolean} A boolean value that indicates whether {@link ComponentEvent#stop} is called before.<ko>이전에 {@link ComponentEvent#stop}이 불려졌는지 여부를 반환한다.</ko>\n   */\n  public isCanceled() {\n    return this._canceled;\n  }\n}\n\nexport default ComponentEvent;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { isUndefined } from \"./utils\";\nimport { EventCallback, EventHash, EventKey, EventMap, EventTriggerParams } from \"./types\";\nimport ComponentEvent from \"./ComponentEvent\";\nimport ActualComponentEvent from \"./ActualComponentEvent\";\n\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n */\nclass Component<T extends EventMap> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @name VERSION\n   * @static\n   * @example\n   * Component.VERSION;  // ex) 3.0.0\n   * @memberof Component\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n\n  private _eventHandler: { [keys: string]: Array<(...args: any[]) => any> };\n\n  /**\n   * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n   */\n  public constructor() {\n    this._eventHandler = {};\n  }\n\n  public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this;\n  public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this;\n  /**\n   * Trigger a custom event.\n   * @ko 커스텀 이벤트를 발생시킨다\n   * @param {string | ComponentEvent} event The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>\n   * @param {any[]} params Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n   *   hi: { foo: { a: number; b: boolean } };\n   *   someEvent: (foo: number, bar: string) => void;\n   *   someOtherEvent: void; // When there's no event argument\n   * }> {\n   *   some(){\n   *     if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n   *       this.trigger(\"hi\");// fire hi event.\n   *     }\n   *   }\n   * }\n   *\n   * const some = new Some();\n   * some.on(\"beforeHi\", e => {\n   *   if(condition){\n   *     e.stop(); // When event call to stop, `hi` event not call.\n   *   }\n   *   // `currentTarget` is component instance.\n   *   console.log(some === e.currentTarget); // true\n   *\n   *   typeof e.foo; // number\n   *   typeof e.bar; // string\n   * });\n   * some.on(\"hi\", e => {\n   *   typeof e.foo.b; // boolean\n   * });\n   * // If you want to more know event design. You can see article.\n   * // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n   * ```\n   */\n  public trigger<K extends EventKey<T>>(event: K | ComponentEvent<T[K], K, this>, ...params: EventTriggerParams<T, K> | void[]): this {\n    const eventName = (event as any) instanceof ActualComponentEvent\n      ? (event as ActualComponentEvent<T[K]>).eventType\n      : event as K;\n\n    const handlers = [...(this._eventHandler[eventName] || [])];\n\n    if (handlers.length <= 0) {\n      return this;\n    }\n\n    if ((event as any) instanceof ActualComponentEvent) {\n      (event as ActualComponentEvent<T[K]>).currentTarget = this;\n\n      handlers.forEach((handler: (event: ComponentEvent<T[K], K, this>) => any) => {\n        handler(event as ComponentEvent<T[K], K, this>);\n      });\n    } else {\n      handlers.forEach(handler => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handler(...params);\n      });\n    }\n\n    return this;\n  }\n\n  public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this;\n  public once(eventHash: EventHash<T, this>): this;\n  /**\n   * Executed event just one time.\n   * @ko 이벤트가 한번만 실행된다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: ComponentEvent;\n   * }> {\n   *   hi() {\n   *     alert(\"hi\");\n   *   }\n   *   thing() {\n   *     this.once(\"hi\", this.hi);\n   *   }\n   * }\n   *\n   * var some = new Some();\n   * some.thing();\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // fire alert(\"hi\");\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // Nothing happens\n   * ```\n   */\n  public once<K extends EventKey<T>>(eventName: K | EventHash<T, this>, handlerToAttach?: EventCallback<T, K, this>): this {\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      const eventHash = eventName;\n\n      for (const key in eventHash) {\n        this.once((key as K), eventHash[key] as EventCallback<T, K, this>);\n      }\n      return this;\n    } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n      const listener: any = (...args: any[]) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handlerToAttach(...args);\n        this.off(eventName, listener);\n      };\n\n      this.on(eventName, listener);\n    }\n\n    return this;\n  }\n\n  /**\n   * Checks whether an event has been attached to a component.\n   * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n   * @param {string} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n   * @return {boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n   * @example\n   * ```ts\n   * import Component from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   some() {\n   *     this.hasOn(\"hi\");// check hi event.\n   *   }\n   * }\n   * ```\n   */\n  public hasOn<K extends EventKey<T>>(eventName: K): boolean {\n    return !!this._eventHandler[eventName];\n  }\n\n  public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this;\n  public on(eventHash: EventHash<T, this>): this;\n  /**\n   * Attaches an event to a component.\n   * @ko 컴포넌트에 이벤트를 등록한다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.on(\"hi\",this.hi); //attach event\n   *   }\n   * }\n   * ```\n   */\n  public on<K extends EventKey<T>>(eventName: K | EventHash<T, this>, handlerToAttach?: EventCallback<T, K, this>): this {\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      const eventHash = eventName;\n\n      for (const name in eventHash) {\n        this.on(name, eventHash[name] as any);\n      }\n\n      return this;\n    } else if (typeof eventName === \"string\" &&\n      typeof handlerToAttach === \"function\") {\n      let handlerList = this._eventHandler[eventName];\n\n      if (isUndefined(handlerList)) {\n        this._eventHandler[eventName] = [];\n        handlerList = this._eventHandler[eventName];\n      }\n\n      handlerList.push(handlerToAttach as EventCallback<T, EventKey<T>, this>);\n    }\n\n    return this;\n  }\n\n  public off(eventHash?: EventHash<T, this>): this;\n  public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this;\n  /**\n   * Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.\n   * @ko 컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.\n   * @param {string?} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n   * @param {function?} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.off(\"hi\",this.hi); //detach event\n   *   }\n   * }\n   * ```\n   */\n  public off<K extends EventKey<T>>(eventName?: K | EventHash<T, this>, handlerToDetach?: EventCallback<T, K, this>): this {\n    // Detach all event handlers.\n    if (isUndefined(eventName)) {\n      this._eventHandler = {};\n      return this;\n    }\n\n    // Detach all handlers for eventname or detach event handlers by object.\n    if (isUndefined(handlerToDetach)) {\n      if (typeof eventName === \"string\") {\n        delete this._eventHandler[eventName];\n        return this;\n      } else {\n        const eventHash = eventName;\n\n        for (const name in eventHash) {\n          this.off(name, eventHash[name] as any);\n        }\n        return this;\n      }\n    }\n\n    // Detach single event handler\n    const handlerList = this._eventHandler[eventName as K];\n\n    if (handlerList) {\n      let idx = 0;\n      for (const handlerFunction of handlerList) {\n        if (handlerFunction === handlerToDetach) {\n          handlerList.splice(idx, 1);\n\n          if (handlerList.length <= 0) {\n            delete this._eventHandler[eventName as K];\n          }\n\n          break;\n        }\n        idx++;\n      }\n    }\n\n    return this;\n  }\n}\n\nexport default Component;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ActualComponentEvent from \"./ActualComponentEvent\";\nimport { ComponentEventConstructor, DefaultProps } from \"./types\";\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-assignment\nconst ComponentEvent = ActualComponentEvent as ComponentEventConstructor;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype ComponentEvent<PROPS = {}, TYPE extends string = string, THIS = any> = DefaultProps<TYPE, THIS> & PROPS;\n\nexport default ComponentEvent;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"./Component\";\nimport ComponentEvent from \"./ComponentEvent\";\n\nexport { ComponentEvent };\nexport default Component;\n", "import { PresetInfo, PresetResult, NavigatorUABrandVersion } from \"./types\";\n\nexport function some<T>(arr: T[], callback: (value: T, index: number) => any): boolean {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return true;\n        }\n    }\n\n    return false;\n}\nexport function find<T>(arr: T[], callback: (value: T, index: number) => any): T | null {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return arr[i];\n        }\n    }\n    return null;\n}\nexport function getUserAgentString(agent?: string): string {\n    let userAgent = agent;\n    if (typeof userAgent === \"undefined\") {\n        if (typeof navigator === \"undefined\" || !navigator) {\n            return \"\";\n        }\n\n        userAgent = navigator.userAgent || \"\";\n    }\n    return userAgent!.toLowerCase();\n}\nexport function execRegExp(pattern: string, text: string): RegExpExecArray | null {\n    try {\n        return new RegExp(pattern, \"g\").exec(text);\n    } catch (e) {\n        return null;\n    }\n}\nexport function hasUserAgentData(): boolean {\n    if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n        return false;\n    }\n    const userAgentData = navigator.userAgentData;\n    const brands = (userAgentData.brands || userAgentData.uaList);\n\n    return !!(brands && brands.length);\n}\nexport function findVersion(versionTest: string, userAgent: string): string {\n    const result = execRegExp(`(${versionTest})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))`, userAgent);\n\n    return result ? result[3] : \"\";\n}\nexport function convertVersion(text: string): string {\n    return text.replace(/_/g, \".\");\n}\nexport function findPreset(presets: PresetInfo[], userAgent: string): PresetResult {\n    let userPreset: PresetInfo | null = null;\n    let version = \"-1\";\n\n    some(presets, preset => {\n        const result = execRegExp(`(${preset.test})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?`, userAgent);\n\n        if (!result || preset.brand) {\n            return false;\n        }\n        userPreset = preset;\n        version = result[3] || \"-1\";\n\n        if (preset.versionAlias) {\n            version = preset.versionAlias;\n        } else if (preset.versionTest) {\n            version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n        }\n        version = convertVersion(version);\n        return true;\n    });\n\n    return {\n        preset: userPreset,\n        version,\n    };\n}\nexport function findPresetBrand(presets: PresetInfo[], brands: NavigatorUABrandVersion[]): NavigatorUABrandVersion {\n    const brandInfo = {\n        brand: \"\",\n        version: \"-1\",\n    };\n    some(presets, preset => {\n        const result = findBrand(brands, preset);\n\n        if (!result) {\n            return false;\n        }\n\n        brandInfo.brand = preset.id;\n        brandInfo.version = preset.versionAlias || result.version;\n\n        return brandInfo.version !== \"-1\";\n    });\n\n    return brandInfo;\n}\nexport function findBrand(brands: NavigatorUABrandVersion[], preset: PresetInfo): NavigatorUABrandVersion | null {\n    return find(brands, ({ brand }) => {\n        return execRegExp(`${preset.test}`, brand.toLowerCase());\n    });\n}\n", "import { PresetInfo } from \"./types\";\n\nexport const BROWSER_PRESETS: PresetInfo[] = [\n    {\n        test: \"phantomjs\",\n        id: \"phantomjs\",\n    },\n    {\n        test: \"whale\",\n        id: \"whale\",\n    }, {\n        test: \"edgios|edge|edg\",\n        id: \"edge\",\n    },\n    {\n        test: \"msie|trident|windows phone\",\n        id: \"ie\",\n        versionTest: \"iemobile|msie|rv\",\n    },\n    {\n        test: \"miuibrowser\",\n        id: \"miui browser\",\n    },\n    {\n        test: \"samsungbrowser\",\n        id: \"samsung internet\",\n    },\n    {\n        test: \"samsung\",\n        id: \"samsung internet\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"chrome|crios\",\n        id: \"chrome\",\n    },\n    {\n        test: \"firefox|fxios\",\n        id: \"firefox\",\n    },\n    {\n        test: \"android\",\n        id: \"android browser\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"safari|iphone|ipad|ipod\",\n        id: \"safari\",\n        versionTest: \"version\",\n    },\n];\n\n// chromium's engine(blink) is based on applewebkit 537.36.\nexport const CHROMIUM_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n        id: \"chrome\",\n        versionTest: \"chrome\",\n    },\n    {\n        test: \"chromium\",\n        id: \"chrome\",\n    },\n    {\n        test: \"whale\",\n        id: \"chrome\",\n        versionAlias: \"-1\",\n        brand: true,\n    },\n];\nexport const WEBKIT_PRESETS: PresetInfo[] = [\n    {\n        test: \"applewebkit\",\n        id: \"webkit\",\n        versionTest: \"applewebkit|safari\",\n    },\n];\nexport const WEBVIEW_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=(iphone|ipad))(?!(.*version))\",\n        id: \"webview\",\n    },\n    {\n        test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n        id: \"webview\",\n    },\n    {\n        // test webview\n        test: \"webview\",\n        id: \"webview\",\n    },\n];\nexport const OS_PRESETS: PresetInfo[] = [\n    {\n        test: \"windows phone\",\n        id: \"windows phone\",\n    },\n    {\n        test: \"windows 2000\",\n        id: \"window\",\n        versionAlias: \"5.0\",\n    },\n    {\n        test: \"windows nt\",\n        id: \"window\",\n    },\n    {\n        test: \"win32|windows\",\n        id: \"window\",\n    },\n    {\n        test: \"iphone|ipad|ipod\",\n        id: \"ios\",\n        versionTest: \"iphone os|cpu os\",\n    },\n    {\n        test: \"macos|macintel|mac os x\",\n        id: \"mac\",\n    },\n    {\n        test: \"android|linux armv81\",\n        id: \"android\",\n    },\n    {\n        test: \"tizen\",\n        id: \"tizen\",\n    },\n    {\n        test: \"webos|web0s\",\n        id: \"webos\",\n    },\n    // {\n    //     test: \"linux|ubuntu|debian\",\n    //     id: \"linux\",\n    //     versionAlias: \"-1\",\n    // },\n];\n", "import { AgentInfo } from \"./types\";\nimport { getUserAgentString, findPreset } from \"./utils\";\nimport { WEBVIEW_PRESETS, CHROMIUM_PRESETS, BROWSER_PRESETS, OS_PRESETS, WEBKIT_PRESETS } from \"./presets\";\n\nexport function isWebView(userAgent: string): boolean {\n    return !!findPreset(WEBVIEW_PRESETS, userAgent).preset;\n}\n\nexport function getLegacyAgent(userAgent?: string): AgentInfo {\n    const nextAgent = getUserAgentString(userAgent);\n    const isMobile = !!/mobi/g.exec(nextAgent);\n    const browser = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n        webview: isWebView(nextAgent),\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webkit: false,\n        webkitVersion: \"-1\",\n    };\n    const os = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    const {\n        preset: browserPreset,\n        version: browserVersion,\n    } = findPreset(BROWSER_PRESETS, nextAgent);\n\n    const {\n        preset: osPreset,\n        version: osVersion,\n    } = findPreset(OS_PRESETS, nextAgent);\n\n    const chromiumPreset = findPreset(CHROMIUM_PRESETS, nextAgent);\n\n    browser.chromium = !!chromiumPreset.preset;\n    browser.chromiumVersion = chromiumPreset.version;\n    if (!browser.chromium) {\n        const webkitPreset = findPreset(WEBKIT_PRESETS, nextAgent);\n\n        browser.webkit = !!webkitPreset.preset;\n        browser.webkitVersion = webkitPreset.version;\n    }\n\n    if (osPreset) {\n        os.name = osPreset.id;\n        os.version = osVersion;\n        os.majorVersion = parseInt(osVersion, 10);\n    }\n    if (browserPreset) {\n        browser.name = browserPreset.id;\n        browser.version = browserVersion;\n\n        // Early whale bugs\n        if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n            browser.webview = false;\n        }\n    }\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: false,\n    };\n}\n", "import { UADataValues, AgentInfo, AgentBrowserInfo, AgentOSInfo } from \"./types\";\nimport { some, find, findBrand, convertVersion, findPresetBrand, getUserAgentString } from \"./utils\";\nimport { BROWSER_PRESETS, OS_PRESETS, CHROMIUM_PRESETS, WEBKIT_PRESETS, WEBVIEW_PRESETS } from \"./presets\";\nimport { isWebView } from \"./userAgent\";\n\nexport function getClientHintsAgent(osData?: UADataValues): AgentInfo {\n    const userAgentData = navigator.userAgentData;\n    const brands = [...(userAgentData.uaList || userAgentData.brands)!];\n    const fullVersionList = osData && osData.fullVersionList;\n    const isMobile = userAgentData.mobile || false;\n    const firstBrand = brands[0];\n    const platform = (osData && osData.platform || userAgentData.platform || navigator.platform).toLowerCase();\n    const browser: AgentBrowserInfo = {\n        name: firstBrand.brand,\n        version: firstBrand.version,\n        majorVersion: -1,\n        webkit: false,\n        webkitVersion: \"-1\",\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webview: !!findPresetBrand(WEBVIEW_PRESETS, brands).brand || isWebView(getUserAgentString()),\n    };\n    const os: AgentOSInfo = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, preset => findBrand(brands, preset));\n\n    const chromiumBrand = findPresetBrand(CHROMIUM_PRESETS, brands);\n\n    browser.chromium = !!chromiumBrand.brand;\n    browser.chromiumVersion = chromiumBrand.version;\n    if (!browser.chromium) {\n        const webkitBrand = findPresetBrand(WEBKIT_PRESETS, brands);\n\n        browser.webkit = !!webkitBrand.brand;\n        browser.webkitVersion = webkitBrand.version;\n    }\n\n    const platfomResult = find(OS_PRESETS, preset => {\n        return new RegExp(`${preset.test}`, \"g\").exec(platform);\n    });\n    os.name = platfomResult ? platfomResult.id : \"\";\n\n    if (osData) {\n        os.version = osData.platformVersion;\n    }\n    if (fullVersionList && fullVersionList.length) {\n        const browserBrandByFullVersionList = findPresetBrand(BROWSER_PRESETS, fullVersionList);\n\n        browser.name = browserBrandByFullVersionList.brand || browser.name;\n        browser.version = browserBrandByFullVersionList.version || browser.version;\n    } else {\n        const browserBrand = findPresetBrand(BROWSER_PRESETS, brands);\n\n        browser.name = browserBrand.brand || browser.name;\n        browser.version = browserBrand.brand && osData ? osData.uaFullVersion : browserBrand.version;\n    }\n    if (browser.webkit) {\n        os.name = isMobile ? \"ios\" : \"mac\";\n    }\n    if (os.name === \"ios\" && browser.webview) {\n        browser.version = \"-1\";\n    }\n\n    os.version = convertVersion(os.version);\n    browser.version = convertVersion(browser.version);\n    os.majorVersion = parseInt(os.version, 10);\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: true,\n    };\n}\n", "import { AgentInfo } from \"./types\";\nimport { hasUserAgentData } from \"./utils\";\nimport { getClientHintsAgent } from \"./userAgentData\";\nimport { getLegacyAgent } from \"./userAgent\";\n\n/**\n * @namespace eg.agent\n */\n\n/**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/\nexport function getAccurateAgent(callback?: (result: AgentInfo) => void): Promise<AgentInfo> | null {\n    if (hasUserAgentData()) {\n        return navigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"model\",\n            \"platform\",\n            \"platformVersion\",\n            \"uaFullVersion\",\n            \"fullVersionList\",\n        ]).then(info => {\n            const agentInfo = getClientHintsAgent(info);\n\n            callback && callback(agentInfo);\n            return agentInfo;\n        });\n    }\n    callback && callback(agent());\n    if (typeof Promise === \"undefined\" || !Promise) {\n        return null;\n    }\n    return Promise.resolve(agent());\n}\n\n\n\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */\nfunction agent(userAgent?: string): AgentInfo {\n    if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n        return getClientHintsAgent();\n    } else {\n        return getLegacyAgent(userAgent);\n    }\n}\nexport { getLegacyAgent };\n\nexport default agent;\n\nexport * from \"./types\";\n", "/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nexport function keys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\n\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\n\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\nexport function isFunction(val: any): val is Function {\n  return typeof val === \"function\";\n}", "\nexport function withClassMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n", "export const OBSERVERS_PATH = \"__observers__\";\nexport const REACTIVE_PATH = \"__reactive__\";\n", "import Component from \"@egjs/component\";\n\ninterface EmitterEvents<Value> {\n  update: (value: Value) => void;\n}\n\nexport class Observer<Value = any> {\n  private _current: Value;\n  private _emitter = new Component<EmitterEvents<Value>>();\n\n  constructor(value?: Value) {\n    this._current = value as any;\n  }\n  public get current() {\n    return this._current as Value;\n  }\n  public set current(value: Value) {\n    const isUpdate = value !== this._current;\n    this._current = value;\n\n    if (isUpdate) {\n      this._emitter.trigger(\"update\", value);\n    }\n  }\n  public subscribe(callback: (value: Value) => void) {\n    this._emitter.on(\"update\", callback);\n  }\n  public unsubscribe(callback?: (value: Value) => void) {\n    this._emitter.off(\"update\", callback);\n  }\n}\n", "import { OBSERVERS_PATH } from \"./const\";\nimport { Observer } from \"./Observer\";\nimport { ReactiveMethods } from \"./types\";\nimport { Ref } from \"../core\";\n\n\nexport function withReactiveMethods<\n  Instance,\n  Names extends keyof Partial<Instance>,\n  Return extends ReactiveMethods<Instance, Names>\n>(ref: Ref<Instance>, methods?: readonly Names[]): Return {\n  const obj: Record<any, any> = {};\n\n  if (!methods) {\n    return obj;\n  }\n\n  methods.forEach(name => {\n    obj[name] = function (...args: any[]) {\n      const current: any = ref.current || ref.value;\n\n      return current[name](...args);\n    };\n  });\n  return obj as Return;\n}\n\n\nexport function observe<Type>(defaultValue?: Type): Observer<Type> {\n  return new Observer<Type>(defaultValue);\n}\n\nexport function getObservers(instance: any): Record<string, Observer<any>> {\n  if (!instance[OBSERVERS_PATH]) {\n    instance[OBSERVERS_PATH] = {};\n  }\n  return instance[OBSERVERS_PATH];\n}\n\nexport function getObserver(instance: any, name: string, defaultValue?: any): Observer<any> {\n  const observers = getObservers(instance);\n\n  if (!observers[name]) {\n    observers[name] = observe(defaultValue);\n  }\n  return observers[name];\n}\n\nexport function setObserver(instance: any, name: string, observer: Observer<any>) {\n  const observers = getObservers(instance);\n\n  observers[name] = observer;\n}\n\nexport function isObserver(val: any): val is Observer {\n  return val && (\"current\" in val && \"subscribe\" in val && \"unsubscribe\" in val);\n}", "import { getObserver } from \"./utils\";\n\nexport function Reactive(name?: string) {\n    return function (prototype: any, memberName: string) {\n        const publicName = name || memberName;\n\n        Object.defineProperty(prototype, memberName, {\n            get: function () {\n                return getObserver(this, publicName).current;\n            },\n            set: function (value: any) {\n                getObserver(this, publicName, value).current = value;\n            },\n        });\n        if (publicName !== memberName) {\n            Object.defineProperty(prototype, publicName, {\n                get: function () {\n                    return getObserver(this, publicName).current;\n                },\n            });\n        }\n    };\n}\n\n", "import { keys } from \"../core\";\nimport { getObserver, getObservers } from \"./utils\";\n\nexport function injectReactiveSubscribe(object: Record<string, any>, ) {\n    object[\"subscribe\"] = function (name: string, callback: (value: any) => void) {\n        getObserver(this, name).subscribe(callback);\n    };\n    object[\"unsubscribe\"] = function (name?: string, callback?: (value: any) => void) {\n        if (!name) {\n            keys(getObservers(this)).forEach((observerName) => {\n                this.unsubscribe(observerName);\n            });\n            return;\n        }\n        if (!(name in this)) {\n            return;\n        }\n        getObserver(this, name).unsubscribe(callback);\n    };\n}\n\nexport function ReactiveSubscribe(Constructor: any) {\n    const prototype = Constructor.prototype;\n\n    injectReactiveSubscribe(prototype);\n}\n\nexport interface ReactiveSubscribe<Properties extends Record<string, any>> {\n    subscribe<Name extends keyof Properties = keyof Properties>(\n        name: Name, callback: (value: Properties[Name]) => void): void;\n    unsubscribe<Name extends keyof Properties = keyof Properties>(\n        name?: Name, callback?: (value: Properties[Name]) => void): void;\n}", "import { ExtractNever, isFunction, keys } from \"../core\";\nimport { Observer } from \"./Observer\";\nimport { Reactive } from \"./Reactive\";\nimport { injectReactiveSubscribe, ReactiveSubscribe } from \"./ReactiveSubscribe\";\nimport { isObserver, setObserver } from \"./utils\";\n\n\ntype ConvertValue<Object extends Record<string, any>> = {\n    [Key in keyof Object]: Object[Key] extends Observer<infer Type> ? Type : Object[Key];\n}\n\ntype PickObverser<Object extends Record<string, any>> = ExtractNever<{\n    [Key in keyof Object]: Object[Key] extends Observer<infer Type> ? Type : never;\n}>;\n\nexport type ReactiveObject<Object extends Record<string, any>>\n    = ConvertValue<Object> & ReactiveSubscribe<PickObverser<Object>>;\n\nexport function reactive<Object extends Record<string, any>>(\n    setup: Readonly<Object> | (() => Readonly<Object>),\n): ReactiveObject<Object> {\n    const result = isFunction(setup) ? setup() : setup;\n    const reactiveObject: Record<string, any> = {};\n\n    keys(result).forEach((name: any) => {\n        const value = result[name];\n        if (isObserver(value)) {\n            setObserver(reactiveObject, name, value);\n            Reactive(name)(reactiveObject, name);\n        } else {\n            reactiveObject[name] = value;\n        }\n    });\n\n    injectReactiveSubscribe(reactiveObject);\n    return reactiveObject as ReactiveObject<Object>;\n}\n", "import { keys } from \"src/core\";\nimport { Ref } from \"src/core/types\";\nimport { ReactiveAdapter } from \"./ReactiveAdapter\";\nimport { ReactiveSubscribe } from \"./ReactiveSubscribe\";\nimport { ReactiveEventCallback } from \"./types\";\nimport { getObservers, withReactiveMethods } from \"./utils\";\n\nexport function adaptReactive<\n    Instance extends ReactiveSubscribe<Record<string, any>>,\n    State extends Record<string, any> = {},\n    Methods extends keyof Partial<Instance> = any,\n    Data = any,\n    Events extends Record<string, any> = {},\n    >(adapter: ReactiveAdapter<Instance, State, Methods, Data, Events>) {\n\n    function data(): Data {\n        return adapter.data?.() ?? {} as Data;\n    }\n\n    const instanceRef: Ref<Instance> = { current: adapter.created?.(data()) || null };\n    let firstState: State | null = null;\n    \n    return {\n        state(): State {\n            const inst = instanceRef.current;\n\n            if (firstState) {\n                return firstState;\n            }\n            if (adapter.state) {\n                firstState = adapter.state;\n            } else if (inst) {\n                const observers = getObservers(inst);\n\n                firstState = keys(observers).reduce((prev, cur) => {\n                    prev[cur] = observers[cur].current;\n                    return prev;\n                }, {} as any);\n            }\n            return firstState || {} as State;\n        },\n        instance() {\n            return instanceRef.current;\n        },\n        mounted(): void {\n            instanceRef.current = adapter.mounted?.(data()) || instanceRef.current;\n        },\n        init(): void {\n            adapter.init?.(instanceRef.current!, data());\n        },\n        destroy(): void {\n            adapter.destroy?.(instanceRef.current!, data());\n        },\n        methods() {\n            return withReactiveMethods<any, any, any>(instanceRef, adapter.methods);\n        },\n        on(eventName: string, listener: ReactiveEventCallback<any, any>) {\n            adapter.on?.(instanceRef.current!, eventName as never, listener);\n        },\n        off(eventName: string, listener: ReactiveEventCallback<any, any>) {\n            adapter.off?.(instanceRef.current!, eventName as never, listener);\n        },\n    };\n}", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable no-new-func, no-nested-ternary */\n\nlet win: any;\n\nif (typeof window === \"undefined\") {\n  // window is undefined in node.js\n  win = {\n    navigator: {\n      userAgent: \"\",\n    },\n  };\n} else {\n  win = window;\n}\n/* eslint-enable no-new-func, no-nested-ternary */\n\nexport { win as window };\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport const DIRECTION_NONE = 1;\nexport const DIRECTION_LEFT = 2;\nexport const DIRECTION_RIGHT = 4;\nexport const DIRECTION_HORIZONTAL = 2 | 4;\nexport const DIRECTION_UP = 8;\nexport const DIRECTION_DOWN = 16;\nexport const DIRECTION_VERTICAL = 8 | 16;\nexport const DIRECTION_ALL = 2 | 4 | 8 | 16;\n\nexport const MOUSE_LEFT = \"left\";\nexport const MOUSE_RIGHT = \"right\";\nexport const MOUSE_MIDDLE = \"middle\";\n\nexport const ANY = \"any\";\nexport const NONE = \"none\";\nexport const SHIFT = \"shift\";\nexport const CTRL = \"ctrl\";\nexport const ALT = \"alt\";\nexport const META = \"meta\";\n\nexport const VELOCITY_INTERVAL = 16;\n\nexport const AXES_METHODS = [\n  \"connect\",\n  \"disconnect\",\n  \"get\",\n  \"setTo\",\n  \"setBy\",\n  \"setOptions\",\n  \"setAxis\",\n  \"stopAnimation\",\n  \"updateAnimation\",\n  \"isBounceArea\",\n] as const;\n\nexport const AXES_EVENTS = [\n  \"hold\",\n  \"release\",\n  \"change\",\n  \"animationStart\",\n  \"animationEnd\",\n  \"finish\",\n] as const;\n\nimport getAgent from \"@egjs/agent\";\n\nimport { window } from \"./browser\";\n\nexport const IOS_EDGE_THRESHOLD = 30;\nexport const IS_IOS_SAFARI =\n  \"ontouchstart\" in window && getAgent().browser.name === \"safari\";\n\nexport const TRANSFORM = (() => {\n  if (typeof document === \"undefined\") {\n    return \"\";\n  }\n  const bodyStyle = (document.head || document.getElementsByTagName(\"head\")[0])\n    .style;\n  const target = [\n    \"transform\",\n    \"webkitTransform\",\n    \"msTransform\",\n    \"mozTransform\",\n  ];\n  for (let i = 0, len = target.length; i < len; i++) {\n    if (target[i] in bodyStyle) {\n      return target[i];\n    }\n  }\n  return \"\";\n})();\n\nexport const PREVENT_DRAG_CSSPROPS = {\n  \"-webkit-user-select\": \"none\", /* Safari */\n  \"-ms-user-select\": \"none\", /* IE 10 and IE 11 */\n  \"-moz-user-select\": \"none\", /* Firefox 2-68 */\n  \"user-select\": \"none\",\n  \"-webkit-user-drag\": \"none\",\n};\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { window } from \"./browser\";\nimport { PREVENT_DRAG_CSSPROPS } from \"./const\";\nimport { Axis, AxisOption } from \"./AxisManager\";\nimport { PanInputOption } from \"./inputType/PanInput\";\nimport { PinchInputOption } from \"./inputType/PinchInput\";\nimport { ObjectInterface } from \"./types\";\nimport {\n  DIRECTION_NONE,\n  DIRECTION_VERTICAL,\n  DIRECTION_HORIZONTAL,\n  DIRECTION_ALL,\n} from \"./const\";\n\ndeclare let jQuery: any;\n\nexport const toArray = (nodes: NodeList): HTMLElement[] => {\n  // const el = Array.prototype.slice.call(nodes);\n  // for IE8\n  const el = [];\n  for (let i = 0, len = nodes.length; i < len; i++) {\n    el.push(nodes[i]);\n  }\n  return el;\n};\n\nexport const $ = (param, multi = false) => {\n  let el;\n  if (typeof param === \"string\") {\n    // String (HTML, Selector)\n    // check if string is HTML tag format\n    const match = param.match(/^<([a-z]+)\\s*([^>]*)>/);\n\n    // creating element\n    if (match) {\n      // HTML\n      const dummy = document.createElement(\"div\");\n\n      dummy.innerHTML = param;\n      el = toArray(dummy.childNodes);\n    } else {\n      // Selector\n      el = toArray(document.querySelectorAll(param));\n    }\n    if (!multi) {\n      el = el.length >= 1 ? el[0] : undefined;\n    }\n  } else if (param === window) {\n    // window\n    el = param;\n  } else if (\"value\" in param || \"current\" in param) {\n    el = param.value! || param.current!;\n  } else if (param.nodeName && (param.nodeType === 1 || param.nodeType === 9)) {\n    // HTMLElement, Document\n    el = param;\n  } else if (\n    (\"jQuery\" in window && param instanceof jQuery) ||\n    param.constructor.prototype.jquery\n  ) {\n    // jQuery\n    el = multi ? param.toArray() : param.get(0);\n  } else if (Array.isArray(param)) {\n    el = param.map((v) => $(v));\n    if (!multi) {\n      el = el.length >= 1 ? el[0] : undefined;\n    }\n  }\n  return el;\n};\n\nlet raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame;\nlet caf = window.cancelAnimationFrame || window.webkitCancelAnimationFrame;\nif (raf && !caf) {\n  const keyInfo = {};\n  const oldraf = raf;\n  raf = (callback: FrameRequestCallback) => {\n    const wrapCallback = (timestamp: number) => {\n      if (keyInfo[key]) {\n        callback(timestamp);\n      }\n    };\n    const key = oldraf(wrapCallback);\n    keyInfo[key] = true;\n    return key;\n  };\n  caf = (key: number) => {\n    delete keyInfo[key];\n  };\n} else if (!(raf && caf)) {\n  raf = (callback: FrameRequestCallback) => {\n    return window.setTimeout(() => {\n      callback(\n        ((window.performance &&\n          window.performance.now &&\n          window.performance.now()) as number) || new Date().getTime()\n      );\n    }, 16);\n  };\n  caf = window.clearTimeout;\n}\n\n/**\n * A polyfill for the window.requestAnimationFrame() method.\n * @see  https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n * @private\n */\nexport const requestAnimationFrame = (fp) => {\n  return raf(fp);\n};\n/**\n * A polyfill for the window.cancelAnimationFrame() method. It cancels an animation executed through a call to the requestAnimationFrame() method.\n * @param {Number} key −  The ID value returned through a call to the requestAnimationFrame() method. <ko>requestAnimationFrame() 메서드가 반환한 아이디 값</ko>\n * @see  https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame\n * @private\n */\nexport const cancelAnimationFrame = (key) => {\n  caf(key);\n};\n\nexport const map = <T, U>(\n  obj: ObjectInterface<T>,\n  callback: (value: T, key: string) => U\n): ObjectInterface<U> => {\n  const tranformed: ObjectInterface<U> = {};\n\n  for (const k in obj) {\n    if (k) {\n      tranformed[k] = callback(obj[k], k);\n    }\n  }\n  return tranformed;\n};\n\nexport const filter = <T>(\n  obj: ObjectInterface<T>,\n  callback: (value: T, key: string) => boolean\n): ObjectInterface<T> => {\n  const filtered: ObjectInterface<T> = {};\n\n  for (const k in obj) {\n    if (k && callback(obj[k], k)) {\n      filtered[k] = obj[k];\n    }\n  }\n  return filtered;\n};\nexport const every = <T>(\n  obj: ObjectInterface<T>,\n  callback: (value: T, key: string) => boolean\n) => {\n  for (const k in obj) {\n    if (k && !callback(obj[k], k)) {\n      return false;\n    }\n  }\n  return true;\n};\nexport const equal = (\n  target: ObjectInterface,\n  base: ObjectInterface\n): boolean => {\n  return every(target, (v, k) => v === base[k]);\n};\n\nconst roundNumFunc = {};\n\nexport const roundNumber = (num: number, roundUnit: number) => {\n  // Cache for performance\n  if (!roundNumFunc[roundUnit]) {\n    roundNumFunc[roundUnit] = getRoundFunc(roundUnit);\n  }\n\n  return roundNumFunc[roundUnit](num);\n};\n\nexport const roundNumbers = (\n  num: ObjectInterface<number>,\n  roundUnit: ObjectInterface<number> | number\n): ObjectInterface<number> => {\n  if (!num || !roundUnit) {\n    return num;\n  }\n  return map(num, (value, key) =>\n    roundNumber(\n      value,\n      typeof roundUnit === \"number\" ? roundUnit : roundUnit[key]\n    )\n  );\n};\n\nexport const getDecimalPlace = (val: number): number => {\n  if (!isFinite(val)) {\n    return 0;\n  }\n\n  const v = `${val}`;\n\n  if (v.indexOf(\"e\") >= 0) {\n    // Exponential Format\n    // 1e-10, 1e-12\n    let p = 0;\n    let e = 1;\n\n    while (Math.round(val * e) / e !== val) {\n      e *= 10;\n      p++;\n    }\n\n    return p;\n  }\n\n  // In general, following has performance benefit.\n  // https://jsperf.com/precision-calculation\n  return v.indexOf(\".\") >= 0 ? v.length - v.indexOf(\".\") - 1 : 0;\n};\n\nexport const inversePow = (n: number) => {\n  // replace Math.pow(10, -n) to solve floating point issue.\n  // eg. Math.pow(10, -4) => 0.00009999999999999999\n  return 1 / Math.pow(10, n);\n};\n\nexport const getRoundFunc = (v: number) => {\n  const p = v < 1 ? Math.pow(10, getDecimalPlace(v)) : 1;\n\n  return (n: number) => {\n    if (v === 0) {\n      return 0;\n    }\n\n    return Math.round(Math.round(n / v) * v * p) / p;\n  };\n};\n\nexport const getAngle = (posX: number, posY: number) => {\n  return (Math.atan2(posY, posX) * 180) / Math.PI;\n};\n\nexport const isCssPropsFromAxes = (originalCssProps: {\n  [key: string]: string;\n}) => {\n  let same = true;\n  Object.keys(PREVENT_DRAG_CSSPROPS).forEach((prop) => {\n    if (\n      !originalCssProps ||\n      originalCssProps[prop] !== PREVENT_DRAG_CSSPROPS[prop]\n    ) {\n      same = false;\n    }\n  });\n  return same;\n};\n\nexport const getDirection = (\n  useHorizontal: boolean,\n  useVertical: boolean\n): number => {\n  if (useHorizontal && useVertical) {\n    return DIRECTION_ALL;\n  } else if (useHorizontal) {\n    return DIRECTION_HORIZONTAL;\n  } else if (useVertical) {\n    return DIRECTION_VERTICAL;\n  } else {\n    return DIRECTION_NONE;\n  }\n};\n\nexport const useDirection = (\n  checkType: number,\n  direction: number,\n  userDirection?: number\n): boolean => {\n  if (userDirection) {\n    return !!(\n      direction === DIRECTION_ALL ||\n      (direction & checkType && userDirection & checkType)\n    );\n  } else {\n    return !!(direction & checkType);\n  }\n};\n\nexport const setCssProps = (\n  element: HTMLElement,\n  option: PanInputOption | PinchInputOption,\n  direction: number\n): { [key: string]: string } => {\n  const touchActionMap = {\n    [DIRECTION_NONE]: \"auto\",\n    [DIRECTION_ALL]: \"none\",\n    [DIRECTION_VERTICAL]: \"pan-x\",\n    [DIRECTION_HORIZONTAL]: \"pan-y\",\n  };\n  const oldCssProps = {};\n  if (element && element.style) {\n    const touchAction = option.touchAction\n      ? option.touchAction\n      : touchActionMap[direction];\n    const newCssProps = {\n      ...PREVENT_DRAG_CSSPROPS,\n      \"touch-action\":\n        element.style[\"touch-action\"] === \"none\" ? \"none\" : touchAction,\n    };\n    Object.keys(newCssProps).forEach((prop) => {\n      oldCssProps[prop] = element.style[prop];\n      element.style[prop] = newCssProps[prop];\n    });\n  }\n  return oldCssProps;\n};\n\nexport const revertCssProps = (\n  element: HTMLElement,\n  originalCssProps: { [key: string]: string }\n): { [key: string]: string } => {\n  if (element && element.style && originalCssProps) {\n    Object.keys(originalCssProps).forEach((prop) => {\n      element.style[prop] = originalCssProps[prop];\n    });\n  }\n  return;\n};\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\nimport { getObserver } from \"@cfcs/core\";\n\nimport { InputType } from \"./inputType/InputType\";\nimport { Axis } from \"./AxisManager\";\nimport Axes from \"./Axes\";\nimport { roundNumbers } from \"./utils\";\nimport { AnimationParam, OnAnimationStart, OnRelease } from \"./types\";\nimport { AnimationManager } from \"./animation/AnimationManager\";\n\nexport interface ChangeEventOption {\n  input: InputType;\n  event;\n}\n\nexport class EventManager {\n  public animationManager: AnimationManager;\n  public constructor(private _axes: Axes) {}\n  /**\n   * This event is fired when a user holds an element on the screen of the device.\n   * @ko 사용자가 기기의 화면에 손을 대고 있을 때 발생하는 이벤트\n   * @event Axes#hold\n   * @type {object}\n   * @property {Object.<string, number>} pos coordinate <ko>좌표 정보</ko>\n   * @property {Object} input The instance of inputType where the event occurred<ko>이벤트가 발생한 inputType 인스턴스</ko>\n   * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"hold\", function(event) {\n   *   // event.pos\n   *   // event.input\n   *   // event.inputEvent\n   *   // isTrusted\n   * });\n   * ```\n   */\n  public hold(pos: Axis, option: ChangeEventOption) {\n    const { roundPos } = this._getRoundPos(pos);\n\n    this._axes.trigger(\n      new ComponentEvent(\"hold\", {\n        pos: roundPos,\n        input: option.input || null,\n        inputEvent: option.event || null,\n        isTrusted: true,\n      })\n    );\n  }\n\n  /**\n   * Specifies the coordinates to move after the 'change' event. It works when the holding value of the change event is true.\n   * @ko 'change' 이벤트 이후 이동할 좌표를 지정한다. change이벤트의 holding 값이 true일 경우에 동작한다\n   * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"change\", function(event) {\n   *   event.holding && event.set({x: 10});\n   * });\n   * ```\n   */\n  /** Specifies the animation coordinates to move after the 'release' or 'animationStart' events.\n   * @ko 'release' 또는 'animationStart' 이벤트 이후 이동할 좌표를 지정한다.\n   * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @param {Number} [duration=0] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"animationStart\", function(event) {\n   *   event.setTo({x: 10}, 2000);\n   * });\n   * ```\n   */\n  /**\n   * This event is fired when a user release an element on the screen of the device.\n   * @ko 사용자가 기기의 화면에서 손을 뗐을 때 발생하는 이벤트\n   * @event Axes#release\n   * @type {object}\n   * @property {Object.<string, number>} depaPos The coordinates when releasing an element<ko>손을 뗐을 때의 좌표 </ko>\n   * @property {Object.<string, number>} destPos The coordinates to move to after releasing an element<ko>손을 뗀 뒤에 이동할 좌표</ko>\n   * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n   * @property {Object.<string, number>} bounceRatio If the coordinates at the time of release are in the bounce area, the current bounce value divided by the maximum bounce value <ko>손을 뗐을 때의 좌표가 bounce 영역에 있는 경우 현재 bounce된 값을 최대 bounce 값으로 나눈 수치.</ko>\n   * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n   * @property {Object} input The instance of inputType where the event occurred<ko>이벤트가 발생한 inputType 인스턴스</ko>\n   * @property {setTo} setTo Specifies the animation coordinates to move after the event <ko>이벤트 이후 이동할 애니메이션 좌표를 지정한다</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"release\", function(event) {\n   *   // event.depaPos\n   *   // event.destPos\n   *   // event.delta\n   *   // event.input\n   *   // event.inputEvent\n   *   // event.setTo\n   *   // event.isTrusted\n   *\n   *   // if you want to change the animation coordinates to move after the 'release' event.\n   *   event.setTo({x: 10}, 2000);\n   * });\n   * ```\n   */\n  public triggerRelease(param: AnimationParam) {\n    const { roundPos, roundDepa } = this._getRoundPos(\n      param.destPos,\n      param.depaPos\n    );\n    param.destPos = roundPos;\n    param.depaPos = roundDepa;\n    param.setTo = this._createUserControll(param.destPos, param.duration);\n    this._axes.trigger(\n      new ComponentEvent(\"release\", {\n        ...param,\n        bounceRatio: this._getBounceRatio(roundPos),\n      } as OnRelease)\n    );\n  }\n\n  /**\n   * This event is fired when coordinate changes.\n   * @ko 좌표가 변경됐을 때 발생하는 이벤트\n   * @event Axes#change\n   * @type {object}\n   * @property {Object.<string, number>} pos  The coordinate <ko>좌표</ko>\n   * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n   * @property {Object.<string, number>} bounceRatio If the current coordinates are in the bounce area, the current bounce value divided by the maximum bounce value <ko>현재 좌표가 bounce 영역에 있는 경우 현재 bounce된 값을 최대 bounce 값으로 나눈 수치.</ko>\n   * @property {Boolean} holding Indicates whether a user holds an element on the screen of the device.<ko>사용자가 기기의 화면을 누르고 있는지 여부</ko>\n   * @property {Object} input The instance of inputType where the event occurred. If the value is changed by animation, it returns 'null'.<ko>이벤트가 발생한 inputType 인스턴스. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n   * @property {Object} inputEvent The event object received from inputType. If the value is changed by animation, it returns 'null'.<ko>inputType으로 부터 받은 이벤트 객체. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n   * @property {set} set Specifies the coordinates to move after the event. It works when the holding value is true <ko>이벤트 이후 이동할 좌표를 지정한다. holding 값이 true일 경우에 동작한다.</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"change\", function(event) {\n   *   // event.pos\n   *   // event.delta\n   *   // event.input\n   *   // event.inputEvent\n   *   // event.holding\n   *   // event.set\n   *   // event.isTrusted\n   *\n   *   // if you want to change the coordinates to move after the 'change' event.\n   *   // it works when the holding value of the change event is true.\n   *   event.holding && event.set({x: 10});\n   * });\n   * ```\n   */\n  public triggerChange(\n    pos: Axis,\n    depaPos?: Axis,\n    option?: ChangeEventOption,\n    holding: boolean = false\n  ) {\n    const animationManager = this.animationManager;\n    const axisManager = animationManager.axisManager;\n    const eventInfo = animationManager.getEventInfo();\n    const { roundPos, roundDepa } = this._getRoundPos(pos, depaPos);\n    const moveTo = axisManager.moveTo(roundPos, roundDepa);\n    const inputEvent = option?.event || eventInfo?.event || null;\n    const param = {\n      pos: moveTo.pos,\n      delta: moveTo.delta,\n      bounceRatio: this._getBounceRatio(moveTo.pos),\n      holding,\n      inputEvent,\n      isTrusted: !!inputEvent,\n      input: option?.input || eventInfo?.input || null,\n      set: inputEvent ? this._createUserControll(moveTo.pos) : () => {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    };\n    const event = new ComponentEvent(\"change\", param);\n    this._axes.trigger(event);\n    Object.keys(moveTo.pos).forEach((axis) => {\n      const p = moveTo.pos[axis];\n      getObserver(this._axes, axis, p).current = p;\n    });\n\n    if (inputEvent) {\n      axisManager.set(\n        (param.set() as { destPos: Axis; duration: number }).destPos\n      );\n    }\n\n    return !event.isCanceled();\n  }\n\n  /**\n   * This event is fired when animation starts.\n   * @ko 에니메이션이 시작할 때 발생한다.\n   * @event Axes#animationStart\n   * @type {object}\n   * @property {Object.<string, number>} depaPos The coordinates when animation starts<ko>애니메이션이 시작 되었을 때의 좌표 </ko>\n   * @property {Object.<string, number>} destPos The coordinates to move to. If you change this value, you can run the animation<ko>이동할 좌표. 이값을 변경하여 애니메이션을 동작시킬수 있다</ko>\n   * @property {Object.<string, number>} delta  The movement variation of coordinate <ko>좌표의 변화량</ko>\n   * @property {Number} duration Duration of the animation (unit: ms). If you change this value, you can control the animation duration time.<ko>애니메이션 진행 시간(단위: ms). 이값을 변경하여 애니메이션의 이동시간을 조절할 수 있다.</ko>\n   * @property {Object} input The instance of inputType where the event occurred. If the value is changed by animation, it returns 'null'.<ko>이벤트가 발생한 inputType 인스턴스. 애니메이션에 의해 값이 변경될 경우에는 'null'을 반환한다.</ko>\n   * @property {Object} inputEvent The event object received from inputType <ko>inputType으로 부터 받은 이벤트 객체</ko>\n   * @property {setTo} setTo Specifies the animation coordinates to move after the event <ko>이벤트 이후 이동할 애니메이션 좌표를 지정한다</ko>\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"release\", function(event) {\n   *   // event.depaPos\n   *   // event.destPos\n   *   // event.delta\n   *   // event.input\n   *   // event.inputEvent\n   *   // event.setTo\n   *   // event.isTrusted\n   *\n   *   // if you want to change the animation coordinates to move after the 'animationStart' event.\n   *   event.setTo({x: 10}, 2000);\n   * });\n   * ```\n   */\n  public triggerAnimationStart(param: AnimationParam): boolean {\n    const { roundPos, roundDepa } = this._getRoundPos(\n      param.destPos,\n      param.depaPos\n    );\n    param.destPos = roundPos;\n    param.depaPos = roundDepa;\n    param.setTo = this._createUserControll(param.destPos, param.duration);\n    const event = new ComponentEvent(\n      \"animationStart\",\n      param as OnAnimationStart\n    );\n    this._axes.trigger(event);\n    return !event.isCanceled();\n  }\n\n  /**\n   * This event is fired when animation ends.\n   * @ko 에니메이션이 끝났을 때 발생한다.\n   * @event Axes#animationEnd\n   * @type {object}\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"animationEnd\", function(event) {\n   *   // event.isTrusted\n   * });\n   * ```\n   */\n  public triggerAnimationEnd(isTrusted: boolean = false) {\n    this._axes.trigger(\n      new ComponentEvent(\"animationEnd\", {\n        isTrusted,\n      })\n    );\n  }\n\n  /**\n   * This event is fired when all actions have been completed.\n   * @ko 에니메이션이 끝났을 때 발생한다.\n   * @event Axes#finish\n   * @type {object}\n   * @property {Boolean} isTrusted Returns true if an event was generated by the user action, or false if it was caused by a script or API call <ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * }).on(\"finish\", function(event) {\n   *   // event.isTrusted\n   * });\n   * ```\n   */\n  public triggerFinish(isTrusted: boolean = false) {\n    this._axes.trigger(\n      new ComponentEvent(\"finish\", {\n        isTrusted,\n      })\n    );\n  }\n\n  public setAnimationManager(animationManager: AnimationManager) {\n    this.animationManager = animationManager;\n  }\n\n  public destroy() {\n    this._axes.off();\n  }\n\n  private _createUserControll(pos: Axis, duration: number = 0) {\n    // to controll\n    const userControl = {\n      destPos: { ...pos },\n      duration,\n    };\n    return (\n      toPos?: Axis,\n      userDuration?: number\n    ): { destPos: Axis; duration: number } => {\n      if (toPos) {\n        userControl.destPos = { ...toPos };\n      }\n      if (userDuration !== undefined) {\n        userControl.duration = userDuration;\n      }\n      return userControl;\n    };\n  }\n\n  private _getRoundPos(pos: Axis, depaPos?: Axis) {\n    // round value if round exist\n    const roundUnit = this._axes.options.round;\n\n    // if (round == null) {\n    //   return {pos, depaPos}; // undefined, undefined\n    // }\n    return {\n      roundPos: roundNumbers(pos, roundUnit),\n      roundDepa: roundNumbers(depaPos, roundUnit),\n    };\n  }\n\n  private _getBounceRatio(pos: Axis): Axis {\n    return this._axes.axisManager.map(pos, (v, opt) => {\n      if (v < opt.range[0] && opt.bounce[0] !== 0) {\n        return (opt.range[0] - v) / opt.bounce[0];\n      } else if (v > opt.range[1] && opt.bounce[1] !== 0) {\n        return (v - opt.range[1]) / opt.bounce[1];\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesOption } from \"./Axes\";\nexport class InterruptManager {\n  private _prevented = false; //  check whether the animation event was prevented\n  public constructor(private _options: AxesOption) {}\n\n  public isInterrupting() {\n    // when interruptable is 'true', return value is always 'true'.\n    return this._options.interruptable || this._prevented;\n  }\n\n  public isInterrupted() {\n    return !this._options.interruptable && this._prevented;\n  }\n\n  public setInterrupt(prevented) {\n    if (!this._options.interruptable) {\n      this._prevented = prevented;\n    }\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport const getInsidePosition = (\n  destPos: number,\n  range: number[],\n  circular: boolean[],\n  bounce?: number[]\n): number => {\n  let toDestPos: number = destPos;\n  const targetRange: number[] = [\n    circular[0] ? range[0] : bounce ? range[0] - bounce[0] : range[0],\n    circular[1] ? range[1] : bounce ? range[1] + bounce[1] : range[1],\n  ];\n\n  toDestPos = Math.max(targetRange[0], toDestPos);\n  toDestPos = Math.min(targetRange[1], toDestPos);\n\n  return toDestPos;\n};\n\n// determine outside\nexport const isOutside = (pos: number, range: number[]): boolean => {\n  return pos < range[0] || pos > range[1];\n};\n\n// determine whether position has reached the maximum moveable area\nexport const isEndofBounce = (\n  pos: number,\n  range: number[],\n  bounce: number[],\n  circular: boolean[]\n): boolean => {\n  return (\n    (!circular[0] && pos === range[0] - bounce[0]) ||\n    (!circular[1] && pos === range[1] + bounce[1])\n  );\n};\n\nexport const getDuration = (distance: number, deceleration): number => {\n  const duration = Math.sqrt((distance / deceleration) * 2);\n\n  // when duration is under 100, then value is zero\n  return duration < 100 ? 0 : duration;\n};\n\nexport const isCircularable = (\n  destPos: number,\n  range: number[],\n  circular: boolean[]\n): boolean => {\n  return (\n    (circular[1] && destPos > range[1]) || (circular[0] && destPos < range[0])\n  );\n};\n\nexport const getCirculatedPos = (\n  pos: number,\n  range: number[],\n  circular: boolean[]\n): number => {\n  let toPos = pos;\n  const min = range[0];\n  const max = range[1];\n  const length = max - min;\n\n  if (circular[1] && pos > max) {\n    // right\n    toPos = ((toPos - max) % length) + min;\n  }\n  if (circular[0] && pos < min) {\n    // left\n    toPos = ((toPos - min) % length) + max;\n  }\n  return toPos;\n};\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { isOutside, getCirculatedPos } from \"./Coordinate\";\nimport { map, filter, every } from \"./utils\";\nimport { ObjectInterface } from \"./types\";\n\nexport interface Axis {\n  [key: string]: number;\n}\n\nexport interface AxisOption {\n  range?: number[];\n  bounce?: number | number[];\n  circular?: boolean | boolean[];\n  startPos?: number;\n}\n\nexport class AxisManager {\n  private _pos: Axis;\n  public constructor(private _axis: ObjectInterface<AxisOption>) {\n    this._complementOptions();\n    this._pos = Object.keys(this._axis).reduce((pos, v) => {\n      pos[v] = this._axis[v].startPos;\n      return pos;\n    }, {});\n  }\n\n  public getDelta(depaPos: Axis, destPos: Axis): Axis {\n    const fullDepaPos = this.get(depaPos);\n    return map(this.get(destPos), (v, k) => v - fullDepaPos[k]);\n  }\n\n  public get(axes?: string[] | Axis): Axis {\n    if (axes && Array.isArray(axes)) {\n      return axes.reduce((acc, v) => {\n        if (v && v in this._pos) {\n          acc[v] = this._pos[v];\n        }\n        return acc;\n      }, {});\n    } else {\n      return { ...this._pos, ...((axes || {}) as Axis) };\n    }\n  }\n\n  public moveTo(pos: Axis, depaPos: Axis = this._pos): { [key: string]: Axis } {\n    const delta = map(this._pos, (v, key) => {\n      return key in pos && key in depaPos ? pos[key] - depaPos[key] : 0;\n    });\n\n    this.set(\n      this.map(pos, (v, opt) =>\n        opt ? getCirculatedPos(v, opt.range, opt.circular as boolean[]) : 0\n      )\n    );\n    return {\n      pos: { ...this._pos },\n      delta,\n    };\n  }\n\n  public set(pos: Axis) {\n    for (const k in pos) {\n      if (k && k in this._pos) {\n        this._pos[k] = pos[k];\n      }\n    }\n  }\n\n  public every(\n    pos: Axis,\n    callback: (value: number, options: AxisOption, key: string) => boolean\n  ): boolean {\n    const axisOptions = this._axis;\n\n    return every(pos, (value, key) => callback(value, axisOptions[key], key));\n  }\n\n  public filter(\n    pos: Axis,\n    callback: (value: number, options: AxisOption, key: string) => boolean\n  ): Axis {\n    const axisOptions = this._axis;\n\n    return filter(pos, (value, key) => callback(value, axisOptions[key], key));\n  }\n\n  public map<U>(\n    pos: Axis,\n    callback: (value: number, options: AxisOption, key: string) => U\n  ) {\n    const axisOptions = this._axis;\n\n    return map<number, U>(pos, (value, key) =>\n      callback(value, axisOptions[key], key)\n    );\n  }\n\n  public isOutside(axes?: string[]) {\n    return !this.every(\n      axes ? this.get(axes) : this._pos,\n      (v, opt) => !isOutside(v, opt.range)\n    );\n  }\n\n  public getAxisOptions(key: string) {\n    return this._axis[key];\n  }\n\n  public setAxis(axis: ObjectInterface<AxisOption>) {\n    Object.keys(axis).forEach((key) => {\n      if (!this._axis[key]) {\n        throw new Error(`Axis ${key} does not exist in Axes instance`);\n      }\n      this._axis[key] = {\n        ...this._axis[key],\n        ...axis[key],\n      };\n    });\n    this._complementOptions();\n  }\n\n  /**\n   * set up 'css' expression\n   * @private\n   */\n  private _complementOptions() {\n    Object.keys(this._axis).forEach((axis) => {\n      this._axis[axis] = {\n        ...{\n          range: [0, 100],\n          startPos: this._axis[axis].range[0],\n          bounce: [0, 0],\n          circular: [false, false],\n        },\n        ...this._axis[axis],\n      };\n\n      [\"bounce\", \"circular\"].forEach((v) => {\n        const axisOption = this._axis;\n        const key = axisOption[axis][v];\n\n        if (/string|number|boolean/.test(typeof key)) {\n          axisOption[axis][v] = [key, key];\n        }\n      });\n    });\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ExtendedEvent, InputEventType, LatestInterval } from \"../types\";\nimport { getAngle } from \"../utils\";\nimport { window } from \"../browser\";\nimport {\n  ALT,\n  ANY,\n  CTRL,\n  META,\n  MOUSE_LEFT,\n  MOUSE_MIDDLE,\n  MOUSE_RIGHT,\n  NONE,\n  SHIFT,\n  VELOCITY_INTERVAL,\n} from \"../const\";\n\nexport const SUPPORT_TOUCH = \"ontouchstart\" in window;\nexport const SUPPORT_POINTER = \"PointerEvent\" in window;\nexport const SUPPORT_MSPOINTER = \"MSPointerEvent\" in window;\nexport const SUPPORT_POINTER_EVENTS = SUPPORT_POINTER || SUPPORT_MSPOINTER;\n\nexport const isValidKey = (\n  event: InputEventType | WheelEvent,\n  inputKey?: string[]\n): boolean => {\n  if (\n    !inputKey ||\n    inputKey.indexOf(ANY) > -1 ||\n    (inputKey.indexOf(NONE) > -1 &&\n      !event.shiftKey &&\n      !event.ctrlKey &&\n      !event.altKey &&\n      !event.metaKey) ||\n    (inputKey.indexOf(SHIFT) > -1 && event.shiftKey) ||\n    (inputKey.indexOf(CTRL) > -1 && event.ctrlKey) ||\n    (inputKey.indexOf(ALT) > -1 && event.altKey) ||\n    (inputKey.indexOf(META) > -1 && event.metaKey)\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport abstract class EventInput {\n  public prevEvent: ExtendedEvent;\n  private _latestInterval: LatestInterval;\n\n  public abstract onEventStart(\n    event: InputEventType,\n    inputButton?: string[]\n  ): ExtendedEvent;\n\n  public abstract onEventMove(\n    event: InputEventType,\n    inputButton?: string[]\n  ): ExtendedEvent;\n\n  public abstract onEventEnd(event: InputEventType): void;\n\n  public abstract onRelease(event: InputEventType): void;\n\n  public abstract getTouches(\n    event: InputEventType,\n    inputKey?: string[],\n    inputButton?: string[]\n  ): number;\n\n  protected abstract _getScale(event: InputEventType): number;\n\n  protected abstract _getCenter(event: InputEventType): {\n    x: number;\n    y: number;\n  };\n\n  protected abstract _getMovement(event: InputEventType): {\n    x: number;\n    y: number;\n  };\n\n  public extendEvent(event: InputEventType): ExtendedEvent {\n    const prevEvent = this.prevEvent;\n    const center = this._getCenter(event);\n    const movement = prevEvent ? this._getMovement(event) : { x: 0, y: 0 };\n    const scale = prevEvent ? this._getScale(event) : 1;\n    const angle = prevEvent\n      ? getAngle(center.x - prevEvent.center.x, center.y - prevEvent.center.y)\n      : 0;\n    const deltaX = prevEvent ? prevEvent.deltaX + movement.x : movement.x;\n    const deltaY = prevEvent ? prevEvent.deltaY + movement.y : movement.y;\n    const offsetX = movement.x;\n    const offsetY = movement.y;\n    const latestInterval = this._latestInterval;\n    const timeStamp = Date.now();\n    const deltaTime = latestInterval ? timeStamp - latestInterval.timestamp : 0;\n    let velocityX = prevEvent ? prevEvent.velocityX : 0;\n    let velocityY = prevEvent ? prevEvent.velocityY : 0;\n    if (!latestInterval || deltaTime >= VELOCITY_INTERVAL) {\n      if (latestInterval) {\n        [velocityX, velocityY] = [\n          (deltaX - latestInterval.deltaX) / deltaTime,\n          (deltaY - latestInterval.deltaY) / deltaTime,\n        ];\n      }\n      this._latestInterval = {\n        timestamp: timeStamp,\n        deltaX,\n        deltaY,\n      };\n    }\n    return {\n      srcEvent: event,\n      scale,\n      angle,\n      center,\n      deltaX,\n      deltaY,\n      offsetX,\n      offsetY,\n      velocityX,\n      velocityY,\n      preventSystemEvent: true,\n    };\n  }\n\n  protected _getDistance(\n    start: Touch | PointerEvent,\n    end: Touch | PointerEvent\n  ): number {\n    const x = end.clientX - start.clientX;\n    const y = end.clientY - start.clientY;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  protected _getButton(event: InputEventType): string {\n    const buttonCodeMap = { 1: MOUSE_LEFT, 2: MOUSE_RIGHT, 4: MOUSE_MIDDLE };\n    const button = this._isTouchEvent(event)\n      ? MOUSE_LEFT\n      : buttonCodeMap[event.buttons];\n    return button ? button : null;\n  }\n\n  protected _isTouchEvent(event: InputEventType): event is TouchEvent {\n    return event.type && event.type.indexOf(\"touch\") > -1;\n  }\n\n  protected _isValidButton(button: string, inputButton: string[]): boolean {\n    return inputButton.indexOf(button) > -1;\n  }\n\n  protected _isValidEvent(\n    event: InputEventType,\n    inputKey?: string[],\n    inputButton?: string[]\n  ): boolean {\n    return (\n      (!inputKey || isValidKey(event, inputKey)) &&\n      (!inputButton || this._isValidButton(this._getButton(event), inputButton))\n    );\n  }\n\n  protected _preventMouseButton(event: InputEventType, button: string): void {\n    if (button === MOUSE_RIGHT) {\n      window.addEventListener(\"contextmenu\", this._stopContextMenu);\n    } else if (button === MOUSE_MIDDLE) {\n      event.preventDefault();\n    }\n  }\n\n  private _stopContextMenu = (event: InputEventType) => {\n    event.preventDefault();\n    window.removeEventListener(\"contextmenu\", this._stopContextMenu);\n  };\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { InputEventType, ExtendedEvent } from \"../types\";\nimport { MOUSE_LEFT, MOUSE_MIDDLE, MOUSE_RIGHT } from \"../const\";\n\nimport { EventInput } from \"./EventInput\";\n\nexport class MouseEventInput extends EventInput {\n  public readonly start = [\"mousedown\"];\n  public readonly move = [\"mousemove\"];\n  public readonly end = [\"mouseup\"];\n\n  public onEventStart(\n    event: InputEventType,\n    inputKey?: string[],\n    inputButton?: string[]\n  ): ExtendedEvent {\n    const button = this._getButton(event);\n    if (!this._isValidEvent(event, inputKey, inputButton)) {\n      return null;\n    }\n    this._preventMouseButton(event, button);\n    return this.extendEvent(event);\n  }\n\n  public onEventMove(\n    event: InputEventType,\n    inputKey?: string[],\n    inputButton?: string[]\n  ): ExtendedEvent {\n    if (!this._isValidEvent(event, inputKey, inputButton)) {\n      return null;\n    }\n    return this.extendEvent(event);\n  }\n\n  public onEventEnd(): void {\n    return;\n  }\n\n  public onRelease(): void {\n    this.prevEvent = null;\n    return;\n  }\n\n  public getTouches(event: InputEventType, inputButton?: string[]): number {\n    if (inputButton) {\n      const buttonCodeMap = { 1: MOUSE_LEFT, 2: MOUSE_MIDDLE, 3: MOUSE_RIGHT };\n      return this._isValidButton(buttonCodeMap[event.which], inputButton) &&\n        this.end.indexOf(event.type) === -1\n        ? 1\n        : 0;\n    }\n    return 0;\n  }\n\n  protected _getScale(): number {\n    return 1;\n  }\n\n  protected _getCenter(event: MouseEvent): { x: number; y: number } {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  protected _getMovement(event: MouseEvent): { x: number; y: number } {\n    const prev = this.prevEvent.srcEvent as MouseEvent;\n    return {\n      x: event.clientX - prev.clientX,\n      y: event.clientY - prev.clientY,\n    };\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { InputEventType, ExtendedEvent } from \"../types\";\n\nimport { EventInput } from \"./EventInput\";\n\nexport class TouchEventInput extends EventInput {\n  public readonly start = [\"touchstart\"];\n  public readonly move = [\"touchmove\"];\n  public readonly end = [\"touchend\", \"touchcancel\"];\n\n  private _baseTouches: TouchList;\n\n  public onEventStart(\n    event: InputEventType,\n    inputKey?: string[]\n  ): ExtendedEvent {\n    this._baseTouches = (event as TouchEvent).touches;\n    if (!this._isValidEvent(event, inputKey)) {\n      return null;\n    }\n    return this.extendEvent(event);\n  }\n\n  public onEventMove(\n    event: InputEventType,\n    inputKey?: string[]\n  ): ExtendedEvent {\n    if (!this._isValidEvent(event, inputKey)) {\n      return null;\n    }\n    return this.extendEvent(event);\n  }\n\n  public onEventEnd(event: InputEventType): void {\n    this._baseTouches = (event as TouchEvent).touches;\n    return;\n  }\n\n  public onRelease(): void {\n    this.prevEvent = null;\n    this._baseTouches = null;\n    return;\n  }\n\n  public getTouches(event: InputEventType): number {\n    return (event as TouchEvent).touches.length;\n  }\n\n  protected _getScale(event: TouchEvent): number {\n    if (event.touches.length !== 2 || this._baseTouches.length < 2) {\n      return null; // TODO: consider calculating non-pinch gesture scale\n    }\n    return (\n      this._getDistance(event.touches[0], event.touches[1]) /\n      this._getDistance(this._baseTouches[0], this._baseTouches[1])\n    );\n  }\n\n  protected _getCenter(event: TouchEvent): { x: number; y: number } {\n    return {\n      x: event.touches[0].clientX,\n      y: event.touches[0].clientY,\n    };\n  }\n\n  protected _getMovement(event: TouchEvent): { x: number; y: number } {\n    const prev = this.prevEvent.srcEvent as TouchEvent;\n    if (event.touches[0].identifier !== prev.touches[0].identifier) {\n      return {\n        x: 0,\n        y: 0,\n      };\n    }\n    return {\n      x: event.touches[0].clientX - prev.touches[0].clientX,\n      y: event.touches[0].clientY - prev.touches[0].clientY,\n    };\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { InputEventType, ExtendedEvent } from \"../types\";\n\nimport { EventInput, SUPPORT_POINTER } from \"./EventInput\";\n\nexport class PointerEventInput extends EventInput {\n  public readonly start = SUPPORT_POINTER ? [\"pointerdown\"] : [\"MSPointerDown\"];\n  public readonly move = SUPPORT_POINTER ? [\"pointermove\"] : [\"MSPointerMove\"];\n  public readonly end = SUPPORT_POINTER\n    ? [\"pointerup\", \"pointercancel\"]\n    : [\"MSPointerUp\", \"MSPointerCancel\"];\n\n  // store first, recent inputs for each event id\n  private _firstInputs: PointerEvent[] = [];\n  private _recentInputs: PointerEvent[] = [];\n\n  public onEventStart(\n    event: InputEventType,\n    inputKey?: string[],\n    inputButton?: string[]\n  ): ExtendedEvent {\n    const button = this._getButton(event);\n    if (!this._isValidEvent(event, inputKey, inputButton)) {\n      return null;\n    }\n    this._preventMouseButton(event, button);\n    this._updatePointerEvent(event as PointerEvent);\n    return this.extendEvent(event);\n  }\n\n  public onEventMove(\n    event: InputEventType,\n    inputKey?: string[],\n    inputButton?: string[]\n  ): ExtendedEvent {\n    if (!this._isValidEvent(event, inputKey, inputButton)) {\n      return null;\n    }\n    this._updatePointerEvent(event as PointerEvent);\n    return this.extendEvent(event);\n  }\n\n  public onEventEnd(event: InputEventType): void {\n    this._removePointerEvent(event as PointerEvent);\n  }\n\n  public onRelease(): void {\n    this.prevEvent = null;\n    this._firstInputs = [];\n    this._recentInputs = [];\n    return;\n  }\n\n  public getTouches(): number {\n    return this._recentInputs.length;\n  }\n\n  protected _getScale(): number {\n    if (this._recentInputs.length !== 2) {\n      return null; // TODO: consider calculating non-pinch gesture scale\n    }\n    return (\n      this._getDistance(this._recentInputs[0], this._recentInputs[1]) /\n      this._getDistance(this._firstInputs[0], this._firstInputs[1])\n    );\n  }\n\n  protected _getCenter(event: PointerEvent): { x: number; y: number } {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  protected _getMovement(event: PointerEvent): { x: number; y: number } {\n    const prev = this.prevEvent.srcEvent as PointerEvent;\n    if (event.pointerId !== prev.pointerId) {\n      return {\n        x: 0,\n        y: 0,\n      };\n    }\n    return {\n      x: event.clientX - prev.clientX,\n      y: event.clientY - prev.clientY,\n    };\n  }\n\n  private _updatePointerEvent(event: PointerEvent) {\n    let addFlag = false;\n    this._recentInputs.forEach((e, i) => {\n      if (e.pointerId === event.pointerId) {\n        addFlag = true;\n        this._recentInputs[i] = event;\n      }\n    });\n    if (!addFlag) {\n      this._firstInputs.push(event);\n      this._recentInputs.push(event);\n    }\n  }\n\n  private _removePointerEvent(event?: PointerEvent) {\n    this._firstInputs = this._firstInputs.filter(\n      (x) => x.pointerId !== event.pointerId\n    );\n    this._recentInputs = this._recentInputs.filter(\n      (x) => x.pointerId !== event.pointerId\n    );\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { InputEventType, ExtendedEvent } from \"../types\";\n\nimport { EventInput } from \"./EventInput\";\n\nexport class TouchMouseEventInput extends EventInput {\n  public readonly start = [\"mousedown\", \"touchstart\"];\n  public readonly move = [\"mousemove\", \"touchmove\"];\n  public readonly end = [\"mouseup\", \"touchend\", \"touchcancel\"];\n\n  private _baseTouches: TouchList;\n\n  public onEventStart(\n    event: InputEventType,\n    inputKey?: string[],\n    inputButton?: string[]\n  ): ExtendedEvent {\n    const button = this._getButton(event);\n    if (this._isTouchEvent(event)) {\n      this._baseTouches = event.touches;\n    }\n    if (!this._isValidEvent(event, inputKey, inputButton)) {\n      return null;\n    }\n    this._preventMouseButton(event, button);\n    return this.extendEvent(event);\n  }\n\n  public onEventMove(\n    event: InputEventType,\n    inputKey?: string[],\n    inputButton?: string[]\n  ): ExtendedEvent {\n    if (!this._isValidEvent(event, inputKey, inputButton)) {\n      return null;\n    }\n    return this.extendEvent(event);\n  }\n\n  public onEventEnd(event: InputEventType): void {\n    if (this._isTouchEvent(event)) {\n      this._baseTouches = event.touches;\n    }\n    return;\n  }\n\n  public onRelease(): void {\n    this.prevEvent = null;\n    this._baseTouches = null;\n    return;\n  }\n\n  public getTouches(event: InputEventType): number {\n    return this._isTouchEvent(event) ? event.touches.length : 0;\n  }\n\n  protected _getScale(event: MouseEvent | TouchEvent): number {\n    if (this._isTouchEvent(event)) {\n      if (event.touches.length !== 2 || this._baseTouches.length < 2) {\n        return 1; // TODO: consider calculating non-pinch gesture scale\n      }\n      return (\n        this._getDistance(event.touches[0], event.touches[1]) /\n        this._getDistance(this._baseTouches[0], this._baseTouches[1])\n      );\n    }\n    return this.prevEvent.scale;\n  }\n\n  protected _getCenter(event: MouseEvent | TouchEvent): {\n    x: number;\n    y: number;\n  } {\n    if (this._isTouchEvent(event)) {\n      return {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY,\n      };\n    }\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  protected _getMovement(event: MouseEvent | TouchEvent): {\n    x: number;\n    y: number;\n  } {\n    const prev = this.prevEvent.srcEvent;\n    const [nextSpot, prevSpot] = [event, prev].map((e) => {\n      if (this._isTouchEvent(e)) {\n        return {\n          id: e.touches[0].identifier,\n          x: e.touches[0].clientX,\n          y: e.touches[0].clientY,\n        };\n      }\n      return {\n        id: null,\n        x: e.clientX,\n        y: e.clientY,\n      };\n    });\n    return nextSpot.id === prevSpot.id\n      ? { x: nextSpot.x - prevSpot.x, y: nextSpot.y - prevSpot.y }\n      : { x: 0, y: 0 };\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { Axis } from \"../AxisManager\";\nimport { AxesOption } from \"../Axes\";\nimport { ActiveEvent } from \"../types\";\nimport { MouseEventInput } from \"../eventInput/MouseEventInput\";\nimport { TouchEventInput } from \"../eventInput/TouchEventInput\";\nimport { PointerEventInput } from \"../eventInput/PointerEventInput\";\nimport { TouchMouseEventInput } from \"../eventInput/TouchMouseEventInput\";\nimport {\n  SUPPORT_POINTER_EVENTS,\n  SUPPORT_TOUCH,\n} from \"../eventInput/EventInput\";\n\nexport interface InputType {\n  axes: string[];\n  element: HTMLElement;\n  mapAxes(axes: string[]);\n  connect(observer: InputTypeObserver): InputType;\n  disconnect();\n  destroy();\n  enable?();\n  disable?();\n  isEnable?(): boolean;\n}\n\nexport interface InputTypeObserver {\n  options: AxesOption;\n  get(inputType: InputType): Axis;\n  change(inputType: InputType, event, offset: Axis, useAnimation?: boolean);\n  hold(inputType: InputType, event);\n  release(\n    inputType: InputType,\n    event,\n    velocity: number[],\n    inputDuration?: number\n  );\n}\n\nexport const toAxis = (source: string[], offset: number[]): Axis => {\n  return offset.reduce((acc, v, i) => {\n    if (source[i]) {\n      acc[source[i]] = v;\n    }\n    return acc;\n  }, {});\n};\n\nexport const convertInputType = (inputType: string[] = []): ActiveEvent => {\n  let hasTouch = false;\n  let hasMouse = false;\n  let hasPointer = false;\n\n  inputType.forEach((v) => {\n    switch (v) {\n      case \"mouse\":\n        hasMouse = true;\n        break;\n      case \"touch\":\n        hasTouch = SUPPORT_TOUCH;\n        break;\n      case \"pointer\":\n        hasPointer = SUPPORT_POINTER_EVENTS;\n      // no default\n    }\n  });\n  if (hasPointer) {\n    return new PointerEventInput();\n  } else if (hasTouch && hasMouse) {\n    return new TouchMouseEventInput();\n  } else if (hasTouch) {\n    return new TouchEventInput();\n  } else if (hasMouse) {\n    return new MouseEventInput();\n  }\n  return null;\n};\n\nexport function getAddEventOptions(eventName: string) {\n\t// The passive default value of the touch event is true.\n\t// If not a touch event, return false to support ie11\n\treturn eventName.indexOf(\"touch\") > -1 ? { passive: false } : false;\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { InterruptManager } from \"./InterruptManager\";\nimport { InputType, InputTypeObserver, toAxis } from \"./inputType/InputType\";\nimport { EventManager, ChangeEventOption } from \"./EventManager\";\nimport { AxisManager, Axis } from \"./AxisManager\";\nimport { AxesOption } from \"./Axes\";\nimport {\n  isOutside,\n  getInsidePosition,\n  getCirculatedPos,\n  isEndofBounce,\n} from \"./Coordinate\";\nimport { map, equal } from \"./utils\";\nimport { AnimationParam } from \"./types\";\nimport { AnimationManager } from \"./animation/AnimationManager\";\n\nexport class InputObserver implements InputTypeObserver {\n  public options: AxesOption;\n  private _interruptManager: InterruptManager;\n  private _eventManager: EventManager;\n  private _axisManager: AxisManager;\n  private _animationManager: AnimationManager;\n  private _isOutside = false;\n  private _moveDistance: Axis = null;\n  private _isStopped = false;\n  public constructor({\n    options,\n    interruptManager,\n    eventManager,\n    axisManager,\n    animationManager,\n  }: {\n    options: AxesOption;\n    interruptManager: InterruptManager;\n    eventManager: EventManager;\n    axisManager: AxisManager;\n    animationManager: AnimationManager;\n  }) {\n    this.options = options;\n    this._interruptManager = interruptManager;\n    this._eventManager = eventManager;\n    this._axisManager = axisManager;\n    this._animationManager = animationManager;\n  }\n\n  public get(input: InputType): Axis {\n    return this._axisManager.get(input.axes);\n  }\n\n  public hold(input: InputType, event) {\n    if (this._interruptManager.isInterrupted() || !input.axes.length) {\n      return;\n    }\n    const changeOption: ChangeEventOption = {\n      input,\n      event,\n    };\n    this._isStopped = false;\n    this._interruptManager.setInterrupt(true);\n    this._animationManager.stopAnimation(changeOption);\n    if (!this._moveDistance) {\n      this._eventManager.hold(this._axisManager.get(), changeOption);\n    }\n    this._isOutside = this._axisManager.isOutside(input.axes);\n    this._moveDistance = this._axisManager.get(input.axes);\n  }\n\n  public change(input: InputType, event, offset: Axis, useAnimation?: boolean) {\n    if (\n      this._isStopped ||\n      !this._interruptManager.isInterrupting() ||\n      this._axisManager.every(offset, (v) => v === 0)\n    ) {\n      return;\n    }\n    const nativeEvent = event.srcEvent ? event.srcEvent : event;\n    if (nativeEvent.__childrenAxesAlreadyChanged) {\n      return;\n    }\n    let depaPos: Axis = this._moveDistance || this._axisManager.get(input.axes);\n    let destPos: Axis;\n\n    // for outside logic\n    destPos = map(depaPos, (v, k) => v + (offset[k] || 0));\n    if (this._moveDistance) {\n      this._moveDistance = this._axisManager.map(\n        destPos,\n        (v, { circular, range }) =>\n          circular && (circular[0] || circular[1])\n            ? getCirculatedPos(v, range, circular as boolean[])\n            : v\n      );\n    }\n    // from outside to inside\n    if (\n      this._isOutside &&\n      this._axisManager.every(depaPos, (v, opt) => !isOutside(v, opt.range))\n    ) {\n      this._isOutside = false;\n    }\n    depaPos = this._atOutside(depaPos);\n    destPos = this._atOutside(destPos);\n\n    if (!this.options.nested || !this._isEndofAxis(offset, depaPos, destPos)) {\n      nativeEvent.__childrenAxesAlreadyChanged = true;\n    }\n\n    const changeOption: ChangeEventOption = {\n      input,\n      event,\n    };\n    if (useAnimation) {\n      const duration = this._animationManager.getDuration(destPos, depaPos);\n      this._animationManager.animateTo(destPos, duration, changeOption);\n    } else {\n      const isCanceled = !this._eventManager.triggerChange(\n        destPos,\n        depaPos,\n        changeOption,\n        true\n      );\n      if (isCanceled) {\n        this._isStopped = true;\n        this._moveDistance = null;\n        this._animationManager.finish(false);\n      }\n    }\n  }\n\n  public release(\n    input: InputType,\n    event,\n    velocity: number[],\n    inputDuration?: number\n  ) {\n    if (\n      this._isStopped ||\n      !this._interruptManager.isInterrupting() ||\n      !this._moveDistance\n    ) {\n      return;\n    }\n    const nativeEvent = event.srcEvent ? event.srcEvent : event;\n    if (nativeEvent.__childrenAxesAlreadyReleased) {\n      velocity = velocity.map(() => 0);\n    }\n    const pos: Axis = this._axisManager.get(input.axes);\n    const depaPos: Axis = this._axisManager.get();\n    const displacement = this._animationManager.getDisplacement(velocity);\n    const offset = toAxis(input.axes, displacement);\n    let destPos: Axis = this._axisManager.get(\n      this._axisManager.map(offset, (v, opt, k) => {\n        if (opt.circular && (opt.circular[0] || opt.circular[1])) {\n          return pos[k] + v;\n        } else {\n          return getInsidePosition(\n            pos[k] + v,\n            opt.range,\n            opt.circular as boolean[],\n            opt.bounce as number[]\n          );\n        }\n      })\n    );\n    nativeEvent.__childrenAxesAlreadyReleased = true;\n    const duration = this._animationManager.getDuration(\n      destPos,\n      pos,\n      inputDuration\n    );\n\n    if (duration === 0) {\n      destPos = { ...depaPos };\n    }\n    // prepare params\n    const param: AnimationParam = {\n      depaPos,\n      destPos,\n      duration,\n      delta: this._axisManager.getDelta(depaPos, destPos),\n      inputEvent: event,\n      input,\n      isTrusted: true,\n    };\n    this._eventManager.triggerRelease(param);\n    this._moveDistance = null;\n\n    // to contol\n    const userWish = this._animationManager.getUserControl(param);\n    const isEqual = equal(userWish.destPos, depaPos);\n    const changeOption: ChangeEventOption = {\n      input,\n      event,\n    };\n    if (isEqual || userWish.duration === 0) {\n      if (!isEqual) {\n        this._eventManager.triggerChange(\n          userWish.destPos,\n          depaPos,\n          changeOption,\n          true\n        );\n      }\n      this._interruptManager.setInterrupt(false);\n      if (this._axisManager.isOutside()) {\n        this._animationManager.restore(changeOption);\n      } else {\n        this._eventManager.triggerFinish(true);\n      }\n    } else {\n      this._animationManager.animateTo(\n        userWish.destPos,\n        userWish.duration,\n        changeOption\n      );\n    }\n  }\n\n  // when move pointer is held in outside\n  private _atOutside(pos: Axis) {\n    if (this._isOutside) {\n      return this._axisManager.map(pos, (v, opt) => {\n        const tn = opt.range[0] - (opt.bounce[0] as number);\n        const tx = opt.range[1] + (opt.bounce[1] as number);\n        return v > tx ? tx : v < tn ? tn : v;\n      });\n    } else {\n      return this._axisManager.map(pos, (v, opt) => {\n        const min = opt.range[0];\n        const max = opt.range[1];\n        const out = opt.bounce;\n        const circular = opt.circular;\n\n        if ((circular[0] && v < min) || (circular[1] && v > max)) {\n          return v;\n        } else if (v < min) {\n          // left\n          return (\n            min - this._animationManager.interpolate(min - v, out[0] as number)\n          );\n        } else if (v > max) {\n          // right\n          return (\n            max + this._animationManager.interpolate(v - max, out[1] as number)\n          );\n        }\n        return v;\n      });\n    }\n  }\n\n  private _isEndofAxis(offset: Axis, depaPos: Axis, destPos: Axis) {\n    return this._axisManager.every(\n      depaPos,\n      (value, option, key) =>\n        offset[key] === 0 ||\n        (depaPos[key] === destPos[key] &&\n          isEndofBounce(\n            value,\n            option.range,\n            option.bounce as number[],\n            option.circular as boolean[]\n          ))\n    );\n  }\n}\n", "import {\n  getInsidePosition,\n  isCircularable,\n  getCirculatedPos,\n  getDuration,\n} from \"../Coordinate\";\nimport { Axis, AxisManager } from \"../AxisManager\";\nimport { InterruptManager } from \"../InterruptManager\";\nimport { EventManager, ChangeEventOption } from \"../EventManager\";\nimport {\n  requestAnimationFrame,\n  cancelAnimationFrame,\n  map,\n  every,\n  filter,\n  equal,\n  roundNumber,\n  getDecimalPlace,\n  inversePow,\n} from \"../utils\";\nimport { AxesOption } from \"../Axes\";\nimport {\n  AnimationParam,\n  ObjectInterface,\n  UpdateAnimationOption,\n} from \"../types\";\n\nexport interface AnimationState {\n  pos: Axis;\n  easingPer: number;\n  finished: boolean;\n}\n\nconst clamp = (value: number, min: number, max: number): number => {\n  return Math.max(Math.min(value, max), min);\n};\n\nexport abstract class AnimationManager {\n  public interruptManager: InterruptManager;\n  public eventManager: EventManager;\n  public axisManager: AxisManager;\n  protected _options: AxesOption;\n  protected _animateParam: AnimationParam;\n  private _raf: number;\n\n  public constructor({\n    options,\n    interruptManager,\n    eventManager,\n    axisManager,\n  }: {\n    options: AxesOption;\n    interruptManager: InterruptManager;\n    eventManager: EventManager;\n    axisManager: AxisManager;\n  }) {\n    this._options = options;\n    this.interruptManager = interruptManager;\n    this.eventManager = eventManager;\n    this.axisManager = axisManager;\n    this.animationEnd = this.animationEnd.bind(this);\n  }\n\n  public abstract interpolate(displacement: number, threshold: number): number;\n\n  public abstract updateAnimation(options: UpdateAnimationOption): void;\n\n  protected abstract _initState(info: AnimationParam): AnimationState;\n\n  protected abstract _getNextState(prevState: AnimationState): AnimationState;\n\n  public getDuration(\n    depaPos: Axis,\n    destPos: Axis,\n    wishDuration?: number\n  ): number {\n    let duration: number;\n    if (typeof wishDuration !== \"undefined\") {\n      duration = wishDuration;\n    } else {\n      const durations: Axis = map(destPos, (v, k) =>\n        getDuration(Math.abs(v - depaPos[k]), this._options.deceleration)\n      );\n      duration = Object.keys(durations).reduce(\n        (max, v) => Math.max(max, durations[v]),\n        -Infinity\n      );\n    }\n    return clamp(\n      duration,\n      this._options.minimumDuration,\n      this._options.maximumDuration\n    );\n  }\n\n  public getDisplacement(velocity: number[]): number[] {\n    const totalVelocity = Math.pow(\n      velocity.reduce((total, v) => total + v * v, 0),\n      1 / velocity.length\n    );\n    const duration = Math.abs(totalVelocity / -this._options.deceleration);\n    return velocity.map((v) => (v / 2) * duration);\n  }\n\n  public stopAnimation(option?: ChangeEventOption): void {\n    if (this._animateParam) {\n      const orgPos: Axis = this.axisManager.get();\n      const pos: Axis = this.axisManager.map(orgPos, (v, opt) =>\n        getCirculatedPos(v, opt.range, opt.circular as boolean[])\n      );\n      if (!every(pos, (v, k) => orgPos[k] === v)) {\n        this.eventManager.triggerChange(pos, orgPos, option, !!option);\n      }\n      this._animateParam = null;\n      if (this._raf) {\n        cancelAnimationFrame(this._raf);\n      }\n      this._raf = null;\n      this.eventManager.triggerAnimationEnd(!!option?.event);\n    }\n  }\n\n  public getEventInfo(): ChangeEventOption {\n    if (\n      this._animateParam &&\n      this._animateParam.input &&\n      this._animateParam.inputEvent\n    ) {\n      return {\n        input: this._animateParam.input,\n        event: this._animateParam.inputEvent,\n      };\n    } else {\n      return null;\n    }\n  }\n\n  public restore(option: ChangeEventOption): void {\n    const pos: Axis = this.axisManager.get();\n    const destPos: Axis = this.axisManager.map(pos, (v, opt) =>\n      Math.min(opt.range[1], Math.max(opt.range[0], v))\n    );\n    this.stopAnimation();\n    this.animateTo(destPos, this.getDuration(pos, destPos), option);\n  }\n\n  public animationEnd(): void {\n    const beforeParam: ChangeEventOption = this.getEventInfo();\n    this._animateParam = null;\n\n    // for Circular\n    const circularTargets = this.axisManager.filter(\n      this.axisManager.get(),\n      (v, opt) => isCircularable(v, opt.range, opt.circular as boolean[])\n    );\n    if (Object.keys(circularTargets).length > 0) {\n      this.setTo(\n        this.axisManager.map(circularTargets, (v, opt) =>\n          getCirculatedPos(v, opt.range, opt.circular as boolean[])\n        )\n      );\n    }\n    this.interruptManager.setInterrupt(false);\n    this.eventManager.triggerAnimationEnd(!!beforeParam);\n    if (this.axisManager.isOutside()) {\n      this.restore(beforeParam);\n    } else {\n      this.finish(!!beforeParam);\n    }\n  }\n\n  public finish(isTrusted: boolean): void {\n    this._animateParam = null;\n    this.interruptManager.setInterrupt(false);\n    this.eventManager.triggerFinish(isTrusted);\n  }\n\n  public getUserControl(param: AnimationParam): {\n    destPos: Axis;\n    duration: number;\n  } {\n    const userWish = param.setTo();\n    userWish.destPos = this.axisManager.get(userWish.destPos);\n    userWish.duration = clamp(\n      userWish.duration,\n      this._options.minimumDuration,\n      this._options.maximumDuration\n    );\n    return userWish;\n  }\n\n  public animateTo(\n    destPos: Axis,\n    duration: number,\n    option?: ChangeEventOption\n  ): void {\n    this.stopAnimation();\n    const param: AnimationParam = this._createAnimationParam(\n      destPos,\n      duration,\n      option\n    );\n    const depaPos = { ...param.depaPos };\n    const retTrigger = this.eventManager.triggerAnimationStart(param);\n\n    // to control\n    const userWish = this.getUserControl(param);\n\n    // You can't stop the 'animationStart' event when 'circular' is true.\n    if (\n      !retTrigger &&\n      this.axisManager.every(userWish.destPos, (v, opt) =>\n        isCircularable(v, opt.range, opt.circular as boolean[])\n      )\n    ) {\n      console.warn(\n        \"You can't stop the 'animation' event when 'circular' is true.\"\n      );\n    }\n\n    if (retTrigger && !equal(userWish.destPos, depaPos)) {\n      const inputEvent = option?.event || null;\n      this._animateLoop(\n        {\n          depaPos,\n          destPos: userWish.destPos,\n          duration: userWish.duration,\n          delta: this.axisManager.getDelta(depaPos, userWish.destPos),\n          isTrusted: !!inputEvent,\n          inputEvent,\n          input: option?.input || null,\n        },\n        () => this.animationEnd()\n      );\n    }\n  }\n\n  public setTo(pos: Axis, duration: number = 0) {\n    const axes: string[] = Object.keys(pos);\n    const orgPos: Axis = this.axisManager.get(axes);\n\n    if (equal(pos, orgPos)) {\n      return this;\n    }\n    this.interruptManager.setInterrupt(true);\n    let movedPos = filter(pos, (v, k) => orgPos[k] !== v);\n    if (!Object.keys(movedPos).length) {\n      return this;\n    }\n\n    movedPos = this.axisManager.map(movedPos, (v, opt) => {\n      const { range, circular } = opt;\n\n      if (circular && (circular[0] || circular[1])) {\n        return v;\n      } else {\n        return getInsidePosition(v, range, circular as boolean[]);\n      }\n    });\n\n    if (equal(movedPos, orgPos)) {\n      return this;\n    }\n\n    if (duration > 0) {\n      this.animateTo(movedPos, duration);\n    } else {\n      this.stopAnimation();\n      this.eventManager.triggerChange(movedPos);\n      this.finish(false);\n    }\n\n    return this;\n  }\n\n  public setBy(pos: Axis, duration = 0) {\n    return this.setTo(\n      map(this.axisManager.get(Object.keys(pos)), (v, k) => v + pos[k]),\n      duration\n    );\n  }\n\n  private _createAnimationParam(\n    pos: Axis,\n    duration: number,\n    option?: ChangeEventOption\n  ): AnimationParam {\n    const depaPos: Axis = this.axisManager.get();\n    const destPos: Axis = pos;\n    const inputEvent = option?.event || null;\n    return {\n      depaPos,\n      destPos,\n      duration: clamp(\n        duration,\n        this._options.minimumDuration,\n        this._options.maximumDuration\n      ),\n      delta: this.axisManager.getDelta(depaPos, destPos),\n      inputEvent,\n      input: option?.input || null,\n      isTrusted: !!inputEvent,\n      done: this.animationEnd,\n    };\n  }\n\n  private _animateLoop(param: AnimationParam, complete: () => void): void {\n    if (param.duration) {\n      this._animateParam = {\n        ...param,\n        startTime: new Date().getTime(),\n      };\n      const originalIntendedPos = map(param.destPos, (v) => v);\n      let state = this._initState(this._animateParam);\n\n      const loop = () => {\n        this._raf = null;\n        const animateParam = this._animateParam;\n        const nextState = this._getNextState(state);\n        const isCanceled = !this.eventManager.triggerChange(\n          nextState.pos,\n          state.pos\n        );\n\n        state = nextState;\n\n        if (nextState.finished) {\n          animateParam.destPos = this._getFinalPos(\n            animateParam.destPos,\n            originalIntendedPos\n          );\n          if (\n            !equal(\n              animateParam.destPos,\n              this.axisManager.get(Object.keys(animateParam.destPos))\n            )\n          ) {\n            this.eventManager.triggerChange(\n              animateParam.destPos,\n              nextState.pos\n            );\n          }\n          complete();\n          return;\n        } else if (isCanceled) {\n          this.finish(false);\n        } else {\n          this._raf = requestAnimationFrame(loop);\n        }\n      };\n      loop();\n    } else {\n      this.eventManager.triggerChange(param.destPos);\n      complete();\n    }\n  }\n\n  /**\n   * Get estimated final value.\n   *\n   * If destPos is within the 'error range' of the original intended position, the initial intended position is returned.\n   *   - eg. original intended pos: 100, destPos: 100.0000000004 ==> return 100;\n   * If dest Pos is outside the 'range of error' compared to the originally intended pos, it is returned rounded based on the originally intended pos.\n   *   - eg. original intended pos: 100.123 destPos: 50.12345 => return 50.123\n   * @param originalIntendedPos\n   * @param destPos\n   */\n  private _getFinalPos(\n    destPos: ObjectInterface<number>,\n    originalIntendedPos: ObjectInterface<number>\n  ): Axis {\n    // compare destPos and originalIntendedPos\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const ERROR_LIMIT = 0.000001;\n    const finalPos = map(destPos, (value, key) => {\n      if (\n        value >= originalIntendedPos[key] - ERROR_LIMIT &&\n        value <= originalIntendedPos[key] + ERROR_LIMIT\n      ) {\n        // In error range, return original intended\n        return originalIntendedPos[key];\n      } else {\n        // Out of error range, return rounded pos.\n        const roundUnit = this._getRoundUnit(value, key);\n        const result = roundNumber(value, roundUnit);\n        return result;\n      }\n    });\n    return finalPos;\n  }\n\n  private _getRoundUnit(val: number, key: string): number {\n    const roundUnit = this._options.round; // manual mode\n    let minRoundUnit = null; // auto mode\n\n    // auto mode\n    if (!roundUnit) {\n      // Get minimum round unit\n      const options = this.axisManager.getAxisOptions(key);\n      minRoundUnit = inversePow(\n        Math.max(\n          getDecimalPlace(options.range[0]),\n          getDecimalPlace(options.range[1]),\n          getDecimalPlace(val)\n        )\n      );\n    }\n\n    return minRoundUnit || roundUnit;\n  }\n}\n", "import { AxesOption } from \"../Axes\";\nimport { Axis } from \"../AxisManager\";\nimport { getCirculatedPos } from \"../Coordinate\";\nimport { AnimationParam, UpdateAnimationOption } from \"../types\";\nimport { map } from \"../utils\";\n\nimport { AnimationManager, AnimationState } from \"./AnimationManager\";\n\nexport class EasingManager extends AnimationManager {\n  protected _useDuration = true;\n  protected _options: AxesOption;\n  private _durationOffset: number;\n  private _initialEasingPer: number;\n  private _prevEasingPer: number;\n\n  public interpolate(displacement: number, threshold: number): number {\n    const initSlope = this._easing(0.00001) / 0.00001;\n    return this._easing(displacement / (threshold * initSlope)) * threshold;\n  }\n\n  public updateAnimation(options: UpdateAnimationOption): void {\n    const animateParam = this._animateParam;\n    if (!animateParam) {\n      return;\n    }\n\n    const diffTime = new Date().getTime() - animateParam.startTime;\n    const pos = options?.destPos || animateParam.destPos;\n    const duration = options?.duration ?? animateParam.duration;\n    if (options?.restart || duration <= diffTime) {\n      this.setTo(pos, duration - diffTime);\n      return;\n    }\n    if (options?.destPos) {\n      const currentPos = this.axisManager.get();\n      // When destination is changed, new delta should be calculated as remaining percent.\n      // For example, moving x:0, y:0 to x:200, y:200 and it has current easing percent of 92%. coordinate is x:184 and y:184\n      // If destination changes to x:300, y:300. xdelta:200, ydelta:200 changes to xdelta:116, ydelta:116 and use remaining easingPer as 100%, not 8% as previous.\n      // Therefore, original easingPer by time is kept. And divided by (1 - self._initialEasingPer) which means new total easing percent. Like calculating 8% as 100%.\n      this._initialEasingPer = this._prevEasingPer;\n      animateParam.delta = this.axisManager.getDelta(currentPos, pos);\n      animateParam.destPos = pos;\n    }\n    if (options?.duration) {\n      const ratio = (diffTime + this._durationOffset) / animateParam.duration;\n      // Use durationOffset for keeping animation ratio after duration is changed.\n      // newRatio = (diffTime + newDurationOffset) / newDuration = oldRatio\n      // newDurationOffset = oldRatio * newDuration - diffTime\n      this._durationOffset = ratio * duration - diffTime;\n      animateParam.duration = duration;\n    }\n  }\n\n  protected _initState(info: AnimationParam): AnimationState {\n    this._initialEasingPer = 0;\n    this._prevEasingPer = 0;\n    this._durationOffset = 0;\n    return {\n      pos: info.depaPos,\n      easingPer: 0,\n      finished: false,\n    };\n  }\n\n  protected _getNextState(prevState: AnimationState): AnimationState {\n    const animateParam = this._animateParam;\n    const prevPos = prevState.pos;\n    const destPos = animateParam.destPos;\n    const directions = map(prevPos, (value, key) => {\n      return value <= destPos[key] ? 1 : -1;\n    });\n    const diffTime = new Date().getTime() - animateParam.startTime;\n    const ratio = (diffTime + this._durationOffset) / animateParam.duration;\n    const easingPer = this._easing(ratio);\n\n    const toPos: Axis = this.axisManager.map(prevPos, (pos, options, key) => {\n      const nextPos =\n        ratio >= 1\n          ? destPos[key]\n          : pos +\n            (animateParam.delta[key] * (easingPer - this._prevEasingPer)) /\n              (1 - this._initialEasingPer);\n\n      // Subtract distance from distance already moved.\n      // Recalculate the remaining distance.\n      // Fix the bouncing phenomenon by changing the range.\n      const circulatedPos = getCirculatedPos(\n        nextPos,\n        options.range,\n        options.circular as boolean[]\n      );\n      if (nextPos !== circulatedPos) {\n        // circular\n        const rangeOffset =\n          directions[key] * (options.range[1] - options.range[0]);\n\n        destPos[key] -= rangeOffset;\n        prevPos[key] -= rangeOffset;\n      }\n      return circulatedPos;\n    });\n    this._prevEasingPer = easingPer;\n    return {\n      pos: toPos,\n      easingPer,\n      finished: easingPer >= 1,\n    };\n  }\n\n  private _easing(p: number): number {\n    return p > 1 ? 1 : this._options.easing(p);\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport { ReactiveSubscribe } from \"@cfcs/core\";\n\nimport { EventManager } from \"./EventManager\";\nimport { InterruptManager } from \"./InterruptManager\";\nimport { AxisManager, AxisOption, Axis } from \"./AxisManager\";\nimport { InputObserver } from \"./InputObserver\";\nimport {\n  TRANSFORM,\n  DIRECTION_NONE,\n  DIRECTION_LEFT,\n  DIRECTION_RIGHT,\n  DIRECTION_UP,\n  DIRECTION_DOWN,\n  DIRECTION_HORIZONTAL,\n  DIRECTION_VERTICAL,\n  DIRECTION_ALL,\n} from \"./const\";\nimport { InputType } from \"./inputType/InputType\";\nimport {\n  AxesEvents,\n  AxesReactiveState,\n  ObjectInterface,\n  UpdateAnimationOption,\n} from \"./types\";\nimport { EasingManager } from \"./animation/EasingManager\";\nimport { AnimationManager } from \"./animation/AnimationManager\";\n\nexport interface AxesOption {\n  easing?: (x: number) => number;\n  maximumDuration?: number;\n  minimumDuration?: number;\n  deceleration?: number;\n  interruptable?: boolean;\n  round?: number;\n  nested?: boolean;\n}\n\n/**\n * @typedef {Object} AxisOption The Axis information. The key of the axis specifies the name to use as the logical virtual coordinate system.\n * @ko 축 정보. 축의 키는 논리적인 가상 좌표계로 사용할 이름을 지정한다.\n * @param {Number[]} [range] The range of coordinate <ko>좌표 범위</ko>\n * @param {Number} [range[0]=0] The coordinate of the minimum <ko>최소 좌표</ko>\n * @param {Number} [range[1]=0] The coordinate of the maximum <ko>최대 좌표</ko>\n * @param {Number} [startPos=range[0]] The coordinates to be moved when creating an instance <ko>인스턴스 생성시 이동할 좌표</ko>\n * @param {Number[]} [bounce] The size of bouncing area. The coordinates can exceed the coordinate area as much as the bouncing area based on user action. If the coordinates does not exceed the bouncing area when an element is dragged, the coordinates where bouncing effects are applied are retuned back into the coordinate area<ko>바운스 영역의 크기. 사용자의 동작에 따라 좌표가 좌표 영역을 넘어 바운스 영역의 크기만큼 더 이동할 수 있다. 사용자가 끌어다 놓는 동작을 했을 때 좌표가 바운스 영역에 있으면, 바운스 효과가 적용된 좌표가 다시 좌표 영역 안으로 들어온다</ko>\n * @param {Number} [bounce[0]=0] The size of coordinate of the minimum area <ko>최소 좌표 바운스 영역의 크기</ko>\n * @param {Number} [bounce[1]=0] The size of coordinate of the maximum area <ko>최대 좌표 바운스 영역의 크기</ko>\n * @param {Boolean[]} [circular] Indicates whether a circular element is available. If it is set to \"true\" and an element is dragged outside the coordinate area, the element will appear on the other side.<ko>순환 여부. 'true'로 설정한 방향의 좌표 영역 밖으로 엘리먼트가 이동하면 반대 방향에서 엘리먼트가 나타난다</ko>\n * @param {Boolean} [circular[0]=false] Indicates whether to circulate to the coordinate of the minimum <ko>최소 좌표 방향의 순환 여부</ko>\n * @param {Boolean} [circular[1]=false] Indicates whether to circulate to the coordinate of the maximum <ko>최대 좌표 방향의 순환 여부</ko>\n **/\n\n/**\n * @typedef {Object} AxesOption The option object of the eg.Axes module\n * @ko eg.Axes 모듈의 옵션 객체\n * @param {Function} [easing=easing.easeOutCubic] The easing function to apply to an animation <ko>애니메이션에 적용할 easing 함수</ko>\n * @param {Number} [maximumDuration=Infinity] Maximum duration of the animation <ko>가속도에 의해 애니메이션이 동작할 때의 최대 좌표 이동 시간</ko>\n * @param {Number} [minimumDuration=0] Minimum duration of the animation <ko>가속도에 의해 애니메이션이 동작할 때의 최소 좌표 이동 시간</ko>\n * @param {Number} [deceleration=0.0006] Deceleration of the animation where acceleration is manually enabled by user. A higher value indicates shorter running time. <ko>사용자의 동작으로 가속도가 적용된 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다</ko>\n * @param {Boolean} [interruptable=true] Indicates whether an animation is interruptible.\n * - true: It can be paused or stopped by user action or the API.\n * - false: It cannot be paused or stopped by user action or the API while it is running.\n * <ko>진행 중인 애니메이션 중지 가능 여부.\n * - true: 사용자의 동작이나 API로 애니메이션을 중지할 수 있다.\n * - false: 애니메이션이 진행 중일 때는 사용자의 동작이나 API가 적용되지 않는다</ko>\n * @param {Number} [round=null] Rounding unit. For example, 0.1 rounds to 0.1 decimal point(6.1234 => 6.1), 5 rounds to 5 (93 => 95)\n * [Details](https://github.com/naver/egjs-axes/wiki/round-option)<ko>반올림 단위. 예를 들어 0.1 은 소숫점 0.1 까지 반올림(6.1234 => 6.1), 5 는 5 단위로 반올림(93 => 95).\n * [상세내용](https://github.com/naver/egjs-axes/wiki/round-option)</ko>\n * @param {Boolean} [nested=false] Whether the event propagates to other instances when the coordinates reach the end of the movable area <ko>좌표가 이동 가능한 영역의 끝까지 도달했을 때 다른 인스턴스들로의 이벤트 전파 여부</ko>\n **/\n\n/**\n * A module used to change the information of user action entered by various input devices such as touch screen or mouse into the logical virtual coordinates. You can easily create a UI that responds to user actions.\n * @ko 터치 입력 장치나 마우스와 같은 다양한 입력 장치를 통해 전달 받은 사용자의 동작을 논리적인 가상 좌표로 변경하는 모듈이다. 사용자 동작에 반응하는 UI를 손쉽게 만들수 있다.\n * @extends eg.Component\n *\n * @param {Object.<string, AxisOption>} axis Axis information managed by eg.Axes. The key of the axis specifies the name to use as the logical virtual coordinate system.  <ko>eg.Axes가 관리하는 축 정보. 축의 키는 논리적인 가상 좌표계로 사용할 이름을 지정한다.</ko>\n * @param {AxesOption} [options={}] The option object of the eg.Axes module<ko>eg.Axes 모듈의 옵션 객체</ko>\n * @param {Object.<string, number>} [startPos={}] The coordinates to be moved when creating an instance. It is applied with higher priority than startPos of axisOption.<ko>인스턴스 생성시 이동할 좌표, axisOption의 startPos보다 높은 우선순위로 적용된다.</ko>\n *\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n * @example\n * ```js\n * // 1. Initialize eg.Axes\n * const axes = new eg.Axes({\n *  something1: {\n *    range: [0, 150],\n *    bounce: 50\n *  },\n *  something2: {\n *    range: [0, 200],\n *    bounce: 100\n *  },\n *  somethingN: {\n *    range: [1, 10],\n *  }\n * }, {\n *  deceleration : 0.0024\n * });\n *\n * // 2. attach event handler\n * axes.on({\n *  \"hold\" : function(evt) {\n *  },\n *  \"release\" : function(evt) {\n *  },\n *  \"animationStart\" : function(evt) {\n *  },\n *  \"animationEnd\" : function(evt) {\n *  },\n *  \"change\" : function(evt) {\n *  }\n * });\n *\n * // 3. Initialize inputTypes\n * const panInputArea = new eg.Axes.PanInput(\"#area\", {\n *  scale: [0.5, 1]\n * });\n * const panInputHmove = new eg.Axes.PanInput(\"#hmove\");\n * const panInputVmove = new eg.Axes.PanInput(\"#vmove\");\n * const pinchInputArea = new eg.Axes.PinchInput(\"#area\", {\n *  scale: 1.5\n * });\n *\n * // 4. Connect eg.Axes and InputTypes\n * // [PanInput] When the mouse or touchscreen is down and moved.\n * // Connect the 'something2' axis to the mouse or touchscreen x position and\n * // connect the 'somethingN' axis to the mouse or touchscreen y position.\n * axes.connect([\"something2\", \"somethingN\"], panInputArea); // or axes.connect(\"something2 somethingN\", panInputArea);\n *\n * // Connect only one 'something1' axis to the mouse or touchscreen x position.\n * axes.connect([\"something1\"], panInputHmove); // or axes.connect(\"something1\", panInputHmove);\n *\n * // Connect only one 'something2' axis to the mouse or touchscreen y position.\n * axes.connect([\"\", \"something2\"], panInputVmove); // or axes.connect(\" something2\", panInputVmove);\n *\n * // [PinchInput] Connect 'something2' axis when two pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * axes.connect(\"something2\", pinchInputArea);\n * ```\n */\n@ReactiveSubscribe\nclass Axes extends Component<AxesEvents> {\n  /**\n   * @name VERSION\n   * @desc Version info string\n   * @ko 버전정보 문자열\n   *\n   * @constant\n   * @type {String}\n   * @example\n   * ```js\n   * eg.Axes.VERSION;  // ex) 3.3.3\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n  /* eslint-disable */\n  // for tree shaking\n  public static PanInput;\n  public static PinchInput;\n  public static WheelInput;\n  public static MoveKeyInput;\n  public static RotatePanInput;\n  /* eslint-enable */\n\n  /**\n   * @name TRANSFORM\n   * @desc Returns the transform attribute with CSS vendor prefixes.\n   * @ko CSS vendor prefixes를 붙인 transform 속성을 반환한다.\n   *\n   * @constant\n   * @type {String}\n   * @example\n   * ```js\n   * eg.Axes.TRANSFORM; // \"transform\" or \"webkitTransform\"\n   * ```\n   */\n  public static TRANSFORM = TRANSFORM;\n  /**\n   * @name DIRECTION_NONE\n   * @constant\n   * @type {Number}\n   */\n  public static DIRECTION_NONE = DIRECTION_NONE;\n  /**\n   * @name DIRECTION_LEFT\n   * @constant\n   * @type {Number}\n   */\n  public static DIRECTION_LEFT = DIRECTION_LEFT;\n  /**\n   * @name DIRECTION_RIGHT\n   * @constant\n   * @type {Number}\n   */\n  public static DIRECTION_RIGHT = DIRECTION_RIGHT;\n  /**\n   * @name DIRECTION_UP\n   * @constant\n   * @type {Number}\n   */\n  public static DIRECTION_UP = DIRECTION_UP;\n  /**\n   * @name DIRECTION_DOWN\n   * @constant\n   * @type {Number}\n   */\n  public static DIRECTION_DOWN = DIRECTION_DOWN;\n  /**\n   * @name DIRECTION_HORIZONTAL\n   * @constant\n   * @type {Number}\n   */\n  public static DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n  /**\n   * @name DIRECTION_VERTICAL\n   * @constant\n   * @type {Number}\n   */\n  public static DIRECTION_VERTICAL = DIRECTION_VERTICAL;\n  /**\n   * @name DIRECTION_ALL\n   * @constant\n   * @type {Number}\n   */\n  public static DIRECTION_ALL = DIRECTION_ALL;\n\n  public options: AxesOption;\n  public eventManager: EventManager;\n  public axisManager: AxisManager;\n  public interruptManager: InterruptManager;\n  public animationManager: AnimationManager;\n  public inputObserver: InputObserver;\n  private _inputs: InputType[] = [];\n\n  /**\n   *\n   */\n  public constructor(\n    public axis: ObjectInterface<AxisOption> = {},\n    options: AxesOption = {},\n    startPos: Axis = {}\n  ) {\n    super();\n    this.options = {\n      ...{\n        easing: (x) => {\n          return 1 - Math.pow(1 - x, 3);\n        },\n        interruptable: true,\n        maximumDuration: Infinity,\n        minimumDuration: 0,\n        deceleration: 0.0006,\n        round: null,\n        nested: false,\n      },\n      ...options,\n    };\n    Object.keys(startPos).forEach((key) => {\n      this.axis[key].startPos = startPos[key];\n    });\n\n    this.interruptManager = new InterruptManager(this.options);\n    this.axisManager = new AxisManager(this.axis);\n    this.eventManager = new EventManager(this);\n    this.animationManager = new EasingManager(this);\n    this.inputObserver = new InputObserver(this);\n    this.eventManager.setAnimationManager(this.animationManager);\n    this.eventManager.triggerChange(this.axisManager.get());\n  }\n\n  /**\n   * Connect the axis of eg.Axes to the inputType.\n   * @ko eg.Axes의 축과 inputType을 연결한다\n   * @param {(String[]|String)} axes The name of the axis to associate with inputType <ko>inputType과 연결할 축의 이름</ko>\n   * @param {Object} inputType The inputType instance to associate with the axis of eg.Axes <ko>eg.Axes의 축과 연결할 inputType 인스턴스</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   }\n   * });\n   *\n   * axes.connect(\"x\", new eg.Axes.PanInput(\"#area1\"))\n   *    .connect(\"x xOther\", new eg.Axes.PanInput(\"#area2\"))\n   *    .connect(\" xOther\", new eg.Axes.PanInput(\"#area3\"))\n   *    .connect([\"x\"], new eg.Axes.PanInput(\"#area4\"))\n   *    .connect([\"xOther\", \"x\"], new eg.Axes.PanInput(\"#area5\"))\n   *    .connect([\"\", \"xOther\"], new eg.Axes.PanInput(\"#area6\"));\n   * ```\n   */\n  public connect(axes: string[] | string, inputType: InputType) {\n    let mapped: string[];\n    if (typeof axes === \"string\") {\n      mapped = axes.split(\" \");\n    } else {\n      mapped = axes.concat();\n    }\n\n    // check same instance\n    if (~this._inputs.indexOf(inputType)) {\n      this.disconnect(inputType);\n    }\n\n    inputType.mapAxes(mapped);\n    inputType.connect(this.inputObserver);\n    this._inputs.push(inputType);\n    return this;\n  }\n\n  /**\n   * Disconnect the axis of eg.Axes from the inputType.\n   * @ko eg.Axes의 축과 inputType의 연결을 끊는다.\n   * @param {Object} [inputType] An inputType instance associated with the axis of eg.Axes <ko>eg.Axes의 축과 연결한 inputType 인스턴스</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   }\n   * });\n   *\n   * const input1 = new eg.Axes.PanInput(\"#area1\");\n   * const input2 = new eg.Axes.PanInput(\"#area2\");\n   * const input3 = new eg.Axes.PanInput(\"#area3\");\n   *\n   * axes.connect(\"x\", input1);\n   *    .connect(\"x xOther\", input2)\n   *    .connect([\"xOther\", \"x\"], input3);\n   *\n   * axes.disconnect(input1); // disconnects input1\n   * axes.disconnect(); // disconnects all of them\n   * ```\n   */\n  public disconnect(inputType?: InputType) {\n    if (inputType) {\n      const index = this._inputs.indexOf(inputType);\n\n      if (index >= 0) {\n        this._inputs[index].disconnect();\n        this._inputs.splice(index, 1);\n      }\n    } else {\n      this._inputs.forEach((v) => v.disconnect());\n      this._inputs = [];\n    }\n    return this;\n  }\n\n  /**\n   * Returns the current position of the coordinates.\n   * @ko 좌표의 현재 위치를 반환한다\n   * @param {Object} [axes] The names of the axis <ko>축 이름들</ko>\n   * @return {Object.<string, number>} Axis coordinate information <ko>축 좌표 정보</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   },\n   *    \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * });\n   *\n   * axes.get(); // {\"x\": 0, \"xOther\": -100, \"zoom\": 50}\n   * axes.get([\"x\", \"zoom\"]); // {\"x\": 0, \"zoom\": 50}\n   * ```\n   */\n  public get(axes?: string[]) {\n    return this.axisManager.get(axes);\n  }\n\n  /**\n   * Moves an axis to specific coordinates.\n   * @ko 좌표를 이동한다.\n   * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @param {Number} [duration=0] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   },\n   *    \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * });\n   *\n   * axes.setTo({\"x\": 30, \"zoom\": 60});\n   * axes.get(); // {\"x\": 30, \"xOther\": -100, \"zoom\": 60}\n   *\n   * axes.setTo({\"x\": 100, \"xOther\": 60}, 1000); // animatation\n   *\n   * // after 1000 ms\n   * axes.get(); // {\"x\": 100, \"xOther\": 60, \"zoom\": 60}\n   * ```\n   */\n  public setTo(pos: Axis, duration = 0) {\n    this.animationManager.setTo(pos, duration);\n    return this;\n  }\n\n  /**\n   * Moves an axis from the current coordinates to specific coordinates.\n   * @ko 현재 좌표를 기준으로 좌표를 이동한다.\n   * @param {Object.<string, number>} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @param {Number} [duration=0] Duration of the animation (unit: ms) <ko>애니메이션 진행 시간(단위: ms)</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   },\n   *    \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * });\n   *\n   * axes.setBy({\"x\": 30, \"zoom\": 10});\n   * axes.get(); // {\"x\": 30, \"xOther\": -100, \"zoom\": 60}\n   *\n   * axes.setBy({\"x\": 70, \"xOther\": 60}, 1000); // animatation\n   *\n   * // after 1000 ms\n   * axes.get(); // {\"x\": 100, \"xOther\": -40, \"zoom\": 60}\n   * ```\n   */\n  public setBy(pos: Axis, duration = 0) {\n    this.animationManager.setBy(pos, duration);\n    return this;\n  }\n\n  /**\n   * Change the options of Axes instance.\n   * @ko 인스턴스의 옵션을 변경한다.\n   * @param {AxesOption} options Axes options to change <ko>변경할 옵션 목록</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   * }, {\n   *   round: 10,\n   * });\n   *\n   * axes.setTo({\"x\": 48});\n   * axes.get(); // {\"x\": 50}\n   *\n   * axes.setOptions({\n   *   round: 1,\n   * });\n   *\n   * axes.setTo({\"x\": 48});\n   * axes.get(); // {\"x\": 48}\n   * ```\n   */\n  public setOptions(options: AxesOption) {\n      this.options = {\n      ...this.options,\n      ...options,\n    };\n    return this;\n  }\n\n  /**\n   * Change the information of an existing axis.\n   * @ko 존재하는 축의 정보를 변경한다.\n   * @param {Object.<string, AxisOption>} axis Axis options to change <ko>변경할 축의 정보</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   * });\n   *\n   * axes.setTo({\"x\": 150});\n   * axes.get(); // {\"x\": 100}\n   *\n   * axes.setAxis({\n   *   \"x\": {\n   *      range: [0, 200]\n   *   },\n   * });\n   *\n   * axes.setTo({\"x\": 150});\n   * axes.get(); // {\"x\": 150}\n   * ```\n   */\n  public setAxis(axis: ObjectInterface<AxisOption>) {\n    this.axisManager.setAxis(axis);\n    return this;\n  }\n\n  /**\n   * Stop an animation in progress.\n   * @ko 재생 중인 애니메이션을 정지한다.\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   * });\n   *\n   * axes.setTo({\"x\": 10}, 1000); // start animatation\n   *\n   * // after 500 ms\n   * axes.stopAnimation(); // stop animation during movement.\n   * ```\n   */\n  public stopAnimation() {\n    this.animationManager.stopAnimation();\n    this.animationManager.finish(false);\n    return this;\n  }\n\n  /**\n   * Change the destination of an animation in progress.\n   * @ko 재생 중인 애니메이션의 목적지와 진행 시간을 변경한다.\n   * @param {UpdateAnimationOption} pos The coordinate to move to <ko>이동할 좌표</ko>\n   * @return {eg.Axes} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 200]\n   *   },\n   *   \"y\": {\n   *      range: [0, 200]\n   *   }\n   * });\n   *\n   * axes.setTo({\"x\": 50, \"y\": 50}, 1000); // trigger animation by setTo\n   *\n   * // after 500 ms\n   * axes.updateAnimation({destPos: {\"x\": 100, \"y\": 100}}); // animation will end after 500 ms, at {\"x\": 100, \"y\": 100}\n   *\n   * // after 500 ms\n   * axes.setTo({\"x\": 50, \"y\": 50}, 1000); // trigger animation by setTo\n   *\n   * // after 700 ms\n   * axes.updateAnimation({destPos: {\"x\": 100, \"y\": 100}, duration: 1500, restart: true}); // this works same as axes.setTo({\"x\": 100, \"y\": 100}, 800) since restart is true.\n   * ```\n   */\n  public updateAnimation(options: UpdateAnimationOption) {\n    this.animationManager.updateAnimation(options);\n    return this;\n  }\n\n  /**\n   * Returns whether there is a coordinate in the bounce area of ​​the target axis.\n   * @ko 대상 축 중 bounce영역에 좌표가 존재하는지를 반환한다\n   * @param {Object} [axes] The names of the axis <ko>축 이름들</ko>\n   * @return {Boolen} Whether the bounce area exists. <ko>bounce 영역 존재 여부</ko>\n   * @example\n   * ```js\n   * const axes = new eg.Axes({\n   *   \"x\": {\n   *      range: [0, 100]\n   *   },\n   *   \"xOther\": {\n   *      range: [-100, 100]\n   *   },\n   *    \"zoom\": {\n   *      range: [50, 30]\n   *   }\n   * });\n   *\n   * axes.isBounceArea([\"x\"]);\n   * axes.isBounceArea([\"x\", \"zoom\"]);\n   * axes.isBounceArea();\n   * ```\n   */\n  public isBounceArea(axes?: string[]) {\n    return this.axisManager.isOutside(axes);\n  }\n\n  /**\n   * Destroys properties, and events used in a module and disconnect all connections to inputTypes.\n   * @ko 모듈에 사용한 속성, 이벤트를 해제한다. 모든 inputType과의 연결을 끊는다.\n   */\n  public destroy() {\n    this.disconnect();\n    this.eventManager.destroy();\n  }\n}\n\ninterface Axes\n  extends AxesReactiveState,\n    ReactiveSubscribe<AxesReactiveState> {}\n\nexport default Axes;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-empty-function */\n\nimport {\n  $,\n  isCssPropsFromAxes,\n  setCssProps,\n  revertCssProps,\n  useDirection,\n  getDirection,\n} from \"../utils\";\nimport {\n  IS_IOS_SAFARI,\n  IOS_EDGE_THRESHOLD,\n  DIRECTION_NONE,\n  DIRECTION_VERTICAL,\n  DIRECTION_HORIZONTAL,\n  MOUSE_LEFT,\n  ANY,\n} from \"../const\";\nimport { ActiveEvent, ElementType, InputEventType } from \"../types\";\n\nimport {\n  convertInputType,\n  getAddEventOptions,\n  InputType,\n  InputTypeObserver,\n  toAxis,\n} from \"./InputType\";\n\nexport interface PanInputOption {\n  inputType?: string[];\n  inputKey?: string[];\n  inputButton?: string[];\n  scale?: number[];\n  thresholdAngle?: number;\n  threshold?: number;\n  preventClickOnDrag?: boolean;\n  iOSEdgeSwipeThreshold?: number;\n  releaseOnScroll?: boolean;\n  touchAction?: string;\n}\n\n// get user's direction\nexport const getDirectionByAngle = (\n  angle: number,\n  thresholdAngle: number\n): number => {\n  if (thresholdAngle < 0 || thresholdAngle > 90) {\n    return DIRECTION_NONE;\n  }\n  const toAngle = Math.abs(angle);\n\n  return toAngle > thresholdAngle && toAngle < 180 - thresholdAngle\n    ? DIRECTION_VERTICAL\n    : DIRECTION_HORIZONTAL;\n};\n\n/**\n * @typedef {Object} PanInputOption The option object of the eg.Axes.PanInput module.\n * @ko eg.Axes.PanInput 모듈의 옵션 객체\n * @param {String[]} [inputType=[\"touch\", \"mouse\", \"pointer\"]] Types of input devices\n * - touch: Touch screen\n * - mouse: Mouse\n * - pointer: Mouse and touch <ko>입력 장치 종류\n * - touch: 터치 입력 장치\n * - mouse: 마우스\n * - pointer: 마우스 및 터치</ko>\n * @param {String[]} [inputKey=[\"any\"]] List of key combinations to allow input\n * - any: any key\n * - shift: shift key\n * - ctrl: ctrl key and pinch gesture on the trackpad\n * - alt: alt key\n * - meta: meta key\n * - none: none of these keys are pressed <ko>입력을 허용할 키 조합 목록\n * - any: 아무 키\n * - shift: shift 키\n * - ctrl: ctrl 키 및 트랙패드의 pinch 제스쳐\n * - alt: alt 키\n * - meta: meta 키\n * - none: 아무 키도 눌리지 않은 상태 </ko>\n * @param {String[]} [inputButton=[\"left\"]] List of buttons to allow input\n * - left: Left mouse button and normal touch\n * - middle: Mouse wheel press\n * - right: Right mouse button <ko>입력을 허용할 버튼 목록\n * - left: 마우스 왼쪽 버튼\n * - middle: 마우스 휠 눌림\n * - right: 마우스 오른쪽 버튼 </ko>\n * @param {Number[]} [scale] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @param {Number} [scale[0]=1] horizontal axis scale <ko>수평축 배율</ko>\n * @param {Number} [scale[1]=1] vertical axis scale <ko>수직축 배율</ko>\n * @param {Number} [thresholdAngle=45] The threshold value that determines whether user action is horizontal or vertical (0~90) <ko>사용자의 동작이 가로 방향인지 세로 방향인지 판단하는 기준 각도(0~90)</ko>\n * @param {Number} [threshold=0] Minimal pan distance required before recognizing <ko>사용자의 Pan 동작을 인식하기 위해산 최소한의 거리</ko>\n * @param {Boolean} [preventClickOnDrag=false] Whether to cancel the {@link https://developer.mozilla.org/en/docs/Web/API/Element/click_event click} event when the user finishes dragging more than 1 pixel <ko>사용자가 1픽셀 이상 드래그를 마쳤을 때 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트 취소 여부</ko>\n * @param {Number} [iOSEdgeSwipeThreshold=30] Area (px) that can go to the next page when swiping the right edge in iOS safari <ko>iOS Safari에서 오른쪽 엣지를 스와이프 하는 경우 다음 페이지로 넘어갈 수 있는 영역(px)</ko>\n * @param {String} [touchAction=null] Value that overrides the element's \"touch-action\" css property. If set to null, it is automatically set to prevent scrolling in the direction of the connected axis. <ko>엘리먼트의 \"touch-action\" CSS 속성을 덮어쓰는 값. 만약 null로 설정된 경우, 연결된 축 방향으로의 스크롤을 방지하게끔 자동으로 설정된다.</ko>\n **/\n/**\n * A module that passes the amount of change to eg.Axes when the mouse or touchscreen is down and moved. use less than two axes.\n * @ko 마우스나 터치 스크린을 누르고 움직일때의 변화량을 eg.Axes에 전달하는 모듈. 두개 이하의 축을 사용한다.\n *\n * @example\n * ```js\n * const pan = new eg.Axes.PanInput(\"#area\", {\n *     inputType: [\"touch\"],\n *     scale: [1, 1.3],\n * });\n *\n * // Connect the 'something2' axis to the mouse or touchscreen x position when the mouse or touchscreen is down and moved.\n * // Connect the 'somethingN' axis to the mouse or touchscreen y position when the mouse or touchscreen is down and moved.\n * axes.connect([\"something2\", \"somethingN\"], pan); // or axes.connect(\"something2 somethingN\", pan);\n *\n * // Connect only one 'something1' axis to the mouse or touchscreen x position when the mouse or touchscreen is down and moved.\n * axes.connect([\"something1\"], pan); // or axes.connect(\"something1\", pan);\n *\n * // Connect only one 'something2' axis to the mouse or touchscreen y position when the mouse or touchscreen is down and moved.\n * axes.connect([\"\", \"something2\"], pan); // or axes.connect(\" something2\", pan);\n * ```\n * @param {String|HTMLElement|Ref<HTMLElement>|jQuery} element An element to use the eg.Axes.PanInput module <ko>eg.Axes.PanInput 모듈을 사용할 엘리먼트</ko>\n * @param {PanInputOption} [options={}] The option object of the eg.Axes.PanInput module<ko>eg.Axes.PanInput 모듈의 옵션 객체</ko>\n */\nexport class PanInput implements InputType {\n  public options: PanInputOption;\n  public axes: string[] = [];\n  public element: HTMLElement = null;\n  protected _observer: InputTypeObserver;\n  protected _direction: number;\n  protected _enabled = false;\n  protected _activeEvent: ActiveEvent = null;\n  private _originalCssProps: { [key: string]: string };\n  private _atRightEdge = false;\n  private _rightEdgeTimer = 0;\n  private _dragged = false;\n  private _isOverThreshold = false;\n\n  /**\n   *\n   */\n  public constructor(el: ElementType, options?: PanInputOption) {\n    this.element = $(el);\n    this.options = {\n      inputType: [\"touch\", \"mouse\", \"pointer\"],\n      inputKey: [ANY],\n      inputButton: [MOUSE_LEFT],\n      scale: [1, 1],\n      thresholdAngle: 45,\n      threshold: 0,\n      preventClickOnDrag: false,\n      iOSEdgeSwipeThreshold: IOS_EDGE_THRESHOLD,\n      releaseOnScroll: false,\n      touchAction: null,\n      ...options,\n    };\n    this._onPanstart = this._onPanstart.bind(this);\n    this._onPanmove = this._onPanmove.bind(this);\n    this._onPanend = this._onPanend.bind(this);\n  }\n\n  public mapAxes(axes: string[]) {\n    this._direction = getDirection(!!axes[0], !!axes[1]);\n    this.axes = axes;\n  }\n\n  public connect(observer: InputTypeObserver): InputType {\n    if (this._activeEvent) {\n      this._detachElementEvent();\n      this._detachWindowEvent(this._activeEvent);\n    }\n    this._attachElementEvent(observer);\n    this._originalCssProps = setCssProps(\n      this.element,\n      this.options,\n      this._direction\n    );\n    return this;\n  }\n\n  public disconnect() {\n    this._detachElementEvent();\n    this._detachWindowEvent(this._activeEvent);\n    if (!isCssPropsFromAxes(this._originalCssProps)) {\n      revertCssProps(this.element, this._originalCssProps);\n    }\n    this._direction = DIRECTION_NONE;\n    return this;\n  }\n\n  /**\n   * Destroys elements, properties, and events used in a module.\n   * @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n   */\n  public destroy() {\n    this.disconnect();\n    this.element = null;\n  }\n\n  /**\n   * Enables input devices\n   * @ko 입력 장치를 사용할 수 있게 한다\n   * @return {PanInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public enable() {\n    this._enabled = true;\n    return this;\n  }\n\n  /**\n   * Disables input devices\n   * @ko 입력 장치를 사용할 수 없게 한다.\n   * @return {PanInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public disable() {\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Returns whether to use an input device\n   * @ko 입력 장치 사용 여부를 반환한다.\n   * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n   */\n  public isEnabled() {\n    return this._enabled;\n  }\n\n  /**\n   * Releases current user input.\n   * @ko 사용자의 입력을 강제로 중단시킨다.\n   * @return {PanInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public release() {\n    const activeEvent = this._activeEvent;\n    const prevEvent = activeEvent.prevEvent;\n    activeEvent.onRelease();\n    this._observer.release(this, prevEvent, [0, 0]);\n    this._detachWindowEvent(activeEvent);\n    return this;\n  }\n\n  protected _onPanstart(event: InputEventType) {\n    const { inputKey, inputButton } = this.options;\n    const activeEvent = this._activeEvent;\n    const panEvent = activeEvent.onEventStart(event, inputKey, inputButton);\n    if (\n      !panEvent ||\n      !this._enabled ||\n      activeEvent.getTouches(event, inputButton) > 1\n    ) {\n      return;\n    }\n    if (panEvent.srcEvent.cancelable !== false) {\n      const edgeThreshold = this.options.iOSEdgeSwipeThreshold;\n\n      this._dragged = false;\n      this._isOverThreshold = false;\n      this._observer.hold(this, panEvent);\n      this._atRightEdge =\n        IS_IOS_SAFARI && panEvent.center.x > window.innerWidth - edgeThreshold;\n      this._attachWindowEvent(activeEvent);\n      activeEvent.prevEvent = panEvent;\n    }\n  }\n\n  protected _onPanmove(event: InputEventType) {\n    const {\n      iOSEdgeSwipeThreshold,\n      preventClickOnDrag,\n      releaseOnScroll,\n      inputKey,\n      inputButton,\n      threshold,\n      thresholdAngle,\n    } = this.options;\n    const activeEvent = this._activeEvent;\n    const panEvent = activeEvent.onEventMove(event, inputKey, inputButton);\n    const touches = activeEvent.getTouches(event, inputButton);\n\n    if (\n      touches === 0 ||\n      (releaseOnScroll && panEvent && !panEvent.srcEvent.cancelable)\n    ) {\n      this._onPanend(event);\n      return;\n    }\n\n    if (!panEvent || !this._enabled || touches > 1) {\n      return;\n    }\n\n    const userDirection = getDirectionByAngle(panEvent.angle, thresholdAngle);\n    const useHorizontal = useDirection(\n      DIRECTION_HORIZONTAL,\n      this._direction,\n      userDirection\n    );\n    const useVertical = useDirection(\n      DIRECTION_VERTICAL,\n      this._direction,\n      userDirection\n    );\n\n    if (activeEvent.prevEvent && IS_IOS_SAFARI) {\n      const swipeLeftToRight = panEvent.center.x < 0;\n\n      if (swipeLeftToRight) {\n        // iOS swipe left => right\n        this.release();\n        return;\n      } else if (this._atRightEdge) {\n        clearTimeout(this._rightEdgeTimer);\n\n        // - is right to left\n        const swipeRightToLeft = panEvent.deltaX < -iOSEdgeSwipeThreshold;\n\n        if (swipeRightToLeft) {\n          this._atRightEdge = false;\n        } else {\n          // iOS swipe right => left\n          this._rightEdgeTimer = window.setTimeout(() => this.release(), 100);\n        }\n      }\n    }\n    const distance = this._getDistance(\n      [panEvent.deltaX, panEvent.deltaY],\n      [useHorizontal, useVertical]\n    );\n    const offset = this._getOffset(\n      [panEvent.offsetX, panEvent.offsetY],\n      [useHorizontal, useVertical]\n    );\n    const prevent = offset.some((v) => v !== 0);\n\n    if (prevent) {\n      if (panEvent.srcEvent.cancelable !== false) {\n        panEvent.srcEvent.preventDefault();\n      }\n      panEvent.srcEvent.stopPropagation();\n    }\n    panEvent.preventSystemEvent = prevent;\n    if (prevent && (this._isOverThreshold || distance >= threshold)) {\n      this._dragged = preventClickOnDrag;\n      this._isOverThreshold = true;\n      this._observer.change(this, panEvent, toAxis(this.axes, offset));\n    }\n    activeEvent.prevEvent = panEvent;\n  }\n\n  protected _onPanend(event: InputEventType) {\n    const inputButton = this.options.inputButton;\n    const activeEvent = this._activeEvent;\n    activeEvent.onEventEnd(event);\n    if (!this._enabled || activeEvent.getTouches(event, inputButton) !== 0) {\n      return;\n    }\n    this._detachWindowEvent(activeEvent);\n    clearTimeout(this._rightEdgeTimer);\n    const prevEvent = activeEvent.prevEvent;\n    const velocity = this._isOverThreshold ? this._getOffset(\n      [\n        Math.abs(prevEvent.velocityX) * (prevEvent.offsetX < 0 ? -1 : 1),\n        Math.abs(prevEvent.velocityY) * (prevEvent.offsetY < 0 ? -1 : 1),\n      ],\n      [\n        useDirection(DIRECTION_HORIZONTAL, this._direction),\n        useDirection(DIRECTION_VERTICAL, this._direction),\n      ]\n    ) : [0, 0];\n    activeEvent.onRelease();\n    this._observer.release(this, prevEvent, velocity);\n  }\n\n  protected _attachWindowEvent(activeEvent: ActiveEvent) {\n    activeEvent?.move.forEach((event) => {\n      window.addEventListener(event, this._onPanmove, getAddEventOptions(event));\n    });\n    activeEvent?.end.forEach((event) => {\n      window.addEventListener(event, this._onPanend, getAddEventOptions(event));\n    });\n  }\n\n  protected _detachWindowEvent(activeEvent: ActiveEvent) {\n    activeEvent?.move.forEach((event) => {\n      window.removeEventListener(event, this._onPanmove);\n    });\n    activeEvent?.end.forEach((event) => {\n      window.removeEventListener(event, this._onPanend);\n    });\n  }\n\n  protected _getOffset(properties: number[], direction: boolean[]): number[] {\n    const scale = this.options.scale;\n    return [\n      direction[0] ? properties[0] * scale[0] : 0,\n      direction[1] ? properties[1] * scale[1] : 0,\n    ];\n  }\n\n  private _getDistance(delta: number[], direction: boolean[]): number {\n    return Math.sqrt(\n      Number(direction[0]) * Math.pow(delta[0], 2) +\n        Number(direction[1]) * Math.pow(delta[1], 2)\n    );\n  }\n\n  private _attachElementEvent(observer: InputTypeObserver) {\n    const activeEvent = convertInputType(this.options.inputType);\n    const element = this.element;\n    if (!activeEvent) {\n      return;\n    }\n    if (!element) {\n      throw new Error(\"Element to connect input does not exist.\");\n    }\n    this._observer = observer;\n    this._enabled = true;\n    this._activeEvent = activeEvent;\n    element.addEventListener(\"click\", this._preventClickWhenDragged, true);\n    activeEvent.start.forEach((event) => {\n      element.addEventListener(event, this._onPanstart);\n    });\n    // adding event listener to element prevents invalid behavior in iOS Safari\n    activeEvent.move.forEach((event) => {\n      element.addEventListener(event, this._voidFunction);\n    });\n  }\n\n  private _detachElementEvent() {\n    const activeEvent = this._activeEvent;\n    const element = this.element;\n    if (element) {\n      element.removeEventListener(\"click\", this._preventClickWhenDragged, true);\n      activeEvent?.start.forEach((event) => {\n        element.removeEventListener(event, this._onPanstart);\n      });\n      activeEvent?.move.forEach((event) => {\n        element.removeEventListener(event, this._voidFunction);\n      });\n    }\n    this._enabled = false;\n    this._observer = null;\n  }\n\n  private _preventClickWhenDragged = (e: PointerEvent | MouseEvent) => {\n    if (this._dragged) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    this._dragged = false;\n  };\n\n  private _voidFunction = () => {};\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes from \"../Axes\";\nimport { ElementType, ExtendedEvent } from \"../types\";\nimport { getAngle } from \"../utils\";\n\nimport { toAxis } from \"./InputType\";\nimport { PanInput, PanInputOption } from \"./PanInput\";\n\n/**\n * A module that passes the angle moved by touch to Axes and uses one axis of rotation.\n * [Details](https://github.com/naver/egjs-axes/wiki/RotatePanInput)\n * @ko 터치에 의해 움직인 각도를 Axes 에 전달하며 1개의 회전축만 사용한다.\n * [상세내용](https://github.com/naver/egjs-axes/wiki/RotatePanInput-%7C-%ED%95%9C%EA%B5%AD%EC%96%B4)\n *\n * @example\n * ```js\n * const input = new eg.Axes.RotatePanInput(\"#area\");\n *\n * var axes = new eg.Axes({\n *\t// property name('angle') could be anything you want (eg. x, y, z...)\n * \tangle: {\n * \t\trange: [-180, 180] // from -180deg to 180deg\n * \t}\n * });\n *\n * axes.connect(\"angle\", input)\n * ```\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.RotatePanInput module <ko>eg.Axes.RotatePanInput 모듈을 사용할 엘리먼트</ko>\n * @param {PanInputOption} [options] The option object of the eg.Axes.PanInput module<ko>eg.Axes.PanInput 모듈의 옵션 객체</ko>\n * @extends PanInput\n */\nexport class RotatePanInput extends PanInput {\n  private _rotateOrigin: number[];\n  private _prevAngle: number;\n  private _prevQuadrant: number = null;\n  private _lastDiff = 0;\n  private _coefficientForDistanceToAngle: number;\n\n  /**\n   *\n   */\n  public constructor(el: ElementType, options?: PanInputOption) {\n    super(el, options);\n  }\n\n  public mapAxes(axes: string[]) {\n    this._direction = Axes.DIRECTION_ALL;\n    this.axes = axes;\n  }\n\n  protected _onPanstart(event: MouseEvent) {\n    const { inputKey, inputButton } = this.options;\n    const activeEvent = this._activeEvent;\n    const panEvent = activeEvent.onEventStart(event, inputKey, inputButton);\n    if (!panEvent || !this.isEnabled()) {\n      return;\n    }\n\n    const rect = this.element.getBoundingClientRect();\n\n    this._observer.hold(this, panEvent);\n    this._attachWindowEvent(activeEvent);\n    // TODO: how to do if element is ellipse not circle.\n    this._coefficientForDistanceToAngle = 360 / (rect.width * Math.PI); // from 2*pi*r * x / 360\n    // TODO: provide a way to set origin like https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\n    this._rotateOrigin = [\n      rect.left + (rect.width - 1) / 2,\n      rect.top + (rect.height - 1) / 2,\n    ];\n\n    // init angle.\n    this._prevAngle = null;\n\n    this._triggerChange(panEvent);\n    activeEvent.prevEvent = panEvent;\n  }\n\n  protected _onPanmove(event: MouseEvent) {\n    const { inputKey, inputButton } = this.options;\n    const activeEvent = this._activeEvent;\n    const panEvent = activeEvent.onEventMove(event, inputKey, inputButton);\n    if (!panEvent || !this.isEnabled()) {\n      return;\n    }\n\n    if (panEvent.srcEvent.cancelable !== false) {\n      panEvent.srcEvent.preventDefault();\n    }\n    panEvent.srcEvent.stopPropagation();\n    this._triggerChange(panEvent);\n    activeEvent.prevEvent = panEvent;\n  }\n\n  protected _onPanend(event: MouseEvent) {\n    const activeEvent = this._activeEvent;\n    activeEvent.onEventEnd(event);\n    if (!this.isEnabled()) {\n      return;\n    }\n    const prevEvent = activeEvent.prevEvent;\n    this._triggerChange(prevEvent);\n    const vx = prevEvent.velocityX;\n    const vy = prevEvent.velocityY;\n    const velocity =\n      Math.sqrt(vx * vx + vy * vy) * (this._lastDiff > 0 ? -1 : 1); // clockwise\n    activeEvent.onRelease();\n    this._observer.release(this, prevEvent, [\n      velocity * this._coefficientForDistanceToAngle,\n    ]);\n    this._detachWindowEvent(activeEvent);\n  }\n\n  private _triggerChange(event: ExtendedEvent) {\n    const { x, y } = this._getPosFromOrigin(event.center.x, event.center.y);\n    const angle = getAngle(x, y);\n    const positiveAngle = angle < 0 ? 360 + angle : angle;\n    const quadrant = this._getQuadrant(event.center.x, event.center.y);\n    const diff = this._getDifference(\n      this._prevAngle,\n      positiveAngle,\n      this._prevQuadrant,\n      quadrant\n    );\n\n    this._prevAngle = positiveAngle;\n    this._prevQuadrant = quadrant;\n\n    if (diff === 0) {\n      return;\n    }\n\n    this._lastDiff = diff;\n    this._observer.change(this, event, toAxis(this.axes, [-diff])); // minus for clockwise\n  }\n\n  private _getDifference(\n    prevAngle: number,\n    angle: number,\n    prevQuadrant: number,\n    quadrant: number\n  ) {\n    let diff: number;\n\n    if (prevAngle === null) {\n      diff = 0;\n    } else if (prevQuadrant === 1 && quadrant === 4) {\n      diff = -prevAngle - (360 - angle);\n    } else if (prevQuadrant === 4 && quadrant === 1) {\n      diff = 360 - prevAngle + angle;\n    } else {\n      diff = angle - prevAngle;\n    }\n\n    return diff;\n  }\n\n  private _getPosFromOrigin(posX: number, posY: number) {\n    return {\n      x: posX - this._rotateOrigin[0],\n      y: this._rotateOrigin[1] - posY,\n    };\n  }\n\n  private _getQuadrant(posX: number, posY: number) {\n    /**\n     * Quadrant\n     *       y(+)\n     *       |\n     *   2   |    1\n     * --------------->x(+)\n     *   3   |    4\n     *       |\n     */\n    const { x, y } = this._getPosFromOrigin(posX, posY);\n    let q = 0;\n\n    if (x >= 0 && y >= 0) {\n      q = 1;\n    } else if (x < 0 && y >= 0) {\n      q = 2;\n    } else if (x < 0 && y < 0) {\n      q = 3;\n    } else if (x >= 0 && y < 0) {\n      q = 4;\n    }\n    return q;\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { $, isCssPropsFromAxes, setCssProps, revertCssProps } from \"../utils\";\nimport { ActiveEvent, ElementType, InputEventType } from \"../types\";\nimport { DIRECTION_ALL } from \"../const\";\n\nimport {\n  toAxis,\n  convertInputType,\n  InputType,\n  InputTypeObserver,\n} from \"./InputType\";\n\nexport interface PinchInputOption {\n  scale?: number;\n  threshold?: number;\n  inputType?: string[];\n  touchAction?: string;\n}\n\n/**\n * @typedef {Object} PinchInputOption The option object of the eg.Axes.PinchInput module\n * @ko eg.Axes.PinchInput 모듈의 옵션 객체\n * @param {Number} [scale=1] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @param {Number} [threshold=0] Minimal scale before recognizing <ko>사용자의 Pinch 동작을 인식하기 위해산 최소한의 배율</ko>\n * @param {String[]} [inputType=[\"touch\", \"pointer\"]] Types of input devices\n * - touch: Touch screen\n * - pointer: Mouse and touch <ko>입력 장치 종류\n * - touch: 터치 입력 장치\n * - pointer: 마우스 및 터치</ko>\n * @param {String} [touchAction=\"none\"] Value that overrides the element's \"touch-action\" css property. It is set to \"none\" to prevent scrolling during touch. <ko>엘리먼트의 \"touch-action\" CSS 속성을 덮어쓰는 값. 터치 도중 스크롤을 방지하기 위해 \"none\" 으로 설정되어 있다.</ko>\n **/\n\n/**\n * A module that passes the amount of change to eg.Axes when two pointers are moving toward (zoom-in) or away from each other (zoom-out). use one axis.\n * @ko 2개의 pointer를 이용하여 zoom-in하거나 zoom-out 하는 동작의 변화량을 eg.Axes에 전달하는 모듈. 한 개 의 축을 사용한다.\n * @example\n * ```js\n * const pinch = new eg.Axes.PinchInput(\"#area\", {\n *   scale: 1\n * });\n *\n * // Connect 'something' axis when two pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * axes.connect(\"something\", pinch);\n * ```\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.PinchInput module <ko>eg.Axes.PinchInput 모듈을 사용할 엘리먼트</ko>\n * @param {PinchInputOption} [options] The option object of the eg.Axes.PinchInput module<ko>eg.Axes.PinchInput 모듈의 옵션 객체</ko>\n */\nexport class PinchInput implements InputType {\n  public options: PinchInputOption;\n  public axes: string[] = [];\n  public element: HTMLElement = null;\n  private _observer: InputTypeObserver;\n  private _pinchFlag = false;\n  private _enabled = false;\n  private _originalCssProps: { [key: string]: string };\n  private _activeEvent: ActiveEvent = null;\n  private _baseValue: number;\n  private _isOverThreshold = false;\n\n  /**\n   *\n   */\n  public constructor(el: ElementType, options?: PinchInputOption) {\n    this.element = $(el);\n    this.options = {\n      scale: 1,\n      threshold: 0,\n      inputType: [\"touch\", \"pointer\"],\n      touchAction: \"none\",\n      ...options,\n    };\n    this._onPinchStart = this._onPinchStart.bind(this);\n    this._onPinchMove = this._onPinchMove.bind(this);\n    this._onPinchEnd = this._onPinchEnd.bind(this);\n  }\n\n  public mapAxes(axes: string[]) {\n    this.axes = axes;\n  }\n\n  public connect(observer: InputTypeObserver): InputType {\n    if (this._activeEvent) {\n      this._detachEvent();\n    }\n    this._attachEvent(observer);\n    this._originalCssProps = setCssProps(\n      this.element,\n      this.options,\n      DIRECTION_ALL\n    );\n    return this;\n  }\n\n  public disconnect() {\n    this._detachEvent();\n    if (!isCssPropsFromAxes(this._originalCssProps)) {\n      revertCssProps(this.element, this._originalCssProps);\n    }\n    return this;\n  }\n\n  /**\n   * Destroys elements, properties, and events used in a module.\n   * @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n   */\n  public destroy() {\n    this.disconnect();\n    this.element = null;\n  }\n\n  /**\n   * Enables input devices\n   * @ko 입력 장치를 사용할 수 있게 한다\n   * @return {PinchInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public enable() {\n    this._enabled = true;\n    return this;\n  }\n\n  /**\n   * Disables input devices\n   * @ko 입력 장치를 사용할 수 없게 한다.\n   * @return {PinchInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public disable() {\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Returns whether to use an input device\n   * @ko 입력 장치를 사용 여부를 반환한다.\n   * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n   */\n  public isEnabled() {\n    return this._enabled;\n  }\n\n  private _onPinchStart(event: InputEventType) {\n    const activeEvent = this._activeEvent;\n    const pinchEvent = activeEvent.onEventStart(event);\n    if (!pinchEvent || !this._enabled || activeEvent.getTouches(event) !== 2) {\n      return;\n    }\n\n    this._baseValue = this._observer.get(this)[this.axes[0]];\n    this._observer.hold(this, event);\n    this._pinchFlag = true;\n    this._isOverThreshold = false;\n    activeEvent.prevEvent = pinchEvent;\n  }\n\n  private _onPinchMove(event: InputEventType) {\n    const threshold = this.options.threshold;\n    const activeEvent = this._activeEvent;\n    const pinchEvent = activeEvent.onEventMove(event);\n    if (\n      !pinchEvent ||\n      !this._pinchFlag ||\n      !this._enabled ||\n      activeEvent.getTouches(event) !== 2\n    ) {\n      return;\n    }\n\n    const distance = this._getDistance(pinchEvent.scale);\n    const offset = this._getOffset(\n      pinchEvent.scale,\n      activeEvent.prevEvent.scale\n    );\n\n    if (this._isOverThreshold || distance >= threshold) {\n      this._isOverThreshold = true;\n      this._observer.change(this, event, toAxis(this.axes, [offset]));\n    }\n    activeEvent.prevEvent = pinchEvent;\n  }\n\n  private _onPinchEnd(event: InputEventType) {\n    const activeEvent = this._activeEvent;\n    activeEvent.onEventEnd(event);\n    if (\n      !this._pinchFlag ||\n      !this._enabled ||\n      activeEvent.getTouches(event) >= 2\n    ) {\n      return;\n    }\n\n    activeEvent.onRelease();\n    this._observer.release(this, event, [0], 0);\n    this._baseValue = null;\n    this._pinchFlag = false;\n  }\n\n  private _attachEvent(observer: InputTypeObserver) {\n    const activeEvent = convertInputType(this.options.inputType);\n    const element = this.element;\n    if (!activeEvent) {\n      return;\n    }\n    if (!element) {\n      throw new Error(\"Element to connect input does not exist.\");\n    }\n    this._observer = observer;\n    this._enabled = true;\n    this._activeEvent = activeEvent;\n    activeEvent.start.forEach((event) => {\n      element.addEventListener(event, this._onPinchStart, false);\n    });\n    activeEvent.move.forEach((event) => {\n      element.addEventListener(event, this._onPinchMove, false);\n    });\n    activeEvent.end.forEach((event) => {\n      element.addEventListener(event, this._onPinchEnd, false);\n    });\n  }\n\n  private _detachEvent() {\n    const activeEvent = this._activeEvent;\n    const element = this.element;\n    if (element) {\n      activeEvent?.start.forEach((event) => {\n        element.removeEventListener(event, this._onPinchStart, false);\n      });\n      activeEvent?.move.forEach((event) => {\n        element.removeEventListener(event, this._onPinchMove, false);\n      });\n      activeEvent?.end.forEach((event) => {\n        element.removeEventListener(event, this._onPinchEnd, false);\n      });\n    }\n    this._enabled = false;\n    this._observer = null;\n  }\n\n  private _getOffset(pinchScale: number, prev: number = 1): number {\n    return this._baseValue * (pinchScale - prev) * this.options.scale;\n  }\n\n  private _getDistance(pinchScale: number): number {\n    return Math.abs(pinchScale - 1);\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { $, getDirection, useDirection } from \"../utils\";\nimport { ANY, DIRECTION_HORIZONTAL, DIRECTION_VERTICAL } from \"../const\";\nimport { ElementType } from \"../types\";\n\nimport { toAxis, InputType, InputTypeObserver } from \"./InputType\";\nimport { isValidKey } from \"../eventInput/EventInput\";\n\nexport interface WheelInputOption {\n  inputKey?: string[];\n  scale?: number;\n  releaseDelay?: number;\n  useNormalized?: boolean;\n  useAnimation?: boolean;\n}\n\n/**\n * @typedef {Object} WheelInputOption The option object of the eg.Axes.WheelInput module\n * @ko eg.Axes.WheelInput 모듈의 옵션 객체\n * @param {String[]} [inputKey=[\"any\"]] List of key combinations to allow input\n * - any: any key\n * - shift: shift key\n * - ctrl: ctrl key and pinch gesture on the trackpad\n * - alt: alt key\n * - meta: meta key\n * - none: none of these keys are pressed <ko>입력을 허용할 키 조합 목록\n * - any: 아무 키\n * - shift: shift 키\n * - ctrl: ctrl 키 및 트랙패드의 pinch 제스쳐\n * - alt: alt 키\n * - meta: meta 키\n * - none: 아무 키도 눌리지 않은 상태 </ko>\n * @param {Number} [scale=1] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @param {Number} [releaseDelay=300] Millisecond that trigger release event after last input<ko>마지막 입력 이후 release 이벤트가 트리거되기까지의 밀리초</ko>\n * @param {Boolean} [useNormalized=true] Whether to calculate scroll speed the same in all browsers<ko>모든 브라우저에서 스크롤 속도를 동일하게 처리할지 여부</ko>\n * @param {Boolean} [useAnimation=false] Whether to process coordinate changes through the mouse wheel as a continuous animation<ko>마우스 휠을 통한 좌표 변화를 연속적인 애니메이션으로 처리할지 여부</ko>\n **/\n\n/**\n * A module that passes the amount of change to eg.Axes when the mouse wheel is moved. use one axis.\n * @ko 마우스 휠이 움직일때의 변화량을 eg.Axes에 전달하는 모듈. 두개 이하의 축을 사용한다.\n *\n * @example\n * ```js\n * const wheel = new eg.Axes.WheelInput(\"#area\", {\n *     scale: 1\n * });\n *\n * // Connect only one 'something1' axis to the vertical mouse wheel.\n * axes.connect([\"something1\"], wheel); // or axes.connect(\"something1\", wheel);\n *\n * // Connect only one 'something2' axis to the horizontal mouse wheel.\n * axes.connect([\"\", \"something2\"], wheel); // or axes.connect(\" something2\", pan);\n *\n * // Connect the 'something1' axis to the vertical mouse wheel.\n * // Connect the 'something2' axis to the horizontal mouse wheel.\n * axes.connect([\"something1\", \"something2\"], wheel);\n * ```\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.WheelInput module <ko>eg.Axes.WheelInput 모듈을 사용할 엘리먼트</ko>\n * @param {WheelInputOption} [options] The option object of the eg.Axes.WheelInput module<ko>eg.Axes.WheelInput 모듈의 옵션 객체</ko>\n */\nexport class WheelInput implements InputType {\n  public options: WheelInputOption;\n  public axes: string[] = [];\n  public element: HTMLElement = null;\n  private _observer: InputTypeObserver;\n  private _direction: number;\n  private _enabled = false;\n  private _holding = false;\n  private _timer: NodeJS.Timeout = null;\n\n  /**\n   *\n   */\n  public constructor(el: ElementType, options?: WheelInputOption) {\n    this.element = $(el);\n    this.options = {\n      inputKey: [ANY],\n      scale: 1,\n      releaseDelay: 300,\n      useNormalized: true,\n      useAnimation: false,\n      ...options,\n    };\n    this._onWheel = this._onWheel.bind(this);\n  }\n\n  public mapAxes(axes: string[]) {\n    // vertical mouse wheel is mapped into axes[0]\n    this._direction = getDirection(!!axes[1], !!axes[0]);\n    this.axes = axes;\n  }\n\n  public connect(observer: InputTypeObserver): InputType {\n    this._detachEvent();\n    this._attachEvent(observer);\n    return this;\n  }\n\n  public disconnect() {\n    this._detachEvent();\n    return this;\n  }\n\n  /**\n   * Destroys elements, properties, and events used in a module.\n   * @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n   */\n  public destroy() {\n    this.disconnect();\n    this.element = null;\n  }\n\n  /**\n   * Enables input devices\n   * @ko 입력 장치를 사용할 수 있게 한다\n   * @return {WheelInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public enable() {\n    this._enabled = true;\n    return this;\n  }\n\n  /**\n   * Disables input devices\n   * @ko 입력 장치를 사용할 수 없게 한다.\n   * @return {WheelInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public disable() {\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Returns whether to use an input device\n   * @ko 입력 장치를 사용 여부를 반환한다.\n   * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n   */\n  public isEnabled() {\n    return this._enabled;\n  }\n\n  private _onWheel(event: WheelEvent) {\n    if (!this._enabled || !isValidKey(event, this.options.inputKey)) {\n      return;\n    }\n\n    const offset = this._getOffset(\n      [event.deltaY, event.deltaX],\n      [\n        useDirection(DIRECTION_VERTICAL, this._direction),\n        useDirection(DIRECTION_HORIZONTAL, this._direction),\n      ]\n    );\n\n    if (offset[0] === 0 && offset[1] === 0) {\n      return;\n    }\n    event.preventDefault();\n\n    if (!this._holding) {\n      this._observer.hold(this, event);\n      this._holding = true;\n    }\n\n    this._observer.change(\n      this,\n      event,\n      toAxis(this.axes, offset),\n      this.options.useAnimation\n    );\n    clearTimeout(this._timer);\n\n    this._timer = setTimeout(() => {\n      if (this._holding) {\n        this._holding = false;\n        this._observer.release(this, event, [0]);\n      }\n    }, this.options.releaseDelay);\n  }\n\n  private _getOffset(properties: number[], direction: boolean[]): number[] {\n    const scale = this.options.scale;\n    const useNormalized = this.options.useNormalized;\n    return [\n      direction[0] && properties[0]\n        ? (properties[0] > 0 ? -1 : 1) *\n          (useNormalized ? 1 : Math.abs(properties[0])) *\n          scale\n        : 0,\n      direction[1] && properties[1]\n        ? (properties[1] > 0 ? -1 : 1) *\n          (useNormalized ? 1 : Math.abs(properties[1])) *\n          scale\n        : 0,\n    ];\n  }\n\n  private _attachEvent(observer: InputTypeObserver) {\n    const element = this.element;\n    if (!element) {\n      throw new Error(\"Element to connect input does not exist.\");\n    }\n    this._observer = observer;\n    element.addEventListener(\"wheel\", this._onWheel);\n    this._enabled = true;\n  }\n\n  private _detachEvent() {\n    const element = this.element;\n    if (element) {\n      this.element.removeEventListener(\"wheel\", this._onWheel);\n    }\n    this._enabled = false;\n    this._observer = null;\n\n    if (this._timer) {\n      clearTimeout(this._timer);\n      this._timer = null;\n    }\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ElementType } from \"../types\";\nimport { $ } from \"../utils\";\n\nimport { toAxis, InputType, InputTypeObserver } from \"./InputType\";\n\nexport const KEY_LEFT_ARROW = 37;\nexport const KEY_A = 65;\nexport const KEY_UP_ARROW = 38;\nexport const KEY_W = 87;\nexport const KEY_RIGHT_ARROW = 39;\nexport const KEY_D = 68;\nexport const KEY_DOWN_ARROW = 40;\nexport const KEY_S = 83;\n\n/* eslint-disable */\nconst DIRECTION_REVERSE = -1;\nconst DIRECTION_FORWARD = 1;\nconst DIRECTION_HORIZONTAL = -1;\nconst DIRECTION_VERTICAL = 1;\nconst DELAY = 80;\n/* eslint-enable */\n\nexport interface MoveKeyInputOption {\n  scale?: number[];\n}\n\n/**\n * @typedef {Object} MoveKeyInputOption The option object of the eg.Axes.MoveKeyInput module\n * @ko eg.Axes.MoveKeyInput 모듈의 옵션 객체\n * @param {Array<Number>} [scale] Coordinate scale that a user can move<ko>사용자의 동작으로 이동하는 좌표의 배율</ko>\n * @param {Number} [scale[0]=1] Coordinate scale for the first axis<ko>첫번째 축의 배율</ko>\n * @param {Number} [scale[1]=1] Coordinate scale for the decond axis<ko>두번째 축의 배율</ko>\n **/\n\n/**\n * A module that passes the amount of change to eg.Axes when the move key stroke is occured. use two axis.\n * @ko 이동키 입력이 발생했을 때의 변화량을 eg.Axes에 전달하는 모듈. 두 개 의 축을 사용한다.\n *\n * @example\n * ```js\n * const moveKey = new eg.Axes.MoveKeyInput(\"#area\", {\n *     scale: [1, 1]\n * });\n *\n * // Connect 'x', 'y' axes when the moveKey is pressed.\n * axes.connect([\"x\", \"y\"], moveKey);\n * ```\n * @param {HTMLElement|String|jQuery} element An element to use the eg.Axes.MoveKeyInput module <ko>eg.Axes.MoveKeyInput 모듈을 사용할 엘리먼트</ko>\n * @param {MoveKeyInputOption} [options] The option object of the eg.Axes.MoveKeyInput module<ko>eg.Axes.MoveKeyInput 모듈의 옵션 객체</ko>\n */\nexport class MoveKeyInput implements InputType {\n  public options: MoveKeyInputOption;\n  public axes: string[] = [];\n  public element: HTMLElement = null;\n  private _observer: InputTypeObserver;\n  private _enabled = false;\n  private _holding = false;\n  private _timer: NodeJS.Timeout = null;\n\n  /**\n   *\n   */\n  public constructor(el: ElementType, options?: MoveKeyInputOption) {\n    this.element = $(el);\n    this.options = {\n      ...{\n        scale: [1, 1],\n      },\n      ...options,\n    };\n    this._onKeydown = this._onKeydown.bind(this);\n    this._onKeyup = this._onKeyup.bind(this);\n  }\n\n  public mapAxes(axes: string[]) {\n    this.axes = axes;\n  }\n\n  public connect(observer: InputTypeObserver): InputType {\n    this._detachEvent();\n\n    // add tabindex=\"0\" to the container for making it focusable\n    if (this.element.getAttribute(\"tabindex\") !== \"0\") {\n      this.element.setAttribute(\"tabindex\", \"0\");\n    }\n\n    this._attachEvent(observer);\n    return this;\n  }\n\n  public disconnect() {\n    this._detachEvent();\n    return this;\n  }\n\n  /**\n   * Destroys elements, properties, and events used in a module.\n   * @ko 모듈에 사용한 엘리먼트와 속성, 이벤트를 해제한다.\n   */\n  public destroy() {\n    this.disconnect();\n    this.element = null;\n  }\n\n  /**\n   * Enables input devices\n   * @ko 입력 장치를 사용할 수 있게 한다\n   * @return {MoveKeyInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public enable() {\n    this._enabled = true;\n    return this;\n  }\n\n  /**\n   * Disables input devices\n   * @ko 입력 장치를 사용할 수 없게 한다.\n   * @return {MoveKeyInput} An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public disable() {\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Returns whether to use an input device\n   * @ko 입력 장치를 사용 여부를 반환한다.\n   * @return {Boolean} Whether to use an input device <ko>입력장치 사용여부</ko>\n   */\n  public isEnabled() {\n    return this._enabled;\n  }\n\n  private _onKeydown(event: KeyboardEvent) {\n    if (!this._enabled) {\n      return;\n    }\n\n    let isMoveKey = true;\n    let direction = DIRECTION_FORWARD;\n    let move = DIRECTION_HORIZONTAL;\n\n    switch (event.keyCode) {\n      case KEY_LEFT_ARROW:\n      case KEY_A:\n        direction = DIRECTION_REVERSE;\n        break;\n      case KEY_RIGHT_ARROW:\n      case KEY_D:\n        break;\n      case KEY_DOWN_ARROW:\n      case KEY_S:\n        direction = DIRECTION_REVERSE;\n        move = DIRECTION_VERTICAL;\n        break;\n      case KEY_UP_ARROW:\n      case KEY_W:\n        move = DIRECTION_VERTICAL;\n        break;\n      default:\n        isMoveKey = false;\n    }\n    if (\n      (move === DIRECTION_HORIZONTAL && !this.axes[0]) ||\n      (move === DIRECTION_VERTICAL && !this.axes[1])\n    ) {\n      isMoveKey = false;\n    }\n    if (!isMoveKey) {\n      return;\n    }\n    event.preventDefault();\n    const offsets =\n      move === DIRECTION_HORIZONTAL\n        ? [+this.options.scale[0] * direction, 0]\n        : [0, +this.options.scale[1] * direction];\n\n    if (!this._holding) {\n      this._observer.hold(this, event);\n      this._holding = true;\n    }\n    clearTimeout(this._timer);\n    this._observer.change(this, event, toAxis(this.axes, offsets));\n  }\n\n  private _onKeyup(event: KeyboardEvent) {\n    if (!this._holding) {\n      return;\n    }\n    clearTimeout(this._timer);\n    this._timer = setTimeout(() => {\n      this._observer.release(this, event, [0, 0]);\n      this._holding = false;\n    }, DELAY);\n  }\n\n  private _attachEvent(observer: InputTypeObserver) {\n    const element = this.element;\n    if (!element) {\n      throw new Error(\"Element to connect input does not exist.\");\n    }\n    this._observer = observer;\n    element.addEventListener(\"keydown\", this._onKeydown, false);\n    element.addEventListener(\"keypress\", this._onKeydown, false);\n    element.addEventListener(\"keyup\", this._onKeyup, false);\n    this._enabled = true;\n  }\n\n  private _detachEvent() {\n    const element = this.element;\n    if (element) {\n      element.removeEventListener(\"keydown\", this._onKeydown, false);\n      element.removeEventListener(\"keypress\", this._onKeydown, false);\n      element.removeEventListener(\"keyup\", this._onKeyup, false);\n    }\n    this._enabled = false;\n    this._observer = null;\n  }\n}\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { AxesOption } from \"./Axes\";\nimport { AXES_EVENTS, AXES_METHODS } from \"./const\";\nimport { ReactiveAdapter } from \"@cfcs/core\";\nimport {\n  AxesEvents,\n  AxesMethods,\n  AxesReactiveState,\n  ObjectInterface,\n} from \"./types\";\nimport { AxisOption } from \"./AxisManager\";\n\nexport interface AxesData {\n  axis: ObjectInterface<AxisOption>;\n  options: AxesOption;\n}\n\nexport const REACTIVE_AXES: ReactiveAdapter<\n  Axes,\n  AxesReactiveState,\n  keyof AxesMethods,\n  AxesData,\n  AxesEvents\n> = {\n  methods: AXES_METHODS,\n  events: AXES_EVENTS,\n  created(data) {\n    return new Axes(data.axis, data.options);\n  },\n  on(instance, name, callback) {\n    instance.on(name, callback);\n  },\n  off(instance, name, callback) {\n    instance.off(name, callback);\n  },\n  destroy(instance) {\n    instance.destroy();\n  },\n};\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes from \"./Axes\";\nexport { PanInput } from \"./inputType/PanInput\";\nexport { RotatePanInput } from \"./inputType/RotatePanInput\";\nexport { PinchInput } from \"./inputType/PinchInput\";\nexport { WheelInput } from \"./inputType/WheelInput\";\nexport { MoveKeyInput } from \"./inputType/MoveKeyInput\";\n\nexport default Axes;\n\nexport { AXES_METHODS, AXES_EVENTS } from \"./const\";\nexport * from \"./types\";\nexport * from \"./reactive\";\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nconst isWindow = typeof window !== \"undefined\";\nconst ua = isWindow ? window.navigator.userAgent : \"\";\nexport const SUPPORT_COMPUTEDSTYLE = isWindow ? !!(\"getComputedStyle\" in window) : false;\nexport const IS_IE = /MSIE|Trident|Windows Phone|Edge/.test(ua);\nexport const SUPPORT_ADDEVENTLISTENER = isWindow ? !!(\"addEventListener\" in document) : false;\nexport const WIDTH = \"width\";\nexport const HEIGHT = \"height\";\n\nexport const PROPS = [\n  \"prefix\",\n  \"loaders\",\n] as const;\n\nexport const EVENTS = [\n  \"preReadyElement\",\n  \"readyElement\",\n  \"error\",\n  \"preReady\",\n  \"ready\",\n] as const;\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport { ArrayFormat } from \"./types\";\n\nimport { SUPPORT_ADDEVENTLISTENER, SUPPORT_COMPUTEDSTYLE } from \"./consts\";\n\nexport function getAttribute(el: HTMLElement, name: string): string {\n  return el.getAttribute(name) || \"\";\n}\n\nexport function toArray<T>(arr: ArrayFormat<T>): T[] {\n  return [].slice.call(arr);\n}\nexport function hasSizeAttribute(target: HTMLElement, prefix = \"data-\"): boolean {\n  return !!target.getAttribute(`${prefix}width`);\n}\nexport function hasLoadingAttribute(target: HTMLElement, prefix = \"data-\"): target is HTMLImageElement {\n  return ((\"loading\" in target) && (target as HTMLImageElement).getAttribute(\"loading\") === \"lazy\")\n    || !!target.getAttribute(`${prefix}lazy`);\n}\nexport function hasSkipAttribute(target: HTMLElement, prefix = \"data-\"): boolean {\n  return !!target.getAttribute(`${prefix}skip`);\n}\nexport function addEvent(\n  element: EventTarget,\n  type: string,\n  handler: (...args: any[]) => void,\n) {\n  if (SUPPORT_ADDEVENTLISTENER) {\n    element.addEventListener(type, handler, false);\n  } else if ((element as any).attachEvent) {\n    (element as any).attachEvent(`on${type}`, handler);\n  } else {\n    (element as any)[`on${type}`] = handler;\n  }\n}\nexport function removeEvent(\n  element: EventTarget,\n  type: string,\n  handler: (...args: any[]) => void,\n) {\n  if (element.removeEventListener) {\n    element.removeEventListener(type, handler, false);\n  } else if ((element as any).detachEvent) {\n    (element as any).detachEvent(`on${type}`, handler);\n  } else {\n    (element as any)[`on${type}`] = null;\n  }\n}\n\nexport function innerWidth(el: HTMLElement) {\n  return getSize(el, \"Width\");\n}\nexport function innerHeight(el: HTMLElement) {\n  return getSize(el, \"Height\");\n}\nexport function getStyles(el: Element) {\n  return (SUPPORT_COMPUTEDSTYLE ?\n    window.getComputedStyle(el) : (el as any).currentStyle) || {};\n}\nfunction getSize(el: HTMLElement, name: \"Width\" | \"Height\") {\n  const size = (el as any)[`client${name}`] || (el as any)[`offset${name}`];\n\n  return parseFloat(size || getStyles(el)[name.toLowerCase()]) || 0;\n}\n\nexport function getContentElements(element: HTMLElement, tags: string[], prefix: string) {\n  const skipElements = toArray(element.querySelectorAll([\n    `[${prefix}skip] [${prefix}width]`,\n    ...tags.map(tag => ([\n      `[${prefix}skip] ${tag}`,\n      `${tag}[${prefix}skip]`,\n      `[${prefix}width] ${tag}`,\n    ]).join(\", \")),\n  ].join(\", \")));\n\n  return toArray<HTMLElement>(\n    element.querySelectorAll(`[${prefix}width], ${tags.join(\", \")}`),\n  ).filter(el => {\n    return skipElements.indexOf(el) === -1;\n  });\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport { addEvent, removeEvent, innerWidth, innerHeight, getAttribute } from \"./utils\";\nimport { WIDTH, HEIGHT } from \"./consts\";\nimport { AutoSizerElement } from \"./types\";\n\nconst elements: AutoSizerElement[] = [];\n\nexport function addAutoSizer(element: AutoSizerElement, prefix: string) {\n  !elements.length && addEvent(window, \"resize\", resizeAllAutoSizers);\n  element.__PREFIX__ = prefix;\n  elements.push(element);\n  resize(element);\n}\nexport function removeAutoSizer(element: AutoSizerElement, prefix: string) {\n  const index = elements.indexOf(element);\n\n  if (index < 0) {\n    return;\n  }\n  const fixed = getAttribute(element, `${prefix}fixed`);\n\n  delete element.__PREFIX__;\n  element.style[fixed === HEIGHT ? WIDTH : HEIGHT] = \"\";\n  elements.splice(index, 1);\n\n  !elements.length && removeEvent(window, \"resize\", resizeAllAutoSizers);\n}\nfunction resize(element: AutoSizerElement, prefix = \"data-\") {\n  const elementPrefix = element.__PREFIX__ || prefix;\n  const dataWidth = parseInt(getAttribute(element, `${elementPrefix}${WIDTH}`), 10) || 0;\n  const dataHeight = parseInt(getAttribute(element, `${elementPrefix}${HEIGHT}`), 10) || 0;\n  const fixed = getAttribute(element, `${elementPrefix}fixed`);\n\n  if (fixed === HEIGHT) {\n    const size = innerHeight(element) || dataHeight;\n\n    element.style[WIDTH] = `${dataWidth / dataHeight * size}px`;\n  } else {\n    const size = innerWidth(element) || dataWidth;\n\n    element.style[HEIGHT] = `${dataHeight / dataWidth * size}px`;\n  }\n}\nexport function resizeAllAutoSizers() {\n  elements.forEach(element => {\n    resize(element);\n  });\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport Component from \"@egjs/component\";\nimport { addAutoSizer, removeAutoSizer } from \"../AutoSizer\";\nimport { ImReadyLoaderEvents, ImReadyLoaderOptions } from \"../types\";\nimport { removeEvent, hasSizeAttribute, hasLoadingAttribute, addEvent, hasSkipAttribute } from \"../utils\";\n\n\nexport default abstract class Loader<T extends HTMLElement = any> extends Component<ImReadyLoaderEvents> {\n  public static EVENTS: string[] = [];\n  public options!: ImReadyLoaderOptions;\n  public abstract checkElement(): boolean;\n  protected element!: T;\n  protected isReady = false;\n  protected isPreReady = false;\n  protected hasDataSize = false;\n  protected hasLoading = false;\n  protected isSkip = false;\n\n  constructor(element: HTMLElement, options: Partial<ImReadyLoaderOptions> = {}) {\n    super();\n    this.options = {\n      prefix: \"data-\",\n      ...options,\n    };\n    this.element = element as T;\n    const prefix = this.options.prefix;\n\n    this.hasDataSize = hasSizeAttribute(element, prefix);\n    this.isSkip = hasSkipAttribute(element, prefix);\n    this.hasLoading = hasLoadingAttribute(element, prefix);\n  }\n  public check() {\n    if (this.isSkip || !this.checkElement()) {\n      // I'm Ready\n      this.onAlreadyReady(true);\n      return false;\n    }\n\n    if (this.hasDataSize) {\n      addAutoSizer(this.element, this.options.prefix);\n    }\n    if (this.hasDataSize || this.hasLoading) {\n      // I'm Pre Ready\n      this.onAlreadyPreReady();\n    }\n    // Wati Pre Ready, Ready\n    return true;\n  }\n  public addEvents() {\n    const element = this.element;\n    (this.constructor as typeof Loader).EVENTS.forEach(name => {\n      addEvent(element, name, this.onCheck);\n    });\n  }\n  public clear() {\n    const element = this.element;\n    (this.constructor as typeof Loader).EVENTS.forEach(name => {\n      removeEvent(element, name, this.onCheck);\n    });\n    this.removeAutoSizer();\n  }\n  public destroy() {\n    this.clear();\n    this.off();\n  }\n  public removeAutoSizer() {\n    if (this.hasDataSize) {\n      // I'm already ready.\n      const { prefix } = this.options;\n\n      removeAutoSizer(this.element, prefix);\n    }\n  }\n  public onCheck = (e?: Event) => {\n    this.clear();\n\n\n    if (e && e.type === \"error\") {\n      this.onError(this.element);\n    }\n    if (this.hasLoading && this.checkElement()) {\n      // I'm not ready\n      return;\n    }\n    // I'm pre-ready and ready!\n    const withPreReady = !this.hasDataSize && !this.hasLoading;\n\n    this.onReady(withPreReady);\n  };\n  public onError(target: HTMLElement) {\n    this.trigger(\"error\", {\n      element: this.element,\n      target: target,\n    });\n  }\n  public onPreReady() {\n    if (this.isPreReady) {\n      return;\n    }\n    this.isPreReady = true;\n    this.trigger(\"preReady\", {\n      element: this.element,\n      hasLoading: this.hasLoading,\n      isSkip: this.isSkip,\n    });\n  }\n  public onReady(withPreReady: boolean) {\n    if (this.isReady) {\n      return;\n    }\n    withPreReady = !this.isPreReady && withPreReady;\n\n    if (withPreReady) {\n      this.isPreReady = true;\n    }\n    this.removeAutoSizer();\n    this.isReady = true;\n    this.trigger(\"ready\", {\n      element: this.element,\n      withPreReady,\n      hasLoading: this.hasLoading,\n      isSkip: this.isSkip,\n    });\n  }\n  public onAlreadyError(target: HTMLElement) {\n    setTimeout(() => {\n      this.onError(target);\n    });\n  }\n  public onAlreadyPreReady() {\n    setTimeout(() => {\n      this.onPreReady();\n    });\n  }\n  public onAlreadyReady(withPreReady: boolean) {\n    setTimeout(() => {\n      this.onReady(withPreReady);\n    });\n  }\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport { addAutoSizer } from \"../AutoSizer\";\nimport { ImReadyLoaderOptions } from \"../types\";\nimport Loader from \"./Loader\";\n\n\nexport class ElementLoader<T extends HTMLElement> extends Loader<T> {\n  public static EVENTS: string[] = [];\n  public options!: ImReadyLoaderOptions;\n\n  public setHasLoading(hasLoading: boolean) {\n    this.hasLoading = hasLoading;\n  }\n  public check() {\n    if (this.isSkip) {\n      // I'm Ready\n      this.onAlreadyReady(true);\n      return false;\n    }\n\n    if (this.hasDataSize) {\n      addAutoSizer(this.element, this.options.prefix);\n      this.onAlreadyPreReady();\n    } else {\n      // has not data size\n      this.trigger(\"requestChildren\");\n    }\n    return true;\n  }\n  public checkElement() {\n    return true;\n  }\n  public destroy() {\n    this.clear();\n    this.trigger(\"requestDestroy\");\n    this.off();\n  }\n  public onAlreadyPreReady() {\n    // has data size\n    super.onAlreadyPreReady();\n    this.trigger(\"reqeustReadyChildren\");\n  }\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport Component, { ComponentEvent } from \"@egjs/component\";\nimport { ElementLoader } from \"./loaders/ElementLoader\";\nimport { ArrayFormat, ElementInfo, ImReadyEvents, ImReadyLoaderOptions, ImReadyOptions } from \"./types\";\nimport { toArray, getContentElements, hasLoadingAttribute } from \"./utils\";\n/**\n * @alias eg.ImReady\n * @extends eg.Component\n */\nclass ImReadyManager extends Component<ImReadyEvents> {\n  public options!: ImReadyOptions;\n  private readyCount = 0;\n  private preReadyCount = 0;\n  private totalCount = 0;\n  private totalErrorCount = 0;\n  private isPreReadyOver = true;\n  private elementInfos: ElementInfo[] = [];\n  /**\n   * @param - ImReady's options\n   */\n  constructor(options: Partial<ImReadyOptions> = {}) {\n    super();\n    this.options = {\n      loaders: {},\n      prefix: \"data-\",\n      ...options,\n    };\n  }\n  /**\n   * Checks whether elements are in the ready state.\n   * @ko 엘리먼트가 준비 상태인지 체크한다.\n   * @elements - Elements to check ready status. <ko> 준비 상태를 체크할 엘리먼트들.</ko>\n   * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReadyElement: e => {\n     *     // 1, 3\n     *     // 2, 3\n     *     // 3, 3\n     *     console.log(e.preReadyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n   */\n  public check(elements: ArrayFormat<HTMLElement>): this {\n    const { prefix } = this.options;\n\n    this.clear();\n    this.elementInfos = toArray(elements).map((element, index) => {\n      const loader = this.getLoader(element, { prefix });\n\n      loader.check();\n      loader.on(\"error\", e => {\n        this.onError(index, e.target);\n      }).on(\"preReady\", e => {\n        const info = this.elementInfos[index];\n\n        info.hasLoading = e.hasLoading;\n        info.isSkip = e.isSkip;\n        const isPreReady = this.checkPreReady(index);\n\n        this.onPreReadyElement(index);\n\n        isPreReady && this.onPreReady();\n      }).on(\"ready\", ({ withPreReady, hasLoading, isSkip }) => {\n        const info = this.elementInfos[index];\n\n        info.hasLoading = hasLoading;\n        info.isSkip = isSkip;\n\n        const isPreReady = withPreReady && this.checkPreReady(index);\n        const isReady = this.checkReady(index);\n\n        // Pre-ready and ready occur simultaneously\n        withPreReady && this.onPreReadyElement(index);\n        this.onReadyElement(index);\n\n        isPreReady && this.onPreReady();\n        isReady && this.onReady();\n      });\n\n      return {\n        loader,\n        element,\n        hasLoading: false,\n        hasError: false,\n        isPreReady: false,\n        isReady: false,\n        isSkip: false,\n      };\n    });\n\n    const length = this.elementInfos.length;\n\n    this.totalCount = length;\n    if (!length) {\n      setTimeout(() => {\n        this.onPreReady();\n        this.onReady();\n      });\n    }\n    return this;\n  }\n  /**\n   * Gets the total count of elements to be checked.\n   * @ko 체크하는 element의 총 개수를 가져온다.\n   */\n  public getTotalCount() {\n    return this.totalCount;\n  }\n  /**\n   * Whether the elements are all pre-ready. (all sizes are known)\n   * @ko 엘리먼트들이 모두 사전 준비가 됐는지 (사이즈를 전부 알 수 있는지) 여부.\n   */\n  public isPreReady() {\n    return this.elementInfos.every(info => info.isPreReady);\n  }\n  /**\n   * Whether the elements are all ready.\n   * @ko 엘리먼트들이 모두 준비가 됐는지 여부.\n   */\n  public isReady() {\n    return this.elementInfos.every(info => info.isReady);\n  }\n  /**\n   * Whether an error has occurred in the elements in the current state.\n   * @ko 현재 상태에서 엘리먼트들이 에러가 발생했는지 여부.\n   */\n  public hasError() {\n    return this.totalErrorCount > 0;\n  }\n  /**\n   * Clears events of elements being checked.\n   * @ko 체크 중인 엘리먼트들의 이벤트를 해제 한다.\n   */\n  public clear() {\n    this.isPreReadyOver = false;\n    this.totalCount = 0;\n    this.preReadyCount = 0;\n    this.readyCount = 0;\n    this.totalErrorCount = 0;\n    this.elementInfos.forEach(info => {\n      if (info.loader) {\n        info.loader.destroy();\n      }\n    });\n    this.elementInfos = [];\n  }\n  /**\n   * Destory all events.\n   * @ko 모든 이벤트를 해제 한다.\n   */\n  public destroy() {\n    this.clear();\n    this.off();\n  }\n  private getLoader(element: HTMLElement, options: ImReadyLoaderOptions) {\n    const tagName = element.tagName.toLowerCase();\n    const loaders = this.options.loaders;\n    const prefix = options.prefix;\n    const tags = Object.keys(loaders);\n\n    if (loaders[tagName]) {\n      return new loaders[tagName](element, options);\n    }\n    const loader = new ElementLoader(element, options);\n    const children = toArray(element.querySelectorAll<HTMLElement>(tags.join(\", \")));\n\n    loader.setHasLoading(children.some(el => hasLoadingAttribute(el, prefix)));\n    let withPreReady = false;\n\n    const childrenImReady = this.clone().on(\"error\", e => {\n      loader.onError(e.target);\n    }).on(\"ready\", () => {\n      loader.onReady(withPreReady);\n    });\n\n    loader.on(\"requestChildren\", () => {\n      // has not data size\n      const contentElements = getContentElements(element, tags, this.options.prefix);\n\n      childrenImReady.check(contentElements).on(\"preReady\", e => {\n        withPreReady = e.isReady;\n        if (!withPreReady) {\n          loader.onPreReady();\n        }\n      });\n    }).on(\"reqeustReadyChildren\", () => {\n      // has data size\n      // loader call preReady\n      // check only video, image elements\n      childrenImReady.check(children);\n    }).on(\"requestDestroy\", () => {\n      childrenImReady.destroy();\n    });\n\n    return loader;\n  }\n  private clone() {\n    return new ImReadyManager({ ...this.options });\n  }\n  private checkPreReady(index: number) {\n    this.elementInfos[index].isPreReady = true;\n    ++this.preReadyCount;\n\n\n    if (this.preReadyCount < this.totalCount) {\n      return false;\n    }\n    return true;\n  }\n  private checkReady(index: number) {\n    this.elementInfos[index].isReady = true;\n    ++this.readyCount;\n\n    if (this.readyCount < this.totalCount) {\n      return false;\n    }\n    return true;\n  }\n\n\n  private onError(index: number, target: HTMLElement) {\n    const info = this.elementInfos[index];\n\n    info.hasError = true;\n    /**\n     * An event occurs if the image, video fails to load.\n     * @ko 이미지, 비디오가 로딩에 실패하면 이벤트가 발생한다.\n     * @event eg.ImReady#error\n     * @param {eg.ImReady.OnError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\"/>\n     *    <img src=\"ERR\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check([document.querySelector(\"div\")]).on({\n     *   error: e => {\n     *     // <div>...</div>, 0, <img src=\"ERR\"/>\n     *     console.log(e.element, e.index, e.target),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"error\", {\n      element: info.element,\n      index,\n      target,\n      errorCount: this.getErrorCount(),\n      totalErrorCount: ++this.totalErrorCount,\n    }));\n  }\n  private onPreReadyElement(index: number) {\n    const info = this.elementInfos[index];\n    /**\n     * An event occurs when the element is pre-ready (when the loading attribute is applied or the size is known)\n     * @ko 해당 엘리먼트가 사전 준비되었을 때(loading 속성이 적용되었거나 사이즈를 알 수 있을 때) 이벤트가 발생한다.\n     * @event eg.ImReady#preReadyElement\n     * @param {eg.ImReady.OnPreReadyElement} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReadyElement: e => {\n     *     // 1, 3\n     *     // 2, 3\n     *     // 3, 3\n     *     console.log(e.preReadyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"preReadyElement\", {\n      element: info.element,\n      index,\n\n      preReadyCount: this.preReadyCount,\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n\n      isPreReady: this.isPreReady(),\n      isReady: this.isReady(),\n      hasLoading: info.hasLoading,\n      isSkip: info.isSkip,\n    }));\n  }\n  private onPreReady() {\n    this.isPreReadyOver = true;\n    /**\n     * An event occurs when all element are pre-ready (When all elements have the loading attribute applied or the size is known)\n     * @ko 모든 엘리먼트들이 사전 준비된 경우 (모든 엘리먼트들이 loading 속성이 적용되었거나 사이즈를 알 수 있는 경우) 이벤트가 발생한다.\n     * @event eg.ImReady#preReady\n     * @param {eg.ImReady.OnPreReady} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReady: e => {\n     *     // 0, 3\n     *     console.log(e.readyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"preReady\", {\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n      isReady: this.isReady(),\n      hasLoading: this.hasLoading(),\n    }));\n  }\n  private onReadyElement(index: number) {\n    const info = this.elementInfos[index];\n    /**\n     * An event occurs when the element is ready\n     * @ko 해당 엘리먼트가 준비가 되었을 때 이벤트가 발생한다.\n     * @event eg.ImReady#readyElement\n     * @param {eg.ImReady.OnReadyElement} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   readyElement: e => {\n     *     // 1, 0, false, 3\n     *     // 2, 1, false, 3\n     *     // 3, 2, true, 3\n     *     console.log(e.readyCount, e.index, e.hasError, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"readyElement\", {\n      index,\n      element: info.element,\n\n      hasError: info.hasError,\n      errorCount: this.getErrorCount(),\n      totalErrorCount: this.totalErrorCount,\n\n      preReadyCount: this.preReadyCount,\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n\n      isPreReady: this.isPreReady(),\n      isReady: this.isReady(),\n\n      hasLoading: info.hasLoading,\n      isPreReadyOver: this.isPreReadyOver,\n      isSkip: info.isSkip,\n    }));\n  }\n  private onReady() {\n    /**\n     * An event occurs when all element are ready\n     * @ko 모든 엘리먼트들이 준비된 경우 이벤트가 발생한다.\n     * @event eg.ImReady#ready\n     * @param {eg.ImReady.OnReady} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReady: e => {\n     *     // 0, 3\n     *     console.log(e.readyCount, e.totalCount),\n     *   },\n     *   ready: e => {\n     *     // 1, 3\n     *     console.log(e.errorCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"ready\", {\n      errorCount: this.getErrorCount(),\n      totalErrorCount: this.totalErrorCount,\n      totalCount: this.totalCount,\n    }));\n  }\n  private getErrorCount() {\n    return this.elementInfos.filter(info => info.hasError).length;\n  }\n  private hasLoading() {\n    return this.elementInfos.some(info => info.hasLoading);\n  }\n}\n\nexport default ImReadyManager;\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport { IS_IE } from \"../consts\";\nimport Loader from \"./Loader\";\n\nexport default class ImageLoader extends Loader<HTMLImageElement> {\n  public static EVENTS = [\"load\", \"error\"];\n  public checkElement() {\n    const element = this.element;\n    const src = element.getAttribute(\"src\");\n\n    if (element.complete) {\n      if (src) {\n        // complete\n        if (!element.naturalWidth) {\n          this.onAlreadyError(element);\n        }\n        return false;\n      } else {\n        // Using an external lazy loading module\n        this.onAlreadyPreReady();\n      }\n    }\n    this.addEvents();\n    IS_IE && element.setAttribute(\"src\", src!);\n    return true;\n  }\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport Loader from \"./Loader\";\n\nexport default class VideoLoader extends Loader<HTMLVideoElement> {\n  public static EVENTS = [\"loadedmetadata\", \"error\"];\n  public checkElement() {\n    const element = this.element;\n    // HAVE_NOTHING: 0, no information whether or not the audio/video is ready\n    // HAVE_METADATA: 1, HAVE_METADATA - metadata for the audio/video is ready\n    // HAVE_CURRENT_DATA: 2, data for the current playback position is available, but not enough data to play next frame/millisecond\n    // HAVE_FUTURE_DATA: 3, data for the current and at least the next frame is available\n    // HAVE_ENOUGH_DATA: 4, enough data available to start playing\n    if (element.readyState >= 1) {\n      return false;\n    }\n    if (element.error) {\n      this.onAlreadyError(element);\n      return false;\n    }\n    this.addEvents();\n    return true;\n  }\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport ImReadyManager from \"./ImReadyManager\";\nimport ImageLoader from \"./loaders/ImageLoader\";\nimport VideoLoader from \"./loaders/VideoLoader\";\nimport { ImReadyOptions } from \"./types\";\n\nclass ImReady extends ImReadyManager {\n  constructor(options: Partial<ImReadyOptions> = {}) {\n    super({\n      loaders: {\n        img: ImageLoader,\n        video: VideoLoader,\n      },\n      ...options,\n    });\n  }\n}\n\nexport default ImReady;\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport ImReady from \"./ImReady\";\nimport Manager from \"./ImReadyManager\";\nimport Loader from \"./loaders/Loader\";\nimport ImageLoader from \"./loaders/ImageLoader\";\nimport VideoLoader from \"./loaders/VideoLoader\";\n\nexport default ImReady;\nexport {\n  Manager,\n  VideoLoader,\n  ImageLoader,\n  Loader,\n};\nexport {\n  EVENTS,\n  PROPS,\n} from \"./consts\";\nexport * from \"./types\";\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.\n * @ko {@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.\n * @name ERROR_CODE\n * @constant\n * @type object\n * @property {number} WRONG_TYPE Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>\n * @property {number} ELEMENT_NOT_FOUND Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>\n * @property {number} VAL_MUST_NOT_NULL Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>\n * @property {number} NOT_ATTACHED_TO_FLICKING When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>\n * @property {number} WRONG_OPTION One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>\n * @property {number} INDEX_OUT_OF_RANGE When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>\n * @property {number} POSITION_NOT_REACHABLE When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>\n * @property {number} TRANSFORM_NOT_SUPPORTED CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>\n * @property {number} STOP_CALLED_BY_USER When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>\n * @property {number} ANIMATION_INTERRUPTED When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>\n * @property {number} ANIMATION_ALREADY_PLAYING When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>\n * @property {number} NOT_ALLOWED_IN_FRAMEWORK When the non-allowed method is called from frameworks (React, Angular, Vue...)\n * <ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>\n * @property {number} NOT_INITIALIZED When the {@link Flicking#init} is not called before but is needed<ko>{@link Flicking#init}의 호출이 필요하나, 아직 호출되지 않았을 경우</ko>\n * @property {number} NO_ACTIVE When there're no active panel that flicking has selected. This may be due to the absence of any panels<ko>현재 Flicking이 선택한 패널이 없을 경우. 일반적으로 패널이 하나도 없는 경우에 발생할 수 있습니다</ko>\n * @property {number} NOT_ALLOWED_IN_VIRTUAL When the non-allowed method is called while the virtual option is enabled<ko>virtual 옵션이 활성화된 상태에서 사용 불가능한 메소드가 호출되었을 경우</ko>\n */\nexport const CODE = {\n  WRONG_TYPE: 0,\n  ELEMENT_NOT_FOUND: 1,\n  VAL_MUST_NOT_NULL: 2,\n  NOT_ATTACHED_TO_FLICKING: 3,\n  WRONG_OPTION: 4,\n  INDEX_OUT_OF_RANGE: 5,\n  POSITION_NOT_REACHABLE: 6,\n  TRANSFORM_NOT_SUPPORTED: 7,\n  STOP_CALLED_BY_USER: 8,\n  ANIMATION_INTERRUPTED: 9,\n  ANIMATION_ALREADY_PLAYING: 10,\n  NOT_ALLOWED_IN_FRAMEWORK: 11,\n  NOT_INITIALIZED: 12,\n  NO_ACTIVE: 13,\n  NOT_ALLOWED_IN_VIRTUAL: 14\n} as const;\n\nexport const MESSAGE = {\n  WRONG_TYPE: (wrongVal: any, correctTypes: string[]) => `${wrongVal}(${typeof wrongVal}) is not a ${correctTypes.map(type => `\"${type}\"`).join(\" or \")}.`,\n  ELEMENT_NOT_FOUND: (selector: string) => `Element with selector \"${selector}\" not found.`,\n  VAL_MUST_NOT_NULL: (val: any, name: string) => `${name} should be provided. Given: ${val}`,\n  NOT_ATTACHED_TO_FLICKING: \"This module is not attached to the Flicking instance. \\\"init()\\\" should be called first.\",\n  WRONG_OPTION: (optionName: string, val: any) => `Option \"${optionName}\" is not in correct format, given: ${val}`,\n  INDEX_OUT_OF_RANGE: (val: number, min: number, max: number) => `Index \"${val}\" is out of range: should be between ${min} and ${max}.`,\n  POSITION_NOT_REACHABLE: (position: number) => `Position \"${position}\" is not reachable.`,\n  TRANSFORM_NOT_SUPPORTED: \"Browser does not support CSS transform.\",\n  STOP_CALLED_BY_USER: \"Event stop() is called by user.\",\n  ANIMATION_INTERRUPTED: \"Animation is interrupted by user input.\",\n  ANIMATION_ALREADY_PLAYING: \"Animation is already playing.\",\n  NOT_ALLOWED_IN_FRAMEWORK: \"This behavior is not allowed in the frameworks like React, Vue, or Angular.\",\n  NOT_INITIALIZED: \"Flicking is not initialized yet, call init() first.\",\n  NO_ACTIVE: \"There's no active panel that Flicking has selected. This may be due to the absence of any panels.\",\n  NOT_ALLOWED_IN_VIRTUAL: \"This behavior is not allowed when the virtual option is enabled\"\n} as const;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { CODE as ERROR_CODE } from \"./error\";\n\n/**\n * Event type object with event name strings of {@link Flicking}\n * @ko {@link Flicking}의 이벤트 이름 문자열들을 담은 객체\n * @type {object}\n * @property {\"holdStart\"} HOLD_START holdStart event<ko>holdStart 이벤트</ko>\n * @property {\"holdEnd\"} HOLD_END holdEnd event<ko>holdEnd 이벤트</ko>\n * @property {\"moveStart\"} MOVE_START moveStart event<ko>moveStart 이벤트</ko>\n * @property {\"move\"} MOVE move event<ko>move 이벤트</ko>\n * @property {\"moveEnd\"} MOVE_END moveEnd event<ko>moveEnd 이벤트</ko>\n * @property {\"willChange\"} WILL_CHANGE willChange event<ko>willChange 이벤트</ko>\n * @property {\"changed\"} CHANGED changed event<ko>changed 이벤트</ko>\n * @property {\"willRestore\"} WILL_RESTORE willRestore event<ko>willRestore 이벤트</ko>\n * @property {\"restored\"} RESTORED restored event<ko>restored 이벤트</ko>\n * @property {\"select\"} SELECT select event<ko>select 이벤트</ko>\n * @property {\"needPanel\"} NEED_PANEL needPanel event<ko>needPanel 이벤트</ko>\n * @property {\"panelChange\"} PANEL_CHANGE panelChange event<ko>panelChange 이벤트</ko>\n * @example\n * ```ts\n * import { EVENTS } from \"@egjs/flicking\";\n * EVENTS.MOVE_START; // \"moveStart\"\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  BEFORE_RESIZE: \"beforeResize\",\n  AFTER_RESIZE: \"afterResize\",\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  WILL_CHANGE: \"willChange\",\n  CHANGED: \"changed\",\n  WILL_RESTORE: \"willRestore\",\n  RESTORED: \"restored\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n  REACH_EDGE: \"reachEdge\",\n  PANEL_CHANGE: \"panelChange\"\n} as const;\n\n/**\n * An object with all possible predefined literal string for the {@link Flicking#align align} option\n * @ko {@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체\n * @type {object}\n * @property {\"prev\"} PREV left/top align<ko>좌/상 정렬</ko>\n * @property {\"center\"} CENTER center align<ko>중앙 정렬</ko>\n * @property {\"next\"} NEXT right/bottom align<ko>우/하 정렬</ko>\n */\nexport const ALIGN = {\n  PREV: \"prev\",\n  CENTER: \"center\",\n  NEXT: \"next\"\n} as const;\n\n/**\n * An object of directions\n * @ko 방향을 나타내는 값들을 담고 있는 객체\n * @type {object}\n * @property {\"PREV\"} PREV \"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>\n * @property {\"NEXT\"} NEXT \"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>\n * @property {null} NONE This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>\n */\nexport const DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  NONE: null\n} as const;\n\n/**\n * An object with all possible {@link Flicking#moveType moveType}s\n * @ko Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체\n * @type {object}\n * @property {\"snap\"} SNAP Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"freeScroll\"} FREE_SCROLL Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"strict\"} STRICT Flicking's {@link Flicking#moveType moveType} that enables {@link StrictControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link StrictControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n */\nexport const MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n  STRICT: \"strict\"\n} as const;\n\nexport const CLASS = {\n  VERTICAL: \"vertical\",\n  HIDDEN: \"flicking-hidden\",\n  DEFAULT_VIRTUAL: \"flicking-panel\"\n};\n\n/**\n * An object with all possible {@link Flicking#circularFallback circularFallback}s\n * @ko Flicking의 {@link Flicking#circularFallback circularFallback}에 설정 가능한 값들을 담고 있는 객체\n * @type {object}\n * @property {string} LINEAR \"linear\"\n * @property {string} BOUND \"bound\"\n */\nexport const CIRCULAR_FALLBACK = {\n  LINEAR: \"linear\",\n  BOUND: \"bound\"\n} as const;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking, { FlickingOptions } from \"./Flicking\";\nimport FlickingError from \"./core/FlickingError\";\nimport * as ERROR from \"./const/error\";\nimport { ALIGN, DIRECTION } from \"./const/external\";\nimport { LiteralUnion, Merged, ValueOf } from \"./type/internal\";\nimport { ElementLike } from \"./type/external\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      target[key] = source[key] as unknown;\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const getElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n    if (!queryResult) {\n      throw new FlickingError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  if (!targetEl) {\n    throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  return targetEl;\n};\n\nexport const checkExistence = (value: any, nameOnErrMsg: string) => {\n  if (value == null) {\n    throw new FlickingError(ERROR.MESSAGE.VAL_MUST_NOT_NULL(value, nameOnErrMsg), ERROR.CODE.VAL_MUST_NOT_NULL);\n  }\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getFlickingAttached = (val: Flicking | null): Flicking => {\n  if (!val) {\n    throw new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING, ERROR.CODE.NOT_ATTACHED_TO_FLICKING);\n  }\n\n  return val;\n};\n\nexport const toArray = <T>(iterable: ArrayLike<T>): T[] => [].slice.call(iterable) as T[];\n\nexport const parseAlign = (align: LiteralUnion<ValueOf<typeof ALIGN>> | number, size: number): number => {\n  let alignPoint: number | null;\n  if (isString(align)) {\n    switch (align) {\n      case ALIGN.PREV:\n        alignPoint = 0;\n        break;\n      case ALIGN.CENTER:\n        alignPoint = 0.5 * size;\n        break;\n      case ALIGN.NEXT:\n        alignPoint = size;\n        break;\n      default:\n        alignPoint = parseArithmeticSize(align, size);\n        if (alignPoint == null) {\n          throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"align\", align), ERROR.CODE.WRONG_OPTION);\n        }\n    }\n  } else {\n    alignPoint = align as number;\n  }\n\n  return alignPoint;\n};\n\nexport const parseBounce = (bounce: FlickingOptions[\"bounce\"], size: number): number[] => {\n  let parsedBounce: Array<number | null>;\n\n  if (Array.isArray(bounce)) {\n    parsedBounce = (bounce as string[]).map(val => parseArithmeticSize(val, size));\n  } else {\n    const parsedVal = parseArithmeticSize(bounce, size);\n\n    parsedBounce = [parsedVal, parsedVal];\n  }\n\n  return parsedBounce.map(val => {\n    if (val == null) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"bounce\", bounce), ERROR.CODE.WRONG_OPTION);\n    }\n    return val;\n  });\n};\n\nexport const parseArithmeticSize = (cssValue: number | string, base: number): number | null => {\n  const parsed = parseArithmeticExpression(cssValue);\n\n  if (parsed == null) return null;\n\n  return parsed.percentage * base + parsed.absolute;\n};\n\nexport const parseArithmeticExpression = (cssValue: number | string): { percentage: number; absolute: number } | null => {\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return { percentage: 0, absolute: cssValue };\n  }\n\n  const parsed = {\n    percentage: 0,\n    absolute: 0\n  };\n  let idx = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n    const parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return null;\n    }\n\n    const signMultiplier = sign === \"+\" ? 1 : -1;\n\n    if (unit === \"%\") {\n      parsed.percentage += signMultiplier * (parsedValue / 100);\n    } else {\n      parsed.absolute += signMultiplier * parsedValue;\n    }\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return null;\n  }\n\n  return parsed;\n};\n\nexport const parseCSSSizeValue = (val: string | number): string => isString(val) ? val : `${val}px`;\n\nexport const parsePanelAlign = (align: FlickingOptions[\"align\"]) => typeof align === \"object\"\n  ? (align as { panel: string | number }).panel\n  : align;\n\nexport const getDirection = (start: number, end: number): ValueOf<typeof DIRECTION> => {\n  if (start === end) return DIRECTION.NONE;\n  return start < end ? DIRECTION.NEXT : DIRECTION.PREV;\n};\n\nexport const parseElement = (element: ElementLike | ElementLike[]): HTMLElement[] => {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n      elements.push(el);\n    } else {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n    }\n  });\n\n  return elements;\n};\n\nexport const getMinusCompensatedIndex = (idx: number, max: number) => idx < 0 ? clamp(idx + max, 0, max) : clamp(idx, 0, max);\n\nexport const includes = <T>(array: T[], target: any): target is T => {\n  for (const val of array) {\n    if (val === target) return true;\n  }\n  return false;\n};\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\n\nexport const circulatePosition = (pos: number, min: number, max: number) => {\n  const size = max - min;\n\n  if (pos < min) {\n    const offset = (min - pos) % size;\n    pos = max - offset;\n  } else if (pos > max) {\n    const offset = (pos - max) % size;\n    pos = min + offset;\n  }\n\n  return pos;\n};\n\nexport const find = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (const val of array) {\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findRight = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const val = array[idx];\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getProgress = (pos: number, prev: number, next: number) => (pos - prev) / (next - prev);\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const getStyle = (el: HTMLElement): CSSStyleDeclaration => window.getComputedStyle(el) || (el as any).currentStyle as CSSStyleDeclaration;\n\nexport const setSize = (el: HTMLElement, { width, height }: Partial<{\n  width: number | string;\n  height: number | string;\n}>) => {\n  if (width != null) {\n    if (isString(width)) {\n      el.style.width = width;\n    } else {\n      el.style.width = `${width}px`;\n    }\n  }\n  if (height != null) {\n    if (isString(height)) {\n      el.style.height = height;\n    } else {\n      el.style.height = `${height}px`;\n    }\n  }\n};\n\nexport const isBetween = (val: number, min: number, max: number) => val >= min && val <= max;\n\nexport const circulateIndex = (index: number, max: number): number => {\n  if (index >= max) {\n    return index % max;\n  } else if (index < 0) {\n    return getMinusCompensatedIndex((index + 1) % max - 1, max);\n  } else {\n    return index;\n  }\n};\n\nexport const range = (end: number): number[] => {\n  const arr = new Array(end);\n\n  for (let i = 0; i < end; i++) {\n    arr[i] = i;\n  }\n\n  return arr;\n};\n\nexport const getElementSize = ({\n  el,\n  horizontal,\n  useFractionalSize,\n  useOffset,\n  style\n}: {\n  el: HTMLElement;\n  horizontal: boolean;\n  useFractionalSize: boolean;\n  useOffset: boolean;\n  style: CSSStyleDeclaration;\n}): number => {\n  if (useFractionalSize) {\n    const baseSize = parseFloat(horizontal ? style.width : style.height);\n    const isBorderBoxSizing = style.boxSizing === \"border-box\";\n    const border = horizontal\n      ? parseFloat(style.borderLeftWidth || \"0\") + parseFloat(style.borderRightWidth || \"0\")\n      : parseFloat(style.borderTopWidth || \"0\") + parseFloat(style.borderBottomWidth || \"0\");\n\n    if (isBorderBoxSizing) {\n      return useOffset\n        ? baseSize\n        : baseSize - border;\n    } else {\n      const padding = horizontal\n        ? parseFloat(style.paddingLeft || \"0\") + parseFloat(style.paddingRight || \"0\")\n        : parseFloat(style.paddingTop || \"0\") + parseFloat(style.paddingBottom || \"0\");\n\n      return useOffset\n        ? baseSize + padding + border\n        : baseSize + padding;\n    }\n  } else {\n    const sizeStr = horizontal ? \"Width\" : \"Height\";\n\n    return useOffset\n      ? el[`offset${sizeStr}`]\n      : el[`client${sizeStr}`];\n  }\n};\n\nexport const setPrototypeOf = Object.setPrototypeOf || ((obj, proto) => {\n  obj.__proto__ = proto;\n  return obj;\n});\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { setPrototypeOf } from \"../utils\";\n\n/**\n * Special type of known error that {@link Flicking} throws.\n * @ko Flicking 내부에서 알려진 오류 발생시 throw되는 에러\n * @property {number} code Error code<ko>에러 코드</ko>\n * @property {string} message Error message<ko>에러 메시지</ko>\n * @see {@link ERROR_CODE ERROR_CODE}\n * @example\n * ```ts\n * import Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\n * try {\n *   const flicking = new Flicking(\".flicking-viewport\")\n * } catch (e) {\n *   if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n *     console.error(\"Element not found\")\n *   }\n * }\n * ```\n */\nclass FlickingError extends Error {\n  public code: number;\n\n  /**\n   * @param message Error message<ko>에러 메시지</ko>\n   * @param code Error code<ko>에러 코드</ko>\n   */\n  public constructor(message: string, code: number) {\n    super(message);\n\n    setPrototypeOf(this, FlickingError.prototype);\n    this.name = \"FlickingError\";\n    this.code = code;\n  }\n}\n\nexport default FlickingError;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../Flicking\";\nimport { getElementSize, getStyle, isString } from \"../utils\";\n\n/**\n * A component that manages viewport size\n * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n */\nclass Viewport {\n  private _flicking: Flicking;\n  private _el: HTMLElement;\n  private _width: number;\n  private _height: number;\n  private _isBorderBoxSizing: boolean;\n  private _padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n\n  /**\n   * A viewport(root) element\n   * @ko 뷰포트(root) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  /**\n   * Viewport width, without paddings\n   * @ko 뷰포트 너비\n   * @type {number}\n   * @readonly\n   */\n  public get width() { return this._width - this._padding.left - this._padding.right; }\n  /**\n   * Viewport height, without paddings\n   * @ko 뷰포트 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height - this._padding.top - this._padding.bottom; }\n  /**\n   * Viewport paddings\n   * @ko 뷰포트 CSS padding 값\n   * @type {object}\n   * @property {number} left CSS `padding-left`\n   * @property {number} right CSS `padding-right`\n   * @property {number} top CSS `padding-top`\n   * @property {number} bottom CSS `padding-bottom`\n   * @readonly\n   */\n  public get padding() { return this._padding; }\n\n  /**\n   * @param el A viewport element<ko>뷰포트 엘리먼트</ko>\n   */\n  public constructor(flicking: Flicking, el: HTMLElement) {\n    this._flicking = flicking;\n    this._el = el;\n    this._width = 0;\n    this._height = 0;\n    this._padding = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this._isBorderBoxSizing = false;\n  }\n\n  /**\n   * Change viewport's size.\n   * This will change the actual size of `.flicking-viewport` element by changing its CSS width/height property\n   * @ko 뷰포트 크기를 변경합니다.\n   * `.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New viewport size<ko>새 뷰포트 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    const el = this._el;\n    const padding = this._padding;\n    const isBorderBoxSizing = this._isBorderBoxSizing;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        const newWidth = isBorderBoxSizing\n          ? width + padding.left + padding.right\n          : width;\n        el.style.width = `${newWidth}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        const newHeight = isBorderBoxSizing\n          ? height + padding.top + padding.bottom\n          : height;\n        el.style.height = `${newHeight}px`;\n      }\n    }\n    this.resize();\n  }\n\n  /**\n   * Update width/height to the current viewport element's size\n   * @ko 현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다\n   */\n  public resize() {\n    const el = this._el;\n    const elStyle = getStyle(el);\n    const {\n      useFractionalSize\n    } = this._flicking;\n\n    this._width = getElementSize({\n      el,\n      horizontal: true,\n      useFractionalSize,\n      useOffset: false,\n      style: elStyle\n    });\n    this._height = getElementSize({\n      el,\n      horizontal: false,\n      useFractionalSize,\n      useOffset: false,\n      style: elStyle\n    });\n\n    this._padding = {\n      left: elStyle.paddingLeft ? parseFloat(elStyle.paddingLeft) : 0,\n      right: elStyle.paddingRight ? parseFloat(elStyle.paddingRight) : 0,\n      top: elStyle.paddingTop ? parseFloat(elStyle.paddingTop) : 0,\n      bottom: elStyle.paddingBottom ? parseFloat(elStyle.paddingBottom) : 0\n    };\n    this._isBorderBoxSizing = elStyle.boxSizing === \"border-box\";\n  }\n}\n\nexport default Viewport;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../Flicking\";\n\nclass AutoResizer {\n  private _flicking: Flicking;\n  private _enabled: boolean;\n  private _resizeObserver: ResizeObserver | null;\n  private _resizeTimer: number;\n  private _maxResizeDebounceTimer: number;\n\n  public get enabled() { return this._enabled; }\n\n  public constructor(flicking: Flicking) {\n    this._flicking = flicking;\n    this._enabled = false;\n    this._resizeObserver = null;\n    this._resizeTimer = -1;\n    this._maxResizeDebounceTimer = -1;\n  }\n\n  public enable(): this {\n    const flicking = this._flicking;\n    const viewport = flicking.viewport;\n\n    if (this._enabled) {\n      this.disable();\n    }\n\n    if (flicking.useResizeObserver && !!window.ResizeObserver) {\n      const viewportSizeNot0 = viewport.width !== 0 || viewport.height !== 0;\n\n      const resizeObserver = viewportSizeNot0\n        ? new ResizeObserver(this._skipFirstResize)\n        : new ResizeObserver(this._onResize);\n\n      resizeObserver.observe(flicking.viewport.element);\n\n      this._resizeObserver = resizeObserver;\n    } else {\n      window.addEventListener(\"resize\", this._onResize);\n    }\n\n    this._enabled = true;\n\n    return this;\n  }\n\n  public disable(): this {\n    if (!this._enabled) return this;\n\n    const resizeObserver = this._resizeObserver;\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      this._resizeObserver = null;\n    } else {\n      window.removeEventListener(\"resize\", this._onResize);\n    }\n\n    this._enabled = false;\n\n    return this;\n  }\n\n  private _onResize = () => {\n    const flicking = this._flicking;\n    const resizeDebounce = flicking.resizeDebounce;\n    const maxResizeDebounce = flicking.maxResizeDebounce;\n\n    if (resizeDebounce <= 0) {\n      void flicking.resize();\n    } else {\n      if (this._maxResizeDebounceTimer <= 0) {\n        if (maxResizeDebounce > 0 && maxResizeDebounce >= resizeDebounce) {\n          this._maxResizeDebounceTimer = window.setTimeout(this._doScheduledResize, maxResizeDebounce);\n        }\n      }\n\n      if (this._resizeTimer > 0) {\n        clearTimeout(this._resizeTimer);\n        this._resizeTimer = 0;\n      }\n\n      this._resizeTimer = window.setTimeout(this._doScheduledResize, resizeDebounce);\n    }\n  };\n\n  private _doScheduledResize = () => {\n    clearTimeout(this._resizeTimer);\n    clearTimeout(this._maxResizeDebounceTimer);\n\n    this._maxResizeDebounceTimer = -1;\n    this._resizeTimer = -1;\n\n    void this._flicking.resize();\n  };\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  private _skipFirstResize = (() => {\n    let isFirstResize = true;\n\n    return (() => {\n      if (isFirstResize) {\n        isFirstResize = false;\n        return;\n      }\n      this._onResize();\n    });\n  })();\n}\n\nexport default AutoResizer;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../../Flicking\";\n\nimport ElementProvider from \"./ElementProvider\";\n\n/**\n * @internal\n */\nclass VanillaElementProvider implements ElementProvider {\n  private _element: HTMLElement;\n  private _rendered: boolean;\n\n  public get element() { return this._element; }\n  public get rendered() { return this._rendered; }\n\n  public constructor(element: HTMLElement) {\n    this._element = element;\n    this._rendered = true;\n  }\n\n  public show(flicking: Flicking): void {\n    const el = this.element;\n    const cameraEl = flicking.camera.element;\n\n    if (el.parentElement !== cameraEl) {\n      cameraEl.appendChild(el);\n      this._rendered = true;\n    }\n  }\n\n  public hide(flicking: Flicking): void {\n    const el = this.element;\n    const cameraEl = flicking.camera.element;\n\n    if (el.parentElement === cameraEl) {\n      cameraEl.removeChild(el);\n      this._rendered = false;\n    }\n  }\n}\n\nexport default VanillaElementProvider;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Flicking from \"../../../Flicking\";\nimport VirtualPanel from \"../VirtualPanel\";\n\nimport ElementProvider from \"./ElementProvider\";\n\n/**\n * @internal\n */\nclass VirtualElementProvider implements ElementProvider {\n  private _flicking: Flicking;\n  private _panel: VirtualPanel;\n\n  public get element() { return this._virtualElement.nativeElement; }\n  public get rendered() { return this._virtualElement.visible; }\n\n  private get _virtualElement() {\n    const flicking = this._flicking;\n    const elIndex = this._panel.elementIndex;\n    const virtualElements = flicking.virtual.elements;\n\n    return virtualElements[elIndex];\n  }\n\n  public constructor(flicking: Flicking) {\n    this._flicking = flicking;\n  }\n\n  public init(panel: VirtualPanel) {\n    this._panel = panel;\n  }\n\n  public show(): void {\n    // DO_NOTHING\n    // Actual element visibility is controlled by VirtualManager\n  }\n\n  public hide(): void {\n    // DO_NOTHING\n    // Actual element visibility is controlled by VirtualManager\n  }\n}\n\nexport default VirtualElementProvider;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../Flicking\";\nimport { range } from \"../utils\";\nimport { CLASS } from \"../const/external\";\n\nimport VirtualPanel from \"./panel/VirtualPanel\";\n\nexport interface VirtualOptions {\n  renderPanel: (panel: VirtualPanel, index: number) => string;\n  initialPanelCount: number;\n  cache?: boolean;\n  panelClass?: string;\n}\n\n/**\n * A manager class to add / remove virtual panels\n */\nclass VirtualManager {\n  private _flicking: Flicking;\n\n  private _renderPanel: (panel: VirtualPanel, index: number) => string;\n  private _initialPanelCount: number;\n  private _cache: boolean;\n  private _panelClass: string;\n\n  private _elements: Array<{ nativeElement: HTMLElement; visible: boolean }>;\n\n  public get elements() { return this._elements; }\n\n  // Options\n  /**\n   * A rendering function for the panel element's innerHTML\n   * @ko 패널 엘리먼트의 innerHTML을 렌더링하는 함수\n   * @type {function}\n   * @param {VirtualPanel} panel Instance of the panel<ko>패널 인스턴스</ko>\n   * @param {number} index Index of the panel<ko>패널 인덱스</ko>\n   * @default \"() => {}\"\n   */\n  public get renderPanel() { return this._renderPanel; }\n  /**\n   * Initial panel count to render\n   * @ko 최초로 렌더링할 패널의 개수\n   * @readonly\n   * @type {number}\n   * @default -1\n   */\n  public get initialPanelCount() { return this._initialPanelCount; }\n  /**\n   * Whether to cache rendered panel's innerHTML\n   * @ko 렌더링된 패널의 innerHTML 정보를 캐시할지 여부\n   * @type {boolean}\n   * @default false\n   */\n  public get cache() { return this._cache; }\n  /**\n   * The class name that will be applied to rendered panel elements\n   * @ko 렌더링되는 패널 엘리먼트에 적용될 클래스 이름\n   * @type {string}\n   * @default \"flicking-panel\"\n   */\n  public get panelClass() { return this._panelClass; }\n\n  public set renderPanel(val: VirtualOptions[\"renderPanel\"]) {\n    this._renderPanel = val;\n    this._flicking.renderer.panels.forEach((panel: VirtualPanel) => panel.uncacheRenderResult());\n  }\n\n  public set cache(val: NonNullable<VirtualOptions[\"cache\"]>) { this._cache = val; }\n  public set panelClass(val: NonNullable<VirtualOptions[\"panelClass\"]>) { this._panelClass = val; }\n\n  public constructor(flicking: Flicking, options: VirtualOptions | null) {\n    this._flicking = flicking;\n\n    this._renderPanel = options?.renderPanel ?? (() => \"\");\n    this._initialPanelCount = options?.initialPanelCount ?? -1;\n    this._cache = options?.cache ?? false;\n    this._panelClass = options?.panelClass ?? CLASS.DEFAULT_VIRTUAL;\n\n    this._elements = [];\n  }\n\n  public init() {\n    const flicking = this._flicking;\n\n    if (!flicking.virtualEnabled) return;\n\n    if (!flicking.externalRenderer && !flicking.renderExternal) {\n      this._initVirtualElements();\n    }\n\n    const virtualElements = flicking.camera.children;\n    this._elements = virtualElements.map(el => ({ nativeElement: el, visible: true }));\n  }\n\n  public show(index: number) {\n    const el = this._elements[index];\n    const nativeEl = el.nativeElement;\n\n    el.visible = true;\n\n    if (nativeEl.style.display) {\n      nativeEl.style.display = \"\";\n    }\n  }\n\n  public hide(index: number) {\n    const el = this._elements[index];\n    const nativeEl = el.nativeElement;\n\n    el.visible = false;\n    nativeEl.style.display = \"none\";\n  }\n\n  /**\n   * Add new virtual panels at the end of the list\n   * @ko 새로운 가상 패널들을 리스트의 끝에 추가합니다\n   * @param {number} count The number of panels to add<ko>추가할 패널의 개수</ko>\n   * @returns {Array<VirtualPanel>} The new panels added<ko>새롭게 추가된 패널들</ko>\n   */\n  public append(count: number = 1): VirtualPanel[] {\n    const flicking = this._flicking;\n\n    return this.insert(flicking.panels.length, count);\n  }\n\n  /**\n   * Add new virtual panels at the start of the list\n   * @ko 새로운 가상 패널들을 리스트의 시작에 추가합니다\n   * @param {number} count The number of panels to add<ko>추가할 패널의 개수</ko>\n   * @returns {Array<VirtualPanel>} The new panels added<ko>새롭게 추가된 패널들</ko>\n   */\n  public prepend(count: number = 1): VirtualPanel[] {\n    return this.insert(0, count);\n  }\n\n  /**\n   * Add new virtual panels at the given index\n   * @ko 새로운 가상 패널들을 주어진 인덱스에 추가합니다\n   * @param {number} count The number of panels to add<ko>추가할 패널의 개수</ko>\n   * @returns {Array<VirtualPanel>} The new panels added<ko>새롭게 추가된 패널들</ko>\n   */\n  public insert(index: number, count: number = 1): VirtualPanel[] {\n    if (count <= 0) return [];\n\n    const flicking = this._flicking;\n\n    return flicking.renderer.batchInsert({ index, elements: range(count), hasDOMInElements: false }) as VirtualPanel[];\n  }\n\n  /**\n   * Remove panels at the given index\n   * @ko 주어진 인덱스에서 패널들을 삭제합니다\n   * @param {number} count The number of panels to remove<ko>삭제할 패널의 개수</ko>\n   * @returns {Array<VirtualPanel>} The panels removed<ko>삭제된 패널들</ko>\n   */\n  public remove(index: number, count: number): VirtualPanel[] {\n    if (count <= 0) return [];\n\n    const flicking = this._flicking;\n\n    return flicking.renderer.batchRemove({ index, deleteCount: count, hasDOMInElements: false }) as VirtualPanel[];\n  }\n\n  private _initVirtualElements() {\n    const flicking = this._flicking;\n    const cameraElement = flicking.camera.element;\n    const panelsPerView = flicking.panelsPerView;\n    const fragment = document.createDocumentFragment();\n\n    const newElements = range(panelsPerView + 1).map(idx => {\n      const panelEl = document.createElement(\"div\");\n      panelEl.className = this._panelClass;\n      panelEl.dataset.elementIndex = idx.toString();\n      return panelEl;\n    });\n\n    newElements.forEach(el => {\n      fragment.appendChild(el);\n    });\n\n    cameraElement.appendChild(fragment);\n  }\n}\n\nexport default VirtualManager;\n", "/**\n * All possible @egjs/axes event keys\n * @internal\n */\nexport const EVENT = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n} as const;\n\n/**\n * An Axis key that Flicking uses\n * @internal\n */\nexport const POSITION_KEY = \"flick\";\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OnAnimationEnd, OnChange, OnFinish, OnHold, OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../../Flicking\";\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\nimport { circulatePosition, getDirection } from \"../../utils\";\n\nexport enum STATE_TYPE {\n  IDLE,\n  HOLDING,\n  DRAGGING,\n  ANIMATING,\n  DISABLED\n}\n\n/**\n * A component that shows the current status of the user input or the animation\n * @ko 현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트\n * @internal\n */\nabstract class State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly holding: boolean;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly animating: boolean;\n\n  protected _delta: number = 0;\n  protected _targetPanel: Panel | null = null;\n\n  /**\n   * A sum of delta values of change events from the last hold event of Axes\n   * @ko 이전 hold이벤트부터 change에 의해 발생한 이동 delta값의 합산\n   * @type {number}\n   * @readonly\n   */\n  public get delta() { return this._delta; }\n\n  /**\n   * A panel to set as {@link Control#activePanel} after the animation is finished\n   * @ko 애니메이션 종료시 {@link Control#activePanel}로 설정할 패널\n   * @type {number}\n   * @readonly\n   */\n  public get targetPanel() { return this._targetPanel; }\n\n  public set targetPanel(val: Panel | null) { this._targetPanel = val; }\n\n  /**\n   * An callback which is called when state has changed to this state\n   * @ko 현재 상태로 돌입했을때 호출되는 콜백 함수\n   * @param {State} prevState An previous state<ko>이전 상태값</ko>\n   * @return {void}\n   */\n  public onEnter(prevState: State): void {\n    this._delta = prevState._delta;\n    this._targetPanel = prevState._targetPanel;\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onHold(ctx: {\n    flicking: Flicking;\n    axesEvent: OnHold;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onChange(ctx: {\n    flicking: Flicking;\n    axesEvent: OnChange;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onRelease(ctx: {\n    flicking: Flicking;\n    axesEvent: OnRelease;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onAnimationEnd(ctx: {\n    flicking: Flicking;\n    axesEvent: OnAnimationEnd;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onFinish(ctx: {\n    flicking: Flicking;\n    axesEvent: OnFinish;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  protected _moveToChangedPosition(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const delta = axesEvent.delta[AXES.POSITION_KEY];\n\n    if (!delta) {\n      return;\n    }\n\n    this._delta += delta;\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n    const position = axesEvent.pos[AXES.POSITION_KEY];\n    const newPosition = flicking.circularEnabled\n      ? circulatePosition(position, camera.range.min, camera.range.max)\n      : position;\n\n    camera.lookAt(newPosition);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta[AXES.POSITION_KEY]),\n      axesEvent\n    });\n\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n}\n\nexport default State;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A default state when there's no user input and no animation's playing\n * @ko 사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태\n * @internal\n */\nclass IdleState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  public onEnter() {\n    this._delta = 0;\n    this._targetPanel = null;\n  }\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    // Shouldn't do any action until any panels on flicking area\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (flicking.renderer.panelCount <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, {\n      axesEvent\n    });\n\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.HOLDING);\n    }\n  }\n\n  // By methods call\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(ctx);\n    }\n  }\n}\n\nexport default IdleState;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's holding the Flicking area, but not moved a single pixel yet\n * @ko 사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태\n * @internal\n */\nclass HoldingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  private _releaseEvent: OnRelease | null = null;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const inputEvent = axesEvent.inputEvent as { offsetX: number; offsetY: number };\n\n    const offset = flicking.horizontal\n      ? inputEvent.offsetX\n      : inputEvent.offsetY;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, -offset),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(ctx);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, { axesEvent }));\n\n    if (axesEvent.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      axesEvent.setTo({ flick: flicking.camera.position }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this._releaseEvent = axesEvent;\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]): void {\n    const { flicking, transitTo } = ctx;\n\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this._releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this._releaseEvent;\n\n    // Static click\n    /* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    /* eslint-enable */\n\n    const panels = flicking.renderer.panels;\n    let clickedPanel: Panel | null = null;\n\n    for (const panel of panels) {\n      if (panel.contains(clickedElement)) {\n        clickedPanel = panel;\n        break;\n      }\n    }\n\n    if (clickedPanel) {\n      const cameraPosition = flicking.camera.position;\n      const clickedPanelPosition = clickedPanel.position;\n\n      flicking.trigger(new ComponentEvent(EVENTS.SELECT, {\n        index: clickedPanel.index,\n        panel: clickedPanel,\n        // Direction to the clicked panel\n        direction: getDirection(cameraPosition, clickedPanelPosition)\n      }));\n    }\n  }\n}\n\nexport default HoldingState;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's dragging the Flicking area\n * @ko 사용자가 드래깅중인 상태\n * @internal\n */\nclass DraggingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, {\n      axesEvent\n    }));\n\n    if (flicking.renderer.panelCount <= 0) {\n      // There're no panels\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    transitTo(STATE_TYPE.ANIMATING);\n\n    const control = flicking.control;\n    const position = axesEvent.destPos[AXES.POSITION_KEY];\n    const duration = Math.max(axesEvent.duration, flicking.duration);\n\n    try {\n      void control.moveToPosition(position, duration, axesEvent);\n    } catch (err) {\n      transitTo(STATE_TYPE.IDLE);\n      axesEvent.setTo({ [AXES.POSITION_KEY]: flicking.camera.position }, 0);\n    }\n  }\n}\n\nexport default DraggingState;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking's animating by user input or method call\n * @ko 사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태\n * @internal\n */\nclass AnimatingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const targetPanel = this._targetPanel;\n    const control = flicking.control;\n\n    this._delta = 0;\n    flicking.control.updateInput();\n\n    if (flicking.changeOnHold && targetPanel) {\n      control.setActive(targetPanel, control.activePanel, axesEvent.isTrusted);\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, { axesEvent });\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.DRAGGING);\n    }\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const control = flicking.control;\n    const controller = control.controller;\n    const animatingContext = controller.animatingContext;\n\n    transitTo(STATE_TYPE.IDLE);\n\n    flicking.trigger(new ComponentEvent(EVENTS.MOVE_END, {\n      isTrusted: axesEvent.isTrusted,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    }));\n\n    const targetPanel = this._targetPanel;\n    if (targetPanel) {\n      control.setActive(targetPanel, control.activePanel, axesEvent.isTrusted);\n    }\n  }\n}\n\nexport default AnimatingState;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking is stopped by event's `stop` method\n * @ko 이벤트의 `stop`호출에 의해 Flicking이 정지된 상태\n * @internal\n */\nclass DisabledState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onAnimationEnd(ctx: Parameters<State[\"onAnimationEnd\"]>[0]): void {\n    const { transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // Can stop Axes's change event\n    axesEvent.stop();\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // This is needed when stopped hold start event\n    if (axesEvent.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesEvents } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport * as AXES from \"../const/axes\";\n\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport State, { STATE_TYPE } from \"./states/State\";\n\n/**\n * @internal\n */\nclass StateMachine {\n  private _state: State;\n\n  public get state(): State { return this._state; }\n\n  public constructor() {\n    this._state = new IdleState();\n  }\n\n  public fire(eventType: keyof AxesEvents, externalCtx: {\n    flicking: Flicking;\n    axesEvent: any;\n  }) {\n    const currentState = this._state;\n    const ctx = { ...externalCtx, transitTo: this.transitTo };\n\n    switch (eventType) {\n      case AXES.EVENT.HOLD:\n        currentState.onHold(ctx);\n        break;\n      case AXES.EVENT.CHANGE:\n        currentState.onChange(ctx);\n        break;\n      case AXES.EVENT.RELEASE:\n        currentState.onRelease(ctx);\n        break;\n      case AXES.EVENT.ANIMATION_END:\n        currentState.onAnimationEnd(ctx);\n        break;\n      case AXES.EVENT.FINISH:\n        currentState.onFinish(ctx);\n        break;\n    }\n  }\n\n  public transitTo = (nextStateType: STATE_TYPE): State => {\n    let nextState: State;\n\n    switch (nextStateType) {\n      case STATE_TYPE.IDLE:\n        nextState = new IdleState();\n        break;\n      case STATE_TYPE.HOLDING:\n        nextState = new HoldingState();\n        break;\n      case STATE_TYPE.DRAGGING:\n        nextState = new DraggingState();\n        break;\n      case STATE_TYPE.ANIMATING:\n        nextState = new AnimatingState();\n        break;\n      case STATE_TYPE.DISABLED:\n        nextState = new DisabledState();\n        break;\n    }\n\n    nextState.onEnter(this._state);\n\n    this._state = nextState;\n\n    return this._state;\n  };\n}\n\nexport default StateMachine;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput, AxesEvents, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\nimport { circulatePosition, getFlickingAttached, parseBounce } from \"../utils\";\nimport { ControlParams } from \"../type/external\";\n\nimport StateMachine from \"./StateMachine\";\n\n/**\n * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n * @internal\n */\nclass AxesController {\n  private _flicking: Flicking | null;\n  private _axes: Axes | null;\n  private _panInput: PanInput | null;\n  private _stateMachine: StateMachine;\n\n  private _animatingContext: { start: number; end: number; offset: number };\n  private _dragged: boolean;\n\n  /**\n   * An {@link https://naver.github.io/egjs-axes/docs/api/Axes Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/docs/api/Axes Axes}의 인스턴스\n   * @type {Axes | null}\n   * @see https://naver.github.io/egjs-axes/docs/api/Axes\n   * @readonly\n   */\n  public get axes() { return this._axes; }\n  /**\n   * An {@link https://naver.github.io/egjs-axes/docs/api/PanInput PanInput} instance\n   * @ko {@link https://naver.github.io/egjs-axes/docs/api/PanInput PanInput}의 인스턴스\n   * @type {PanInput | null}\n   * @see https://naver.github.io/egjs-axes/docs/api/PanInput\n   * @readonly\n   */\n  public get panInput() { return this._panInput; }\n  /**\n   * @internal\n   */\n  public get stateMachine() { return this._stateMachine; }\n  /**\n   * A activated {@link State} that shows the current status of the user input or the animation\n   * @ko 현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다\n   * @type {State}\n   */\n  public get state() { return this._stateMachine.state; }\n  /**\n   * A context of the current animation playing\n   * @ko 현재 재생중인 애니메이션 정보\n   * @type {object}\n   * @property {number} start A start position of the animation<ko>애니메이션 시작 지점</ko>\n   * @property {number} end A end position of the animation<ko>애니메이션 끝 지점</ko>\n   * @property {number} offset camera offset<ko>카메라 오프셋</ko>\n   * @readonly\n   */\n  public get animatingContext() { return this._animatingContext; }\n  /**\n   * A current control parameters of the Axes instance\n   * @ko 활성화된 현재 Axes 패러미터들\n   * @type {ControlParams}\n   */\n  public get controlParams(): ControlParams {\n    const axes = this._axes;\n\n    if (!axes) {\n      return {\n        range: { min: 0, max: 0 },\n        position: 0,\n        circular: false\n      };\n    }\n\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    return {\n      range: { min: axis.range![0], max: axis.range![1] },\n      circular: (axis.circular as boolean[])[0],\n      position: this.position\n    };\n  }\n\n  /**\n   * A Boolean indicating whether the user input is enabled\n   * @ko 현재 사용자 입력이 활성화되었는지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get enabled() { return this._panInput?.isEnabled() ?? false; }\n  /**\n   * Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._axes?.get([AXES.POSITION_KEY])[AXES.POSITION_KEY] ?? 0; }\n  /**\n   * Current range value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 이동 범위 값\n   * @type {number[]}\n   * @readonly\n   */\n  public get range() { return this._axes?.axis[AXES.POSITION_KEY].range ?? [0, 0]; }\n  /**\n   * Actual bounce size(px)\n   * @ko 적용된 bounce 크기(px 단위)\n   * @type {number[]}\n   * @readonly\n   */\n  public get bounce() { return this._axes?.axis[AXES.POSITION_KEY].bounce as number[] | undefined; }\n\n  /** */\n  public constructor() {\n    this._resetInternalValues();\n    this._stateMachine = new StateMachine();\n  }\n\n  /**\n   * Initialize AxesController\n   * @ko AxesController를 초기화합니다\n   * @param {Flicking} flicking An instance of Flicking\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    this._axes = new Axes({\n      [AXES.POSITION_KEY]: {\n        range: [0, 0],\n        circular: false,\n        bounce: [0, 0]\n      }\n    }, {\n      deceleration: flicking.deceleration,\n      interruptable: flicking.interruptable,\n      nested: flicking.nested,\n      easing: flicking.easing\n    });\n    this._panInput = new PanInput(flicking.viewport.element, {\n      inputType: flicking.inputType,\n      threshold: 1,\n      iOSEdgeSwipeThreshold: flicking.iOSEdgeSwipeThreshold,\n      scale: flicking.horizontal ? [-1, 0] : [0, -1],\n      releaseOnScroll: true\n    });\n\n    const axes = this._axes;\n\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], this._panInput);\n\n    for (const key in AXES.EVENT) {\n      const eventType = AXES.EVENT[key] as keyof AxesEvents;\n\n      axes.on(eventType, (e: AxesEvents[typeof eventType]) => {\n        this._stateMachine.fire(eventType, {\n          flicking,\n          axesEvent: e\n        });\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Destroy AxesController and return to initial state\n   * @ko AxesController를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    if (this._axes) {\n      this.removePreventClickHandler();\n      this._axes.destroy();\n    }\n\n    this._panInput?.destroy();\n\n    this._resetInternalValues();\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._panInput?.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._panInput?.disable();\n\n    return this;\n  }\n\n  /**\n   * Releases ongoing user input (mouse/touch)\n   * @ko 사용자의 현재 입력(마우스/터치)를 중단시킵니다\n   * @chainable\n   * @return {this}\n   */\n  public release(): this {\n    this._panInput?.release();\n\n    return this;\n  }\n\n  /**\n   * Change the destination and duration of the animation currently playing\n   * @ko 재생 중인 애니메이션의 목적지와 재생 시간을 변경합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnimation(position: number, duration?: number): this {\n    this._animatingContext = {\n      ...this._animatingContext,\n      end: position\n    };\n    this._axes?.updateAnimation({\n      destPos: { [AXES.POSITION_KEY]: position },\n      duration\n    });\n\n    return this;\n  }\n\n  /**\n   * Stops the animation currently playing\n   * @ko 재생 중인 애니메이션을 중단시킵니다\n   * @chainable\n   * @return {this}\n   */\n  public stopAnimation(): this {\n    this._axes?.stopAnimation();\n\n    return this;\n  }\n\n  /**\n   * Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n   * <ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public update(controlParams: ControlParams): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const axes = this._axes!;\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    axis.circular = [controlParams.circular, controlParams.circular];\n    axis.range = [controlParams.range.min, controlParams.range.max];\n    axis.bounce = parseBounce(flicking.bounce, camera.size);\n\n    axes.axisManager.set({ [AXES.POSITION_KEY]: controlParams.position });\n\n    return this;\n  }\n\n  /**\n   * Attach a handler to the camera element to prevent click events during animation\n   * @ko 카메라 엘리먼트에 애니메이션 도중에 클릭 이벤트를 방지하는 핸들러를 부착합니다\n   * @return {this}\n   */\n  public addPreventClickHandler(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.on(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.on(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.addEventListener(\"click\", this._preventClickWhenDragged, true);\n\n    return this;\n  }\n\n  /**\n   * Detach a handler to the camera element to prevent click events during animation\n   * @ko 카메라 엘리먼트에 애니메이션 도중에 클릭 이벤트를 방지하는 핸들러를 탈착합니다\n   * @return {this}\n   */\n  public removePreventClickHandler(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.off(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.off(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.removeEventListener(\"click\", this._preventClickWhenDragged, true);\n\n    return this;\n  }\n\n  /**\n   * Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {number} [axesEvent] If provided, it'll use its {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} method instead<ko>이 값이 주어졌을 경우, 해당 이벤트의 {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} 메소드를 대신해서 사용합니다.</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public animateTo(position: number, duration: number, axesEvent?: OnRelease): Promise<void> {\n    const axes = this._axes;\n    const state = this._stateMachine.state;\n\n    if (!axes) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING, ERROR.CODE.NOT_ATTACHED_TO_FLICKING));\n    }\n\n    const startPos = axes.get([AXES.POSITION_KEY])[AXES.POSITION_KEY];\n\n    if (startPos === position) {\n      const flicking = getFlickingAttached(this._flicking);\n\n      flicking.camera.lookAt(position);\n\n      if (state.targetPanel) {\n        flicking.control.setActive(state.targetPanel, flicking.control.activePanel, axesEvent?.isTrusted ?? false);\n      }\n      return Promise.resolve();\n    }\n\n    this._animatingContext = {\n      start: startPos,\n      end: position,\n      offset: 0\n    };\n\n    const animate = () => {\n      const resetContext = () => {\n        this._animatingContext = { start: 0, end: 0, offset: 0 };\n      };\n\n      axes.once(AXES.EVENT.FINISH, resetContext);\n\n      if (axesEvent) {\n        axesEvent.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      } else {\n        axes.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      }\n    };\n\n    if (duration === 0) {\n      const flicking = getFlickingAttached(this._flicking);\n      const camera = flicking.camera;\n\n      animate();\n\n      const newPos = flicking.circularEnabled\n        ? circulatePosition(position, camera.range.min, camera.range.max)\n        : position;\n\n      axes.axisManager.set({ [AXES.POSITION_KEY]: newPos });\n\n      return Promise.resolve();\n    } else {\n      return new Promise((resolve, reject) => {\n        const animationFinishHandler = () => {\n          axes.off(AXES.EVENT.HOLD, interruptionHandler);\n          resolve();\n        };\n\n        const interruptionHandler = () => {\n          axes.off(AXES.EVENT.FINISH, animationFinishHandler);\n          reject(new FlickingError(ERROR.MESSAGE.ANIMATION_INTERRUPTED, ERROR.CODE.ANIMATION_INTERRUPTED));\n        };\n\n        axes.once(AXES.EVENT.FINISH, animationFinishHandler);\n        axes.once(AXES.EVENT.HOLD, interruptionHandler);\n\n        animate();\n      });\n    }\n  }\n\n  public updateDirection() {\n    const flicking = getFlickingAttached(this._flicking);\n    const axes = this._axes!;\n    const panInput = this._panInput!;\n\n    axes.disconnect(panInput);\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], panInput);\n\n    panInput.options.scale = flicking.horizontal ? [-1, 0] : [0, -1];\n  }\n\n  private _resetInternalValues() {\n    this._flicking = null;\n    this._axes = null;\n    this._panInput = null;\n    this._animatingContext = { start: 0, end: 0, offset: 0 };\n    this._dragged = false;\n  }\n\n  private _onAxesHold = () => {\n    this._dragged = false;\n  };\n\n  private _onAxesChange = () => {\n    this._dragged = !!this._panInput?.isEnabled();\n  };\n\n  private _preventClickWhenDragged = (e: MouseEvent) => {\n    if (this._dragged) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this._dragged = false;\n  };\n}\n\nexport default AxesController;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AxesController from \"../control/AxesController\";\nimport { DIRECTION, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getDirection, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\n/**\n * A component that manages inputs and animation of Flicking\n * @ko Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트\n */\nabstract class Control {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _controller: AxesController;\n  protected _activePanel: Panel | null;\n\n  /**\n   * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n   * @type {AxesController}\n   * @readonly\n   */\n  public get controller() { return this._controller; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get activeIndex() { return this._activePanel?.index ?? -1; }\n  /**\n   * An active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel | null}\n   * @readonly\n   */\n  public get activePanel() { return this._activePanel; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._controller.state.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._controller.state.holding; }\n\n  /** */\n  public constructor() {\n    this._flicking = null;\n    this._controller = new AxesController();\n    this._activePanel = null;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @method\n   * @abstract\n   * @memberof Control\n   * @instance\n   * @name moveToPosition\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public abstract moveToPosition(position: number, duration: number, axesEvent?: OnRelease): Promise<void>;\n\n  /**\n   * Initialize Control\n   * @ko Control을 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._controller.init(flicking);\n\n    return this;\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._controller.destroy();\n\n    this._flicking = null;\n    this._activePanel = null;\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._controller.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._controller.disable();\n\n    return this;\n  }\n\n  /**\n   * Releases ongoing user input (mouse/touch)\n   * @ko 사용자의 현재 입력(마우스/터치)를 중단시킵니다\n   * @chainable\n   * @return {this}\n   */\n  public release(): this {\n    this._controller.release();\n\n    return this;\n  }\n\n  /**\n   * Change the destination and duration of the animation currently playing\n   * @ko 재생 중인 애니메이션의 목적지와 재생 시간을 변경합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} direction Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE POSITION_NOT_REACHABLE} When the given panel is already removed or not in the Camera's {@link Camera#range range}\n   * <ko>{@link ERROR_CODE POSITION_NOT_REACHABLE} 주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우</ko>\n   * @return {this}\n   */\n  public updateAnimation(panel: Panel, duration?: number, direction?: ValueOf<typeof DIRECTION>): this {\n    const state = this._controller.state;\n    const position = this._getPosition(panel, direction ?? DIRECTION.NONE);\n\n    state.targetPanel = panel;\n    this._controller.updateAnimation(position, duration);\n\n    return this;\n  }\n\n  /**\n   * Stops the animation currently playing\n   * @ko 재생 중인 애니메이션을 중단시킵니다\n   * @chainable\n   * @return {this}\n   */\n  public stopAnimation(): this {\n    const state = this._controller.state;\n\n    state.targetPanel = null;\n    this._controller.stopAnimation();\n\n    return this;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public updatePosition(progressInPanel: number): void { // eslint-disable-line @typescript-eslint/no-unused-vars\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      camera.lookAt(camera.clampToReachablePosition(activePanel.position));\n    }\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n\n    this._controller.update(camera.controlParams);\n\n    return this;\n  }\n\n  /**\n   * Reset {@link Control#activePanel activePanel} to `null`\n   * @ko {@link Control#activePanel activePanel}을 `null`로 초기화합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetActive(): this {\n    this._activePanel = null;\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given panel\n   * @ko {@link Camera}를 해당 패널 위로 이동합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPanel(panel: Panel, {\n    duration,\n    direction = DIRECTION.NONE,\n    axesEvent\n  }: {\n    duration: number;\n    direction?: ValueOf<typeof DIRECTION>;\n    axesEvent?: OnRelease;\n  }) {\n    const position = this._getPosition(panel, direction);\n    this._triggerIndexChangeEvent(panel, panel.position, axesEvent);\n\n    return this._animateToPosition({ position, duration, newActivePanel: panel, axesEvent });\n  }\n\n  /**\n   * @internal\n   */\n  public setActive(newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) {\n    const flicking = getFlickingAttached(this._flicking);\n\n    this._activePanel = newActivePanel;\n\n    flicking.camera.updateAdaptiveHeight();\n\n    if (newActivePanel !== prevActivePanel) {\n      flicking.trigger(new ComponentEvent(EVENTS.CHANGED, {\n        index: newActivePanel.index,\n        panel: newActivePanel,\n        prevIndex: prevActivePanel?.index ?? -1,\n        prevPanel: prevActivePanel,\n        isTrusted,\n        direction: prevActivePanel ? getDirection(prevActivePanel.position, newActivePanel.position) : DIRECTION.NONE\n      }));\n    } else {\n      flicking.trigger(new ComponentEvent(EVENTS.RESTORED, {\n        isTrusted\n      }));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public copy(control: Control) {\n    this._flicking = control._flicking;\n    this._activePanel = control._activePanel;\n    this._controller = control._controller;\n  }\n\n  protected _triggerIndexChangeEvent(panel: Panel, position: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking);\n    const triggeringEvent = panel !== this._activePanel ? EVENTS.WILL_CHANGE : EVENTS.WILL_RESTORE;\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const event = new ComponentEvent(triggeringEvent, {\n      index: panel.index,\n      panel,\n      isTrusted: axesEvent?.isTrusted || false,\n      direction: getDirection(activePanel?.position ?? camera.position, position)\n    });\n    flicking.trigger(event);\n\n    if (event.isCanceled()) {\n      throw new FlickingError(ERROR.MESSAGE.STOP_CALLED_BY_USER, ERROR.CODE.STOP_CALLED_BY_USER);\n    }\n  }\n\n  protected async _animateToPosition({\n    position,\n    duration,\n    newActivePanel,\n    axesEvent\n  }: {\n    position: number;\n    duration: number;\n    newActivePanel: Panel;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking);\n    const animate = () => this._controller.animateTo(position, duration, axesEvent);\n    const state = this._controller.state;\n\n    state.targetPanel = newActivePanel;\n\n    if (duration <= 0) {\n      return animate();\n    } else {\n      return animate().then(async () => {\n        await flicking.renderer.render();\n      }).catch(err => {\n        if (axesEvent && err instanceof FlickingError && err.code === ERROR.CODE.ANIMATION_INTERRUPTED) return;\n        throw err;\n      });\n    }\n  }\n\n  private _getPosition(panel: Panel, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n\n    let position = panel.position;\n    const nearestAnchor = camera.findNearestAnchor(position);\n\n    if (panel.removed || !nearestAnchor) {\n      throw new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(panel.position), ERROR.CODE.POSITION_NOT_REACHABLE);\n    }\n    if (!camera.canReach(panel)) {\n      // Override position & panel if that panel is not reachable\n      position = nearestAnchor.position;\n      panel = nearestAnchor.panel;\n    } else if (flicking.circularEnabled) {\n      // Circular mode is enabled, find nearest distance to panel\n      const camPos = this._controller.position; // Actual position of the Axes\n      const camRangeDiff = camera.rangeDiff;\n      const possiblePositions = [position, position + camRangeDiff, position - camRangeDiff]\n        .filter(pos => {\n          if (direction === DIRECTION.NONE) return true;\n\n          return direction === DIRECTION.PREV\n            ? pos <= camPos\n            : pos >= camPos;\n        });\n\n      position = possiblePositions.reduce((nearestPosition, pos) => {\n        if (Math.abs(camPos - pos) < Math.abs(camPos - nearestPosition)) {\n          return pos;\n        } else {\n          return nearestPosition;\n        }\n      }, Infinity);\n    }\n\n    return position;\n  }\n}\n\nexport default Control;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"./panel/Panel\";\n\n/**\n * A data component that has actual position where the camera should be stopped at\n * @ko 카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트\n */\nclass AnchorPoint {\n  private _index: number;\n  private _pos: number;\n  private _panel: Panel;\n\n  /**\n   * Index of AnchorPoint\n   * @ko AnchorPoint의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of AnchorPoint\n   * @ko AnchorPoint의 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos; }\n  /**\n   * A {@link Panel} instance AnchorPoint is referencing to\n   * @ko AnchorPoint가 참조하고 있는 {@link Panel}\n   * @type {Panel}\n   * @readonly\n   */\n  public get panel() { return this._panel; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 객체</ko>\n   * @param {number} [options.index] Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>\n   * @param {number} [options.position] Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>\n   * @param {Panel} [options.panel] A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>\n   */\n  public constructor({\n    index,\n    position,\n    panel\n  }: {\n    index: number;\n    position: number;\n    panel: Panel;\n  }) {\n    this._index = index;\n    this._pos = position;\n    this._panel = panel;\n  }\n}\n\nexport default AnchorPoint;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { circulateIndex, clamp, getFlickingAttached } from \"../utils\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link SnapControl}\n * @ko {@link SnapControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels can go after release<ko>입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수</ko>\n */\nexport interface SnapControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that uses a release momentum to choose destination panel\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}\n */\nclass SnapControl extends Control {\n  private _count: SnapControlOptions[\"count\"];\n\n  /**\n   * Maximum number of panels can go after release\n   * @ko 입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수\n   * @type {number}\n   * @default Infinity\n   */\n  public get count() { return this._count; }\n\n  public set count(val: SnapControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = Infinity\n  }: Partial<SnapControlOptions> = {}) {\n    super();\n\n    this._count = count;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const activeAnchor = camera.findActiveAnchor();\n    const anchorAtCamera = camera.findNearestAnchor(camera.position);\n    const state = this._controller.state;\n\n    if (!activeAnchor || !anchorAtCamera) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const snapThreshold = this._calcSnapThreshold(position, activeAnchor);\n\n    const posDelta = flicking.animating\n      ? state.delta\n      : position - camera.position;\n    const absPosDelta = Math.abs(posDelta);\n    const snapDelta = axesEvent && axesEvent.delta[AXES.POSITION_KEY] !== 0\n      ? Math.abs(axesEvent.delta[AXES.POSITION_KEY])\n      : absPosDelta;\n    let targetAnchor: AnchorPoint;\n\n    if (snapDelta >= snapThreshold && snapDelta > 0) {\n      // Move to anchor at position\n      targetAnchor = this._findSnappedAnchor(position, anchorAtCamera);\n    } else if (absPosDelta >= flicking.threshold && absPosDelta > 0) {\n      // Move to the adjacent panel\n      targetAnchor = this._findAdjacentAnchor(position, posDelta, anchorAtCamera);\n    } else {\n      // Fallback to nearest panel from current camera\n      return this.moveToPanel(anchorAtCamera.panel, {\n        duration,\n        axesEvent\n      });\n    }\n\n    this._triggerIndexChangeEvent(targetAnchor.panel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: camera.clampToReachablePosition(targetAnchor.position),\n      duration,\n      newActivePanel: targetAnchor.panel,\n      axesEvent\n    });\n  }\n\n  private _findSnappedAnchor(position: number, anchorAtCamera: AnchorPoint): AnchorPoint {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const count = this._count;\n\n    const currentPos = camera.position;\n\n    const clampedPosition = camera.clampToReachablePosition(position);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtCamera || !anchorAtPosition) {\n      throw new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE);\n    }\n\n    if (!isFinite(count)) {\n      return anchorAtPosition;\n    }\n\n    const panelCount = flicking.panelCount;\n    const anchors = camera.anchorPoints;\n\n    let loopCount = Math.sign(position - currentPos) * Math.floor(Math.abs(position - currentPos) / camera.rangeDiff);\n    if ((position > currentPos && anchorAtPosition.index < anchorAtCamera.index)\n      || (anchorAtPosition.position > anchorAtCamera.position && anchorAtPosition.index === anchorAtCamera.index)) {\n      loopCount += 1;\n    } else if ((position < currentPos && anchorAtPosition.index > anchorAtCamera.index)\n      || (anchorAtPosition.position < anchorAtCamera.position && anchorAtPosition.index === anchorAtCamera.index)) {\n      loopCount -= 1;\n    }\n\n    const circularIndexOffset = loopCount * panelCount;\n    const anchorAtPositionIndex = anchorAtPosition.index + circularIndexOffset;\n\n    if (Math.abs(anchorAtPositionIndex - anchorAtCamera.index) <= count) {\n      const anchor = anchors[anchorAtPosition.index];\n\n      return new AnchorPoint({\n        index: anchor.index,\n        position: anchor.position + loopCount * camera.rangeDiff,\n        panel: anchor.panel\n      });\n    }\n\n    if (flicking.circularEnabled) {\n      const targetAnchor = anchors[circulateIndex(anchorAtCamera.index + Math.sign(position - currentPos) * count, panelCount)];\n      let loop = Math.floor(count / panelCount);\n\n      if (position > currentPos && targetAnchor.index < anchorAtCamera.index) {\n        loop += 1;\n      } else if (position < currentPos && targetAnchor.index > anchorAtCamera.index) {\n        loop -= 1;\n      }\n\n      return new AnchorPoint({\n        index: targetAnchor.index,\n        position: targetAnchor.position + loop * camera.rangeDiff,\n        panel: targetAnchor.panel\n      });\n    } else {\n      return anchors[clamp(anchorAtCamera.index + Math.sign(position - currentPos) * count, 0, anchors.length - 1)];\n    }\n  }\n\n  private _findAdjacentAnchor(position: number, posDelta: number, anchorAtCamera: AnchorPoint): AnchorPoint {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n\n    if (camera.circularEnabled) {\n      const anchorIncludePosition = camera.findAnchorIncludePosition(position);\n\n      if (anchorIncludePosition && anchorIncludePosition.position !== anchorAtCamera.position) {\n        return anchorIncludePosition;\n      }\n    }\n\n    const adjacentAnchor = (posDelta > 0 ? camera.getNextAnchor(anchorAtCamera) : camera.getPrevAnchor(anchorAtCamera)) ?? anchorAtCamera;\n\n    return adjacentAnchor;\n  }\n\n  private _calcSnapThreshold(position: number, activeAnchor: AnchorPoint): number {\n    const isNextDirection = position > activeAnchor.position;\n    const panel = activeAnchor.panel;\n    const panelSize = panel.size;\n    const alignPos = panel.alignPosition;\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |<------>|<------------>|\n     * [        |<-Anchor      ]\n     */\n    return isNextDirection\n      ? panelSize - alignPos + panel.margin.next\n      : alignPos + panel.margin.prev;\n  }\n}\n\nexport default SnapControl;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link FreeControl}\n * @ko {@link FreeControl} 생성시 사용되는 옵션\n * @interface\n * @property {boolean} stopAtEdge Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n * <ko>스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다</ko>\n */\nexport interface FreeControlOptions {\n  stopAtEdge: boolean;\n}\n\n/**\n * A {@link Control} that can be scrolled freely without alignment\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}\n */\nclass FreeControl extends Control {\n  private _stopAtEdge: FreeControlOptions[\"stopAtEdge\"];\n\n  /**\n   * Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n   * @ko 스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get stopAtEdge() { return this._stopAtEdge; }\n\n  public set stopAtEdge(val: FreeControlOptions[\"stopAtEdge\"]) { this._stopAtEdge = val; }\n\n  /** */\n  public constructor({\n    stopAtEdge = true\n  }: Partial<FreeControlOptions> = {}) {\n    super();\n\n    this._stopAtEdge = stopAtEdge;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public updatePosition(progressInPanel: number): void {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      const panelRange = activePanel.range;\n      const newPosition = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      camera.lookAt(camera.clampToReachablePosition(newPosition));\n    }\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking);\n\n    const camera = flicking.camera;\n    const targetPos = camera.clampToReachablePosition(position);\n\n    const anchorAtPosition = camera.findAnchorIncludePosition(targetPos);\n\n    if (!anchorAtPosition) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const targetPanel = anchorAtPosition.panel;\n\n    // Trigger only change event\n    if (targetPanel !== this._activePanel) {\n      this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n    }\n\n    return this._animateToPosition({ position: this._stopAtEdge ? targetPos : position, duration, newActivePanel: targetPanel, axesEvent });\n  }\n}\n\nexport default FreeControl;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { clamp, getFlickingAttached, getMinusCompensatedIndex, isBetween } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n/**\n * An options for the {@link StrictControl}\n * @ko {@link StrictControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels that can be moved at a time<ko>최대로 움직일 수 있는 패널의 개수</ko>\n */\nexport interface StrictControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that allow you to select the maximum number of panels to move at a time\n * @ko 한번에 최대로 이동할 패널의 개수를 선택 가능한 {@link Control}\n */\nclass StrictControl extends Control {\n  private _count: number;\n  private _indexRange: { min: number; max: number };\n\n  /**\n   * Maximum number of panels that can be moved at a time\n   * @ko 최대로 움직일 수 있는 패널의 개수\n   * @type {number}\n   * @default 1\n   */\n  public get count() { return this._count; }\n\n  public set count(val: StrictControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = 1\n  }: Partial<StrictControlOptions> = {}) {\n    super();\n\n    this._count = count;\n    this._resetIndexRange();\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy() {\n    super.destroy();\n\n    this._resetIndexRange();\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const renderer = flicking.renderer;\n    const controller = this._controller;\n    const controlParams = camera.controlParams;\n    const count = this._count;\n\n    const activePanel = controller.state.animating\n      ? camera.findNearestAnchor(camera.position)?.panel\n      : this._activePanel;\n\n    if (!activePanel) {\n      controller.update(controlParams);\n      this._resetIndexRange();\n      return this;\n    }\n\n    const cameraRange = controlParams.range;\n    const currentPos = activePanel.position;\n    const currentIndex = activePanel.index;\n    const panelCount = renderer.panelCount;\n\n    let prevPanelIndex = currentIndex - count;\n    let nextPanelIndex = currentIndex + count;\n\n    if (prevPanelIndex < 0) {\n      prevPanelIndex = flicking.circularEnabled\n        ? getMinusCompensatedIndex((prevPanelIndex + 1) % panelCount - 1, panelCount)\n        : clamp(prevPanelIndex, 0, panelCount - 1);\n    }\n    if (nextPanelIndex >= panelCount) {\n      nextPanelIndex = flicking.circularEnabled\n        ? nextPanelIndex % panelCount\n        : clamp(nextPanelIndex, 0, panelCount - 1);\n    }\n\n    const prevPanel = renderer.panels[prevPanelIndex];\n    const nextPanel = renderer.panels[nextPanelIndex];\n\n    let prevPos = Math.max(prevPanel.position, cameraRange.min);\n    let nextPos = Math.min(nextPanel.position, cameraRange.max);\n\n    if (prevPos > currentPos) {\n      prevPos -= camera.rangeDiff;\n    }\n    if (nextPos < currentPos) {\n      nextPos += camera.rangeDiff;\n    }\n\n    controlParams.range = {\n      min: prevPos,\n      max: nextPos\n    };\n\n    if (controlParams.circular) {\n      if (controlParams.position < prevPos) {\n        controlParams.position += camera.rangeDiff;\n      }\n\n      if (controlParams.position > nextPos) {\n        controlParams.position -= camera.rangeDiff;\n      }\n    }\n\n    controlParams.circular = false;\n    controller.update(controlParams);\n\n    this._indexRange = {\n      min: prevPanel.index,\n      max: nextPanel.index\n    };\n\n    return this;\n  }\n\n  public async moveToPanel(panel: Panel, options: Parameters<Control[\"moveToPanel\"]>[1]): Promise<void> {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const controller = this._controller;\n\n    controller.update(camera.controlParams);\n\n    return super.moveToPanel(panel, options);\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n    const axesRange = this._controller.range;\n    const indexRange = this._indexRange;\n    const cameraRange = camera.range;\n    const state = this._controller.state;\n\n    const clampedPosition = clamp(camera.clampToReachablePosition(position), axesRange[0], axesRange[1]);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n    const posDelta = flicking.animating\n      ? state.delta\n      : position - camera.position;\n\n    const isOverThreshold = Math.abs(posDelta) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    const anchors = camera.anchorPoints;\n    const firstAnchor = anchors[0];\n    const lastAnchor = anchors[anchors.length - 1];\n\n    const shouldBounceToFirst = position <= cameraRange.min && isBetween(firstAnchor.panel.index, indexRange.min, indexRange.max);\n    const shouldBounceToLast = position >= cameraRange.max && isBetween(lastAnchor.panel.index, indexRange.min, indexRange.max);\n\n    const isAdjacent = adjacentAnchor && (indexRange.min <= indexRange.max\n      ? isBetween(adjacentAnchor.index, indexRange.min, indexRange.max)\n      : adjacentAnchor.index >= indexRange.min || adjacentAnchor.index <= indexRange.max);\n\n    if (shouldBounceToFirst || shouldBounceToLast) {\n      // In bounce area\n      const targetAnchor = position < cameraRange.min ? firstAnchor : lastAnchor;\n\n      targetPanel = targetAnchor.panel;\n      targetPos = targetAnchor.position;\n    } else if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && isAdjacent) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor!.panel;\n      targetPos = adjacentAnchor!.position;\n    } else {\n      // Fallback to nearest panel from current camera\n      const anchorAtCamera = camera.findNearestAnchor(camera.position);\n      if (!anchorAtCamera) {\n        return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n      }\n      return this.moveToPanel(anchorAtCamera.panel, {\n        duration,\n        axesEvent\n      });\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n\n  public setActive = (newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) => {\n    super.setActive(newActivePanel, prevActivePanel, isTrusted);\n    this.updateInput();\n  };\n\n  private _resetIndexRange() {\n    this._indexRange = { min: 0, max: 0 };\n  }\n}\n\nexport default StrictControl;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport Panel from \"../../core/panel/Panel\";\nimport AnchorPoint from \"../../core/AnchorPoint\";\nimport { clamp } from \"../../utils\";\n\n/**\n * A mode of camera\n */\nabstract class CameraMode {\n  protected _flicking: Flicking;\n\n  /** */\n  public constructor(flicking: Flicking) {\n    this._flicking = flicking;\n  }\n\n  public abstract checkAvailability(): boolean;\n  public abstract getRange(): { min: number; max: number };\n\n  public getAnchors(): AnchorPoint[] {\n    const panels = this._flicking.renderer.panels;\n\n    return panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const anchors = this._flicking.camera.anchorPoints;\n    const anchorsIncludingPosition = anchors.filter(anchor => anchor.panel.includePosition(position, true));\n\n    return anchorsIncludingPosition.reduce((nearest: AnchorPoint | null, anchor) => {\n      if (!nearest) return anchor;\n\n      return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n        ? nearest\n        : anchor;\n    }, null);\n  }\n\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const anchors = this._flicking.camera.anchorPoints;\n\n    if (anchors.length <= 0) return null;\n\n    let prevDist = Infinity;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.abs(anchor.position - position);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return anchors[anchorIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return anchors[anchors.length - 1];\n  }\n\n  public clampToReachablePosition(position: number): number {\n    const camera = this._flicking.camera;\n    const range = camera.range;\n\n    return clamp(position, range.min, range.max);\n  }\n\n  public getCircularOffset(): number {\n    return 0;\n  }\n\n  public canReach(panel: Panel): boolean {\n    const camera = this._flicking.camera;\n    const range = camera.range;\n\n    if (panel.removed) return false;\n\n    const panelPos = panel.position;\n\n    return panelPos >= range.min && panelPos <= range.max;\n  }\n\n  public canSee(panel: Panel): boolean {\n    const camera = this._flicking.camera;\n    const visibleRange = camera.visibleRange;\n    // Should not include margin, as we don't declare what the margin is visible as what the panel is visible.\n    return panel.isVisibleOnRange(visibleRange.min, visibleRange.max);\n  }\n}\n\nexport default CameraMode;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport CameraMode from \"./CameraMode\";\n\nclass LinearCameraMode extends CameraMode {\n  public checkAvailability(): boolean {\n    // It's always available\n    return true;\n  }\n\n  public getRange(): { min: number; max: number } {\n    const renderer = this._flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    return { min: firstPanel?.position ?? 0, max: lastPanel?.position ?? 0 };\n  }\n}\n\nexport default LinearCameraMode;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../../core/panel/Panel\";\nimport AnchorPoint from \"../../core/AnchorPoint\";\nimport { DIRECTION } from \"../../const/external\";\nimport { circulatePosition } from \"../../utils\";\n\nimport CameraMode from \"./CameraMode\";\n\n/**\n * A {@link Camera} mode that connects the last panel and the first panel, enabling continuous loop\n * @ko 첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera} 모드\n */\nclass CircularCameraMode extends CameraMode {\n  public checkAvailability(): boolean {\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panels = renderer.panels;\n\n    if (panels.length <= 0) {\n      return false;\n    }\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    const visibleSize = flicking.camera.size;\n    const panelSizeSum = lastPanelNext - firstPanelPrev;\n\n    const canSetCircularMode = panels\n      .every(panel => panelSizeSum - panel.size >= visibleSize);\n\n    return canSetCircularMode;\n  }\n\n  public getRange(): { min: number; max: number } {\n    const flicking = this._flicking;\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      return { min: 0, max: 0 };\n    }\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    return { min: firstPanelPrev, max: lastPanelNext };\n  }\n\n  public getAnchors(): AnchorPoint[] {\n    const flicking = this._flicking;\n    const panels = flicking.renderer.panels;\n\n    return panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n  }\n\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const camera = this._flicking.camera;\n    const anchors = camera.anchorPoints;\n\n    if (anchors.length <= 0) return null;\n\n    const camRange = camera.range;\n    let minDist = Infinity;\n    let minDistIndex = -1;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.min(\n        Math.abs(anchor.position - position),\n        Math.abs(anchor.position - camRange.min + camRange.max - position),\n        Math.abs(position - camRange.min + camRange.max - anchor.position)\n      );\n\n      if (dist < minDist) {\n        minDist = dist;\n        minDistIndex = anchorIdx;\n      }\n    }\n\n    // Return last anchor\n    return anchors[minDistIndex];\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const camera = this._flicking.camera;\n    const range = camera.range;\n    const anchors = camera.anchorPoints;\n    const rangeDiff = camera.rangeDiff;\n    const anchorCount = anchors.length;\n    const positionInRange = circulatePosition(position, range.min, range.max);\n\n    let anchorInRange: AnchorPoint | null = super.findAnchorIncludePosition(positionInRange);\n\n    if (anchorCount > 0 && (position === range.min || position === range.max)) {\n      const possibleAnchors = [\n        anchorInRange,\n        new AnchorPoint({\n          index: 0,\n          position: anchors[0].position + rangeDiff,\n          panel: anchors[0].panel\n        }),\n        new AnchorPoint({\n          index: anchorCount - 1,\n          position: anchors[anchorCount - 1].position - rangeDiff,\n          panel: anchors[anchorCount - 1].panel\n        })\n      ].filter(anchor => !!anchor) as AnchorPoint[];\n\n      anchorInRange = possibleAnchors.reduce((nearest: AnchorPoint | null, anchor) => {\n        if (!nearest) return anchor;\n\n        return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n          ? nearest\n          : anchor;\n      }, null);\n    }\n\n    if (!anchorInRange) return null;\n\n    if (position < range.min) {\n      const loopCount = -Math.floor((range.min - position) / rangeDiff) - 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    } else if (position > range.max) {\n      const loopCount = Math.floor((position - range.max) / rangeDiff) + 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    }\n\n    return anchorInRange;\n  }\n\n  public getCircularOffset(): number {\n    const flicking = this._flicking;\n    const camera = flicking.camera;\n\n    if (!camera.circularEnabled) return 0;\n\n    const toggled = flicking.panels.filter(panel => panel.toggled);\n    const toggledPrev = toggled.filter(panel => panel.toggleDirection === DIRECTION.PREV);\n    const toggledNext = toggled.filter(panel => panel.toggleDirection === DIRECTION.NEXT);\n\n    return this._calcPanelAreaSum(toggledPrev) - this._calcPanelAreaSum(toggledNext);\n  }\n\n  public clampToReachablePosition(position: number): number {\n    // Basically all position is reachable for circular camera\n    return position;\n  }\n\n  public canReach(panel: Panel): boolean {\n    if (panel.removed) return false;\n\n    // Always reachable on circular mode\n    return true;\n  }\n\n  public canSee(panel: Panel): boolean {\n    const camera = this._flicking.camera;\n    const range = camera.range;\n    const rangeDiff = camera.rangeDiff;\n    const visibleRange = camera.visibleRange;\n    const visibleInCurrentRange = super.canSee(panel);\n\n    // Check looped visible area for circular case\n    if (visibleRange.min < range.min) {\n      return visibleInCurrentRange || panel.isVisibleOnRange(visibleRange.min + rangeDiff, visibleRange.max + rangeDiff);\n    } else if (visibleRange.max > range.max) {\n      return visibleInCurrentRange || panel.isVisibleOnRange(visibleRange.min - rangeDiff, visibleRange.max - rangeDiff);\n    }\n\n    return visibleInCurrentRange;\n  }\n\n  private _calcPanelAreaSum(panels: Panel[]) {\n    return panels.reduce((sum: number, panel: Panel) => sum + panel.sizeIncludingMargin, 0);\n  }\n}\n\nexport default CircularCameraMode;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport AnchorPoint from \"../../core/AnchorPoint\";\nimport Panel from \"../../core/panel/Panel\";\nimport { parseAlign } from \"../../utils\";\n\nimport CameraMode from \"./CameraMode\";\n\nclass BoundCameraMode extends CameraMode {\n  public checkAvailability(): boolean {\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      return false;\n    }\n\n    const viewportSize = flicking.camera.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const isBiggerThanViewport = viewportSize < panelAreaSize;\n\n    return isBiggerThanViewport;\n  }\n\n  public getRange(): { min: number; max: number } {\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const alignPos = flicking.camera.alignPosition;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      return { min: 0, max: 0 };\n    }\n\n    const viewportSize = flicking.camera.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const isBiggerThanViewport = viewportSize < panelAreaSize;\n\n    const firstPos = firstPanelPrev + alignPos;\n    const lastPos = lastPanelNext - viewportSize + alignPos;\n\n    if (isBiggerThanViewport) {\n      return { min: firstPos, max: lastPos };\n    } else {\n      const align = flicking.camera.align;\n      const alignVal = typeof align === \"object\"\n        ? (align as { camera: string | number }).camera\n        : align;\n\n      const pos = firstPos + parseAlign(alignVal, lastPos - firstPos);\n\n      return { min: pos, max: pos };\n    }\n  }\n\n  public getAnchors(): AnchorPoint[] {\n    const flicking = this._flicking;\n    const camera = flicking.camera;\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const range = flicking.camera.range;\n    const reachablePanels = panels.filter(panel => camera.canReach(panel));\n\n    if (reachablePanels.length > 0) {\n      const shouldPrependBoundAnchor = reachablePanels[0].position !== range.min;\n      const shouldAppendBoundAnchor = reachablePanels[reachablePanels.length - 1].position !== range.max;\n      const indexOffset = shouldPrependBoundAnchor ? 1 : 0;\n\n      const newAnchors = reachablePanels.map((panel, idx) => new AnchorPoint({\n        index: idx + indexOffset,\n        position: panel.position,\n        panel\n      }));\n\n      if (shouldPrependBoundAnchor) {\n        newAnchors.splice(0, 0, new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panels[reachablePanels[0].index - 1]\n        }));\n      }\n\n      if (shouldAppendBoundAnchor) {\n        newAnchors.push(new AnchorPoint({\n          index: newAnchors.length,\n          position: range.max,\n          panel: panels[reachablePanels[reachablePanels.length - 1].index + 1]\n        }));\n      }\n\n      return newAnchors;\n    } else if (range.min !== range.max) {\n      // There're more than 2 panels\n      const nearestPanelAtMin = this._findNearestPanel(range.min, panels);\n      const panelAtMin = nearestPanelAtMin.index === panels.length - 1\n        ? nearestPanelAtMin.prev()!\n        : nearestPanelAtMin;\n      const panelAtMax = panelAtMin.next()!;\n\n      return [\n        new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panelAtMin\n        }),\n        new AnchorPoint({\n          index: 1,\n          position: range.max,\n          panel: panelAtMax\n        })\n      ];\n    } else {\n      return [new AnchorPoint({\n        index: 0,\n        position: range.min,\n        panel: this._findNearestPanel(range.min, panels)\n      })];\n    }\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const camera = this._flicking.camera;\n    const range = camera.range;\n    const anchors = camera.anchorPoints;\n\n    if (anchors.length <= 0) return null;\n\n    if (position <= range.min) {\n      return anchors[0];\n    } else if (position >= range.max) {\n      return anchors[anchors.length - 1];\n    } else {\n      return super.findAnchorIncludePosition(position);\n    }\n  }\n\n  private _findNearestPanel(pos: number, panels: Panel[]): Panel {\n    let prevDist = Infinity;\n    for (let panelIdx = 0; panelIdx < panels.length; panelIdx++) {\n      const panel = panels[panelIdx];\n      const dist = Math.abs(panel.position - pos);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return panels[panelIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return panels[panels.length - 1];\n  }\n}\n\nexport default BoundCameraMode;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport * as ERROR from \"../const/error\";\nimport { ALIGN, CIRCULAR_FALLBACK, DIRECTION, EVENTS } from \"../const/external\";\nimport { checkExistence, find, getFlickingAttached, getProgress, includes, parseAlign, toArray } from \"../utils\";\n\nimport { CameraMode, BoundCameraMode, CircularCameraMode, LinearCameraMode } from \"./mode\";\n\nexport interface CameraOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages actual movement inside the viewport\n * @ko 뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트\n */\nclass Camera {\n  // Options\n  private _align: FlickingOptions[\"align\"];\n\n  // Internal states\n  private _flicking: Flicking;\n  private _mode: CameraMode;\n  private _el: HTMLElement;\n  private _transform: string;\n  private _position: number;\n  private _alignPos: number;\n  private _offset: number;\n  private _circularOffset: number;\n  private _circularEnabled: boolean;\n  private _range: { min: number; max: number };\n  private _visiblePanels: Panel[];\n  private _anchors: AnchorPoint[];\n  private _needPanelTriggered: { prev: boolean; next: boolean };\n\n  // Internal states getter\n  /**\n   * The camera element(`.flicking-camera`)\n   * @ko 카메라 엘리먼트(`.flicking-camera`)\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n  /**\n   * An array of the child elements of the camera element(`.flicking-camera`)\n   * @ko 카메라 엘리먼트(`.flicking-camera`)의 자식 엘리먼트 배열\n   * @type {HTMLElement[]}\n   * @readonly\n   */\n  public get children() { return toArray(this._el.children) as HTMLElement[]; }\n  /**\n   * Current position of the camera\n   * @ko Camera의 현재 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._position; }\n  /**\n   * Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at\n   * @ko 패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option\n   * @ko Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get offset() { return this._offset - this._circularOffset; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._circularEnabled; }\n  /**\n   * A current camera mode\n   * @type {CameraMode}\n   * @readonly\n   */\n  public get mode() { return this._mode; }\n  /**\n   * A range that Camera's {@link Camera#position position} can reach\n   * @ko Camera의 {@link Camera#position position}이 도달 가능한 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} max A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get range() { return this._range; }\n  /**\n   * A difference between Camera's minimum and maximum position that can reach\n   * @ko Camera가 도달 가능한 최소/최대 좌표의 차이\n   * @type {number}\n   * @readonly\n   */\n  public get rangeDiff() { return this._range.max - this._range.min; }\n  /**\n   * An array of visible panels from the current position\n   * @ko 현재 보이는 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   */\n  public get visiblePanels() { return this._visiblePanels; }\n  /**\n   * A range of the visible area from the current position\n   * @ko 현재 위치에서 보이는 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get visibleRange() { return { min: this._position - this._alignPos, max: this._position - this._alignPos + this.size }; }\n  /**\n   * An array of {@link AnchorPoint}s that Camera can be stopped at\n   * @ko 카메라가 도달 가능한 {@link AnchorPoint}의 목록\n   * @type {AnchorPoint[]}\n   * @readonly\n   */\n  public get anchorPoints() { return this._anchors; }\n  /**\n   * A current parameters of the Camera for updating {@link AxesController}\n   * @ko {@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들\n   * @type {ControlParams}\n   * @readonly\n   */\n  public get controlParams() { return { range: this._range, position: this._position, circular: this._circularEnabled }; }\n  /**\n   * A Boolean value indicating whether Camera's over the minimum or maximum position reachable\n   * @ko 현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다\n   * @type {boolean}\n   * @readonly\n   */\n  public get atEdge() { return this._position <= this._range.min || this._position >= this._range.max; }\n  /**\n   * Return the size of the viewport\n   * @ko 뷰포트 크기를 반환합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() {\n    const flicking = this._flicking;\n    return flicking\n      ? flicking.horizontal\n        ? flicking.viewport.width\n        : flicking.viewport.height\n      : 0;\n  }\n\n  /**\n   * Return the camera's position progress from the first panel to last panel\n   * Range is from 0 to last panel's index\n   * @ko 첫번째 패널로부터 마지막 패널까지의 카메라 위치의 진행도를 반환합니다\n   * 범위는 0부터 마지막 패널의 인덱스까지입니다\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n    const position = this._position + this._offset;\n    const nearestAnchor = this.findNearestAnchor(this._position);\n\n    if (!flicking || !nearestAnchor) {\n      return NaN;\n    }\n\n    const nearestPanel = nearestAnchor.panel;\n    const panelPos = nearestPanel.position + nearestPanel.offset;\n    const bounceSize = flicking.control.controller.bounce!;\n\n    const { min: prevRange, max: nextRange } = this.range;\n    const rangeDiff = this.rangeDiff;\n\n    if (position === panelPos) {\n      return nearestPanel.index;\n    }\n\n    if (position < panelPos) {\n      const prevPanel = nearestPanel.prev();\n      let prevPosition = prevPanel\n        ? prevPanel.position + prevPanel.offset\n        : prevRange - bounceSize[0];\n\n      // Looped\n      if (prevPosition > panelPos) {\n        prevPosition -= rangeDiff;\n      }\n\n      return nearestPanel.index - 1 + getProgress(position, prevPosition, panelPos);\n    } else {\n      const nextPanel = nearestPanel.next();\n      let nextPosition = nextPanel\n        ? nextPanel.position + nextPanel.offset\n        : nextRange + bounceSize[1];\n\n      // Looped\n      if (nextPosition < panelPos) {\n        nextPosition += rangeDiff;\n      }\n\n      return nearestPanel.index + getProgress(position, panelPos, nextPosition);\n    }\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element\n   * @ko {@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n  }\n\n  /** */\n  public constructor(flicking: Flicking, {\n    align = ALIGN.CENTER\n  }: Partial<CameraOptions> = {}) {\n    this._flicking = flicking;\n    this._resetInternalValues();\n\n    // Options\n    this._align = align;\n  }\n\n  /**\n   * Initialize Camera\n   * @ko Camera를 초기화합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n   * <ko>{@link ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>\n   * @return {this}\n   */\n  public init(): this {\n    const viewportEl = this._flicking.viewport.element;\n\n    checkExistence(viewportEl.firstElementChild, \"First element child of the viewport element\");\n    this._el = viewportEl.firstElementChild as HTMLElement;\n    this._checkTranslateSupport();\n\n    this._updateMode();\n\n    return this;\n  }\n\n  /**\n   * Destroy Camera and return to initial state\n   * @ko Camera를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): this {\n    this._resetInternalValues();\n    return this;\n  }\n\n  /**\n   * Move to the given position and apply CSS transform\n   * @ko 해당 좌표로 이동하고, CSS transform을 적용합니다\n   * @param {number} pos A new position<ko>움직일 위치</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public lookAt(pos: number): void {\n    const flicking = getFlickingAttached(this._flicking);\n    const prevPos = this._position;\n\n    this._position = pos;\n    const toggled = this._togglePanels(prevPos, pos);\n    this._refreshVisiblePanels();\n    this._checkNeedPanel();\n    this._checkReachEnd(prevPos, pos);\n\n    if (toggled) {\n      void flicking.renderer.render().then(() => {\n        this.updateOffset();\n      });\n    } else {\n      this.applyTransform();\n    }\n  }\n\n  /**\n   * Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>\n   */\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    if (!this._circularEnabled || anchor.index !== 0) {\n      return this._anchors[anchor.index - 1] || null;\n    } else {\n      const anchors = this._anchors;\n      const rangeDiff = this.rangeDiff;\n      const lastAnchor = anchors[anchors.length - 1];\n\n      return new AnchorPoint({\n        index: lastAnchor.index,\n        position: lastAnchor.position - rangeDiff,\n        panel: lastAnchor.panel\n      });\n    }\n  }\n\n  /**\n   * Return a next {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>\n   */\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (!this._circularEnabled || anchor.index !== anchors.length - 1) {\n      return anchors[anchor.index + 1] || null;\n    } else {\n      const rangeDiff = this.rangeDiff;\n      const firstAnchor = anchors[0];\n\n      return new AnchorPoint({\n        index: firstAnchor.index,\n        position: firstAnchor.position + rangeDiff,\n        panel: firstAnchor.panel\n      });\n    }\n  }\n\n  /**\n   * Return the camera's position progress in the panel below\n   * Value is from 0 to 1 when the camera's inside panel\n   * Value can be lower than 0 or bigger than 1 when it's in the margin area\n   * @ko 현재 카메라 아래 패널에서의 위치 진행도를 반환합니다\n   * 반환값은 카메라가 패널 내부에 있을 경우 0부터 1까지의 값을 갖습니다\n   * 패널의 margin 영역에 있을 경우 0보다 작거나 1보다 큰 값을 반환할 수 있습니다\n   */\n  public getProgressInPanel(panel: Panel) {\n    const panelRange = panel.range;\n\n    return (this._position - panelRange.min) / (panelRange.max - panelRange.min);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that includes given position\n   * If there's no {@link AnchorPoint} that includes the given position, return `null` instead\n   * @ko 주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n   * 주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>\n   */\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    return this._mode.findAnchorIncludePosition(position);\n  }\n\n  /**\n   * Return {@link AnchorPoint} nearest to given position\n   * If there're no {@link AnchorPoint}s, return `null` instead\n   * @ko 해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n   * {@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>\n   */\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    return this._mode.findNearestAnchor(position);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that matches {@link Flicking#currentPanel}\n   * @ko 현재 {@link Flicking#currentPanel}에 해당하는 {@link AnchorPoint}를 반환합니다\n   * @return {AnchorPoint | null}\n   */\n  public findActiveAnchor(): AnchorPoint | null {\n    const flicking = getFlickingAttached(this._flicking);\n    const activeIndex = flicking.control.activeIndex;\n\n    return find(this._anchors, anchor => anchor.panel.index === activeIndex);\n  }\n\n  /**\n   * Clamp the given position between camera's range\n   * @ko 주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다\n   * @param {number} position A position to clamp<ko>범위를 제한할 좌표</ko>\n   * @return {number} A clamped position<ko>범위 제한된 좌표</ko>\n   */\n  public clampToReachablePosition(position: number): number {\n    return this._mode.clampToReachablePosition(position);\n  }\n\n  /**\n   * Check whether the given panel is inside of the Camera's range\n   * @ko 해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return {boolean} Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>\n   */\n  public canReach(panel: Panel): boolean {\n    return this._mode.canReach(panel);\n  }\n\n  /**\n   * Check whether the given panel element is visible at the current position\n   * @ko 현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>\n   */\n  public canSee(panel: Panel): boolean {\n    return this._mode.canSee(panel);\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @method\n   * @abstract\n   * @memberof Camera\n   * @instance\n   * @name updateRange\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking);\n    const renderer = flicking.renderer;\n    const panels = renderer.panels;\n\n    this._updateMode();\n    this._range = this._mode.getRange();\n\n    panels.forEach(panel => panel.updateCircularToggleDirection());\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#alignPosition alignPosition}\n   * @ko Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateAlignPos(): this {\n    const align = this._align;\n\n    const alignVal = typeof align === \"object\"\n      ? (align as { camera: string | number }).camera\n      : align;\n\n    this._alignPos = parseAlign(alignVal, this.size);\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#anchorPoints anchorPoints}\n   * @ko Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnchors(): this {\n    this._anchors = this._mode.getAnchors();\n\n    return this;\n  }\n\n  /**\n   * Update Viewport's height to active panel's height\n   * @ko 현재 선택된 패널의 높이와 동일하도록 뷰포트의 높이를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAdaptiveHeight() {\n    const flicking = getFlickingAttached(this._flicking);\n    const activePanel = flicking.control.activePanel;\n\n    if (!flicking.horizontal || !flicking.adaptive || !activePanel) return;\n\n    flicking.viewport.setSize({\n      height: activePanel.height\n    });\n  }\n\n  /**\n   * Update current offset of the camera\n   * @ko 현재 카메라의 오프셋을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateOffset(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const position = this._position;\n    const unRenderedPanels = flicking.panels.filter(panel => !panel.rendered);\n\n    this._offset = unRenderedPanels\n      .filter(panel => panel.position + panel.offset < position)\n      .reduce((offset, panel) => offset + panel.sizeIncludingMargin, 0);\n\n    this._circularOffset = this._mode.getCircularOffset();\n\n    this.applyTransform();\n\n    return this;\n  }\n\n  /**\n   * Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again\n   * @ko 발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetNeedPanelHistory(): this {\n    this._needPanelTriggered = { prev: false, next: false };\n    return this;\n  }\n\n  /**\n   * Apply \"transform\" style with the current position to camera element\n   * @ko 현재 위치를 기준으로한 transform 스타일을 카메라 엘리먼트에 적용합니다.\n   * @return {this}\n   */\n  public applyTransform(): this {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking);\n    const renderer = flicking.renderer;\n\n    if (renderer.rendering) return this;\n\n    const actualPosition = this._position - this._alignPos - this._offset + this._circularOffset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n\n    return this;\n  }\n\n  private _resetInternalValues() {\n    this._position = 0;\n    this._alignPos = 0;\n    this._offset = 0;\n    this._circularOffset = 0;\n    this._circularEnabled = false;\n    this._range = { min: 0, max: 0 };\n    this._visiblePanels = [];\n    this._anchors = [];\n    this._needPanelTriggered = { prev: false, next: false };\n  }\n\n  private _refreshVisiblePanels() {\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = flicking.renderer.panels;\n\n    const newVisiblePanels = panels.filter(panel => this.canSee(panel));\n    const prevVisiblePanels = this._visiblePanels;\n    this._visiblePanels = newVisiblePanels;\n\n    const added: Panel[] = newVisiblePanels.filter(panel => !includes(prevVisiblePanels, panel));\n    const removed: Panel[] = prevVisiblePanels.filter(panel => !includes(newVisiblePanels, panel));\n\n    if (added.length > 0 || removed.length > 0) {\n      void flicking.renderer.render().then(() => {\n        flicking.trigger(new ComponentEvent(EVENTS.VISIBLE_CHANGE, {\n          added,\n          removed,\n          visiblePanels: newVisiblePanels\n        }));\n      });\n    }\n  }\n\n  private _checkNeedPanel(): void {\n    const needPanelTriggered = this._needPanelTriggered;\n\n    if (needPanelTriggered.prev && needPanelTriggered.next) return;\n\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      if (!needPanelTriggered.prev) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n      if (!needPanelTriggered.next) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n\n      return;\n    }\n\n    const cameraPosition = this._position;\n    const cameraSize = this.size;\n    const cameraRange = this._range;\n    const needPanelThreshold = flicking.needPanelThreshold;\n\n    const cameraPrev = cameraPosition - this._alignPos;\n    const cameraNext = cameraPrev + cameraSize;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    if (!needPanelTriggered.prev) {\n      const firstPanelPrev = firstPanel.range.min;\n\n      if (cameraPrev <= (firstPanelPrev + needPanelThreshold) || cameraPosition <= (cameraRange.min + needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n    }\n\n    if (!needPanelTriggered.next) {\n      const lastPanelNext = lastPanel.range.max;\n\n      if (cameraNext >= (lastPanelNext - needPanelThreshold) || cameraPosition >= (cameraRange.max - needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n    }\n  }\n\n  private _checkReachEnd(prevPos: number, newPos: number): void {\n    const flicking = getFlickingAttached(this._flicking);\n    const range = this._range;\n\n    const wasBetweenRange = prevPos > range.min && prevPos < range.max;\n    const isBetweenRange = newPos > range.min && newPos < range.max;\n\n    if (!wasBetweenRange || isBetweenRange) return;\n\n    const direction = newPos <= range.min ? DIRECTION.PREV : DIRECTION.NEXT;\n\n    flicking.trigger(new ComponentEvent(EVENTS.REACH_EDGE, {\n      direction\n    }));\n  }\n\n  private _checkTranslateSupport = () => {\n    const transforms = [\"webkitTransform\", \"msTransform\", \"MozTransform\", \"OTransform\", \"transform\"];\n\n    const supportedStyle = document.documentElement.style;\n    let transformName = \"\";\n    for (const prefixedTransform of transforms) {\n      if (prefixedTransform in supportedStyle) {\n        transformName = prefixedTransform;\n      }\n    }\n\n    if (!transformName) {\n      throw new FlickingError(ERROR.MESSAGE.TRANSFORM_NOT_SUPPORTED, ERROR.CODE.TRANSFORM_NOT_SUPPORTED);\n    }\n\n    this._transform = transformName;\n  };\n\n  private _updateMode() {\n    const flicking = getFlickingAttached(this._flicking);\n\n    if (flicking.circular) {\n      const circularMode = new CircularCameraMode(flicking);\n      const canSetCircularMode = circularMode.checkAvailability();\n\n      if (canSetCircularMode) {\n        this._mode = circularMode;\n      } else {\n        const fallbackMode = flicking.circularFallback;\n\n        this._mode = fallbackMode === CIRCULAR_FALLBACK.BOUND\n          ? new BoundCameraMode(flicking)\n          : new LinearCameraMode(flicking);\n      }\n\n      this._circularEnabled = canSetCircularMode;\n    } else {\n      this._mode = flicking.bound\n        ? new BoundCameraMode(flicking)\n        : new LinearCameraMode(flicking);\n      this._circularEnabled = false;\n    }\n  }\n\n  private _togglePanels(prevPos: number, pos: number): boolean {\n    if (pos === prevPos) return false;\n\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = flicking.renderer.panels;\n    const toggled = panels.map(panel => panel.toggle(prevPos, pos));\n\n    return toggled.some(isToggled => isToggled);\n  }\n}\n\nexport default Camera;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\nimport ImReady from \"@egjs/imready\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { ALIGN, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached, getMinusCompensatedIndex, includes, parsePanelAlign } from \"../utils\";\n\nimport RenderingStrategy from \"./strategy/RenderingStrategy\";\n\nexport interface RendererOptions {\n  align?: FlickingOptions[\"align\"];\n  strategy: RenderingStrategy;\n}\n\n/**\n * A component that manages {@link Panel} and its elements\n * @ko {@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트\n */\nabstract class Renderer {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _panels: Panel[];\n  protected _rendering: boolean;\n\n  // Options\n  protected _align: NonNullable<RendererOptions[\"align\"]>;\n  protected _strategy: RendererOptions[\"strategy\"];\n\n  // Internal states Getter\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._panels; }\n  /**\n   * A boolean value indicating whether rendering is in progress\n   * @ko 현재 렌더링이 시작되어 끝나기 전까지의 상태인지의 여부\n   * @type {boolean}\n   * @readonly\n   * @internal\n   */\n  public get rendering() { return this._rendering; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._panels.length; }\n  /**\n   * @internal\n   */\n  public get strategy() { return this._strategy; }\n\n  // Options Getter\n  /**\n   * A {@link Panel}'s {@link Panel#align align} value that applied to all panels\n   * @ko {@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: NonNullable<RendererOptions[\"align\"]>) {\n    this._align = val;\n\n    const panelAlign = parsePanelAlign(val);\n    this._panels.forEach(panel => { panel.align = panelAlign; });\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {Constants.ALIGN | string | number} [options.align=\"center\"] An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>\n   * @param {object} [options.strategy] An instance of RenderingStrategy(internal module)<ko>RenderingStrategy의 인스턴스(내부 모듈)</ko>\n   */\n  public constructor({\n    align = ALIGN.CENTER,\n    strategy\n  }: RendererOptions) {\n    this._flicking = null;\n    this._panels = [];\n    this._rendering = false;\n\n    // Bind options\n    this._align = align;\n    this._strategy = strategy;\n  }\n\n  /**\n   * Render panel elements inside the camera element\n   * @ko 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다\n   * @method\n   * @abstract\n   * @memberof Renderer\n   * @instance\n   * @name render\n   * @chainable\n   * @return {this}\n   */\n  public abstract render(): Promise<void>;\n\n  protected abstract _collectPanels(): void;\n  protected abstract _createPanel(el: any, options: Omit<PanelOptions, \"elementProvider\">): Panel;\n\n  /**\n   * Initialize Renderer\n   * @ko Renderer를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._collectPanels();\n\n    return this;\n  }\n\n  /**\n   * Destroy Renderer and return to initial state\n   * @ko Renderer를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._flicking = null;\n    this._panels = [];\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   */\n  public getPanel(index: number): Panel | null {\n    return this._panels[index] || null;\n  }\n\n  public forceRenderAllPanels(): Promise<void> {\n    this._panels.forEach(panel => panel.markForShow());\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update all panel sizes\n   * @ko 모든 패널의 크기를 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updatePanelSize(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = this._panels;\n\n    if (panels.length <= 0) return this;\n\n    if (flicking.panelsPerView > 0) {\n      const firstPanel = panels[0];\n      firstPanel.resize();\n\n      this._updatePanelSizeByGrid(firstPanel, panels);\n    } else {\n      flicking.panels.forEach(panel => panel.resize());\n    }\n\n    return this;\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {Array<object>} items An array of items to insert<ko>추가할 아이템들의 배열</ko>\n   * @param {number} [items.index] Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {any[]} [items.elements] An array of element or framework component with element in it<ko>엘리먼트의 배열 혹은 프레임워크에서 엘리먼트를 포함한 컴포넌트들의 배열</ko>\n   * @param {boolean} [items.hasDOMInElements] Whether it contains actual DOM elements. If set to true, renderer will add them to the camera element<ko>내부에 실제 DOM 엘리먼트들을 포함하고 있는지 여부. true로 설정할 경우, 렌더러는 해당 엘리먼트들을 카메라 엘리먼트 내부에 추가합니다</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   */\n  public batchInsert(...items: Array<{\n    index: number;\n    elements: any[];\n    hasDOMInElements: boolean;\n  }>): Panel[] {\n    const allPanelsInserted = this.batchInsertDefer(...items);\n\n    if (allPanelsInserted.length <= 0) return [];\n\n    this.updateAfterPanelChange(allPanelsInserted, []);\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Defers update\n   * camera position & others will be updated after calling updateAfterPanelChange\n   * @internal\n   */\n  public batchInsertDefer(...items: Array<{\n    index: number;\n    elements: any[];\n    hasDOMInElements: boolean;\n  }>) {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking);\n\n    const prevFirstPanel = panels[0];\n    const align = parsePanelAlign(this._align);\n\n    const allPanelsInserted = items.reduce((addedPanels, item) => {\n      const insertingIdx = getMinusCompensatedIndex(item.index, panels.length);\n      const panelsPushed = panels.slice(insertingIdx);\n      const panelsInserted = item.elements.map((el, idx) => this._createPanel(el, { index: insertingIdx + idx, align, flicking }));\n\n      panels.splice(insertingIdx, 0, ...panelsInserted);\n\n      if (item.hasDOMInElements) {\n        // Insert the actual elements as camera element's children\n        this._insertPanelElements(panelsInserted, panelsPushed[0] ?? null);\n      }\n\n      // Resize the newly added panels\n      if (flicking.panelsPerView > 0) {\n        const firstPanel = prevFirstPanel || panelsInserted[0].resize();\n\n        this._updatePanelSizeByGrid(firstPanel, panelsInserted);\n      } else {\n        panelsInserted.forEach(panel => panel.resize());\n      }\n\n      // Update panel indexes & positions\n      panelsPushed.forEach(panel => {\n        panel.increaseIndex(panelsInserted.length);\n        panel.updatePosition();\n      });\n\n      return [...addedPanels, ...panelsInserted];\n    }, []);\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {Array<object>} items An array of items to remove<ko>제거할 아이템들의 배열</ko>\n   * @param {number} [items.index] Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [items.deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @param {boolean} [items.hasDOMInElements=1] Whether it contains actual DOM elements. If set to true, renderer will remove them from the camera element<ko>내부에 실제 DOM 엘리먼트들을 포함하고 있는지 여부. true로 설정할 경우, 렌더러는 해당 엘리먼트들을 카메라 엘리먼트 내부에서 제거합니다</ko>\n   * @return An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public batchRemove(...items: Array<{\n    index: number;\n    deleteCount: number;\n    hasDOMInElements: boolean;\n  }>): Panel[] {\n    const allPanelsRemoved = this.batchRemoveDefer(...items);\n\n    if (allPanelsRemoved.length <= 0) return [];\n\n    this.updateAfterPanelChange([], allPanelsRemoved);\n\n    return allPanelsRemoved;\n  }\n\n  /**\n   * Defers update\n   * camera position & others will be updated after calling updateAfterPanelChange\n   * @internal\n   */\n  public batchRemoveDefer(...items: Array<{\n    index: number;\n    deleteCount: number;\n    hasDOMInElements: boolean;\n  }>) {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking);\n\n    const { control } = flicking;\n    const activePanel = control.activePanel;\n\n    const allPanelsRemoved = items.reduce((removed, item) => {\n      const { index, deleteCount } = item;\n      const removingIdx = getMinusCompensatedIndex(index, panels.length);\n\n      const panelsPulled = panels.slice(removingIdx + deleteCount);\n      const panelsRemoved = panels.splice(removingIdx, deleteCount);\n\n      if (panelsRemoved.length <= 0) return [];\n\n      // Update panel indexes & positions\n      panelsPulled.forEach(panel => {\n        panel.decreaseIndex(panelsRemoved.length);\n        panel.updatePosition();\n      });\n\n      if (item.hasDOMInElements) {\n        this._removePanelElements(panelsRemoved);\n      }\n\n      // Remove panel elements\n      panelsRemoved.forEach(panel => panel.destroy());\n\n      if (includes(panelsRemoved, activePanel)) {\n        control.resetActive();\n      }\n\n      return [...removed, ...panelsRemoved];\n    }, []);\n\n    return allPanelsRemoved;\n  }\n\n  /**\n   * @internal\n   */\n  public updateAfterPanelChange(panelsAdded: Panel[], panelsRemoved: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking);\n    const { camera, control } = flicking;\n    const panels = this._panels;\n    const activePanel = control.activePanel;\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    if (!flicking.animating) {\n      if (!activePanel || activePanel.removed) {\n        if (panels.length <= 0) {\n          // All panels removed\n          camera.lookAt(0);\n        } else {\n          let targetIndex = activePanel?.index ?? 0;\n          if (targetIndex > panels.length - 1) {\n            targetIndex = panels.length - 1;\n          }\n\n          void control.moveToPanel(panels[targetIndex], {\n            duration: 0\n          }).catch(() => void 0);\n        }\n      } else {\n        void control.moveToPanel(activePanel, {\n          duration: 0\n        }).catch(() => void 0);\n      }\n    }\n\n    flicking.camera.updateOffset();\n\n    if (panelsAdded.length > 0 || panelsRemoved.length > 0) {\n      flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n        added: panelsAdded,\n        removed: panelsRemoved\n      }));\n\n      this.checkPanelContentsReady([\n        ...panelsAdded,\n        ...panelsRemoved\n      ]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public checkPanelContentsReady(checkingPanels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking);\n    const resizeOnContentsReady = flicking.resizeOnContentsReady;\n    const panels = this._panels;\n\n    if (!resizeOnContentsReady || flicking.virtualEnabled) return;\n\n    const hasContents = (panel: Panel) => panel.element && !!panel.element.querySelector(\"img, video\");\n    checkingPanels = checkingPanels.filter(panel => hasContents(panel));\n\n    if (checkingPanels.length <= 0) return;\n\n    const contentsReadyChecker = new ImReady();\n\n    checkingPanels.forEach(panel => {\n      panel.loading = true;\n    });\n\n    contentsReadyChecker.on(\"readyElement\", e => {\n      if (!this._flicking) {\n        // Renderer's destroy() is called before\n        contentsReadyChecker.destroy();\n        return;\n      }\n\n      const panel = checkingPanels[e.index];\n      const camera = flicking.camera;\n      const control = flicking.control;\n      const prevProgressInPanel = control.activePanel\n        ? camera.getProgressInPanel(control.activePanel)\n        : 0;\n\n      panel.loading = false;\n      panel.resize();\n      panels.slice(panel.index + 1).forEach(panelBehind => panelBehind.updatePosition());\n\n      if (!flicking.initialized) return;\n\n      camera.updateRange();\n      camera.updateOffset();\n      camera.updateAnchors();\n\n      if (control.animating) {\n        // TODO: Need Axes update\n      } else {\n        control.updatePosition(prevProgressInPanel);\n        control.updateInput();\n      }\n    });\n\n    contentsReadyChecker.on(\"preReady\", e => {\n      if (this._flicking) {\n        void this.render();\n      }\n\n      if (e.readyCount === e.totalCount) {\n        contentsReadyChecker.destroy();\n      }\n    });\n\n    contentsReadyChecker.on(\"ready\", () => {\n      if (this._flicking) {\n        void this.render();\n      }\n      contentsReadyChecker.destroy();\n    });\n\n    contentsReadyChecker.check(checkingPanels.map(panel => panel.element));\n  }\n\n  protected _updateCameraAndControl() {\n    const flicking = getFlickingAttached(this._flicking);\n    const { camera, control } = flicking;\n\n    camera.updateRange();\n    camera.updateOffset();\n    camera.updateAnchors();\n    camera.resetNeedPanelHistory();\n    control.updateInput();\n  }\n\n  protected _showOnlyVisiblePanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes || panel.loading) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n  }\n\n  protected _updatePanelSizeByGrid(referencePanel: Panel, panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking);\n    const panelsPerView = flicking.panelsPerView;\n\n    if (panelsPerView <= 0) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"panelsPerView\", panelsPerView), ERROR.CODE.WRONG_OPTION);\n    }\n    if (panels.length <= 0) return;\n\n    const viewportSize = flicking.camera.size;\n    const gap = referencePanel.margin.prev + referencePanel.margin.next;\n\n    const panelSize = (viewportSize - gap * (panelsPerView - 1)) / panelsPerView;\n    const panelSizeObj = flicking.horizontal\n      ? { width: panelSize }\n      : { height: panelSize };\n    const firstPanelSizeObj = {\n      size: panelSize,\n      margin: referencePanel.margin,\n      ...(!flicking.horizontal && { height: referencePanel.height})\n    };\n\n    if (!flicking.noPanelStyleOverride) {\n      this._strategy.updatePanelSizes(flicking, panelSizeObj);\n    }\n\n    flicking.panels.forEach(panel => panel.resize(firstPanelSizeObj));\n  }\n\n  protected _removeAllChildsFromCamera() {\n    const flicking = getFlickingAttached(this._flicking);\n    const cameraElement = flicking.camera.element;\n\n    // Remove other elements\n    while (cameraElement.firstChild) {\n      cameraElement.removeChild(cameraElement.firstChild);\n    }\n  }\n\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null = null) {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const nextSiblingElement = nextSibling?.element || null;\n    const fragment = document.createDocumentFragment();\n\n    panels.forEach(panel => fragment.appendChild(panel.element));\n    cameraElement.insertBefore(fragment, nextSiblingElement);\n  }\n\n  protected _removePanelElements(panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking);\n    const cameraElement = flicking.camera.element;\n\n    panels.forEach(panel => {\n      cameraElement.removeChild(panel.element);\n    });\n  }\n}\n\nexport default Renderer;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached, toArray } from \"../utils\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nclass VanillaRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async render() {\n    const flicking = getFlickingAttached(this._flicking);\n    const strategy = this._strategy;\n\n    strategy.updateRenderingPanels(flicking);\n    strategy.renderPanels(flicking);\n\n    this._resetPanelElementOrder();\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n\n    this._removeAllTextNodes();\n    this._panels = this._strategy.collectPanels(flicking, camera.children);\n  }\n\n  protected _createPanel(el: HTMLElement, options: Omit<PanelOptions, \"elementProvider\">): Panel {\n    return this._strategy.createPanel(el, options);\n  }\n\n  private _resetPanelElementOrder() {\n    const flicking = getFlickingAttached(this._flicking);\n    const cameraEl = flicking.camera.element;\n\n    // We're using reversed panels here as last panel should be the last element of camera element\n    const reversedElements = this._strategy\n      .getRenderingElementsByOrder(flicking)\n      .reverse();\n\n    reversedElements.forEach((el, idx) => {\n      const nextEl = reversedElements[idx - 1] ? reversedElements[idx - 1] : null;\n\n      if (el.nextElementSibling !== nextEl) {\n        cameraEl.insertBefore(el, nextEl);\n      }\n    });\n  }\n\n  private _removeAllTextNodes() {\n    const flicking = getFlickingAttached(this._flicking);\n    const cameraElement = flicking.camera.element;\n\n    // Remove all text nodes in the camera element\n    toArray(cameraElement.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        cameraElement.removeChild(node);\n      }\n    });\n  }\n}\n\nexport default VanillaRenderer;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n * @internal\n */\nabstract class ExternalRenderer extends Renderer {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  protected _removePanelElements(panels: Panel[]): void {\n    // DO NOTHING, overrided to prevent an unexpected error\n  }\n\n  protected _removeAllChildsFromCamera(): void {\n    // DO NOTHING, overrided to prevent an unexpected error\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n}\n\nexport default ExternalRenderer;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { getElementSize, getProgress, getStyle, parseAlign, setSize } from \"../../utils\";\nimport { ALIGN, DIRECTION } from \"../../const/external\";\nimport { LiteralUnion, ValueOf } from \"../../type/internal\";\n\nimport ElementProvider from \"./provider/ElementProvider\";\n\nexport interface PanelOptions {\n  index: number;\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number;\n  flicking: Flicking;\n  elementProvider: ElementProvider;\n}\n\n/**\n * A slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass Panel {\n  // Internal States\n  protected _flicking: Flicking;\n  protected _elProvider: ElementProvider;\n  protected _index: number;\n  protected _pos: number;\n  protected _size: number;\n  protected _height: number;\n  protected _margin: { prev: number; next: number };\n  protected _alignPos: number; // Actual align pos\n  protected _rendered: boolean;\n  protected _removed: boolean;\n  protected _loading: boolean;\n  protected _toggleDirection: ValueOf<typeof DIRECTION>;\n  protected _toggled: boolean;\n  protected _togglePosition: number;\n\n  // Options\n  protected _align: PanelOptions[\"align\"];\n\n  // Internal States Getter\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._elProvider.element; }\n  /**\n   * @internal\n   * @readonly\n   */\n  public get elementProvider() { return this._elProvider; }\n  /**\n   * Index of the panel\n   * @ko 패널의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of the panel, including {@link Panel#alignPosition alignPosition}\n   * @ko 패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos + this._alignPos; }\n  /**\n   * Cached size of the panel element\n   * This is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else\n   * @ko 패널 엘리먼트의 캐시된 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() { return this._size; }\n  /**\n   * Panel's size including CSS `margin`\n   * This value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else\n   * @ko CSS `margin`을 포함한 패널의 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다\n   * @type {number}\n   * @readonly\n   */\n  public get sizeIncludingMargin() { return this._size + this._margin.prev + this._margin.next; }\n  /**\n   * Height of the panel element\n   * @ko 패널 엘리먼트의 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height; }\n  /**\n   * Cached CSS `margin` value of the panel element\n   * @ko 패널 엘리먼트의 CSS `margin` 값\n   * @type {object}\n   * @property {number} prev CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>\n   * @property {number} next CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>\n   * @readonly\n   */\n  public get margin() { return this._margin; }\n  /**\n   * Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at\n   * @ko 패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * A value indicating whether the panel's {@link Flicking#remove remove}d\n   * @ko 패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get removed() { return this._removed; }\n  /**\n   * A value indicating whether the panel's element is being rendered on the screen\n   * @ko 패널의 엘리먼트가 화면상에 렌더링되고있는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get rendered() { return this._rendered; }\n  /**\n   * A value indicating whether the panel's image/video is not loaded and waiting for resize\n   * @ko 패널 내부의 이미지/비디오가 아직 로드되지 않아 {@link Panel#resize resize}될 것인지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get loading() { return this._loading; }\n  /**\n   * Panel element's range of the bounding box\n   * @ko 패널 엘리먼트의 Bounding box 범위\n   * @type {object}\n   * @property {number} [min] Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)\n   * @property {number} [max] Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)\n   * @readonly\n   */\n  public get range() { return { min: this._pos, max: this._pos + this._size }; }\n  /**\n   * A value indicating whether the panel's position is toggled by circular behavior\n   * @ko 패널의 위치가 circular 동작에 의해 토글되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get toggled() { return this._toggled; }\n  /**\n   * A direction where the panel's position is toggled\n   * @ko 패널의 위치가 circular 동작에 의해 토글되는 방향\n   * @type {DIRECTION}\n   * @readonly\n   */\n  public get toggleDirection() { return this._toggleDirection; }\n  /**\n   * Actual position offset determined by {@link Panel#order}\n   * @ko {@link Panel#order}에 의한 실제 위치 변경값\n   * @type {number}\n   * @readonly\n   */\n  public get offset() {\n    const toggleDirection = this._toggleDirection;\n    const cameraRangeDiff = this._flicking.camera.rangeDiff;\n\n    return toggleDirection === DIRECTION.NONE || !this._toggled\n      ? 0\n      : toggleDirection === DIRECTION.PREV\n        ? -cameraRangeDiff\n        : cameraRangeDiff;\n  }\n\n  /**\n   * Progress of movement between previous or next panel relative to current panel\n   * @ko 이 패널로부터 이전/다음 패널으로의 이동 진행률\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n\n    return this.index - flicking.camera.progress;\n  }\n\n  /**\n   * Progress of movement between points that panel is completely invisible outside of viewport(prev direction: -1, selected point: 0, next direction: 1)\n   * @ko 현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도(prev방향: -1, 선택 지점: 0, next방향: 1)\n   * @type {number}\n   * @readonly\n   */\n  public get outsetProgress() {\n    const position = this.position + this.offset;\n    const alignPosition = this._alignPos;\n    const camera = this._flicking.camera;\n    const camPos = camera.position;\n\n    if (camPos === position) {\n      return 0;\n    }\n\n    if (camPos < position) {\n      const disappearPosNext = position + (camera.size - camera.alignPosition) + alignPosition;\n\n      return -getProgress(camPos, position, disappearPosNext);\n    } else {\n      const disappearPosPrev = position - (camera.alignPosition + this._size - alignPosition);\n\n      return 1 - getProgress(camPos, disappearPosPrev, position);\n    }\n  }\n\n  /**\n   * Percentage of area where panel is visible in the viewport\n   * @ko 뷰포트 안에서 패널이 보이는 영역의 비율\n   * @type {number}\n   * @readonly\n   */\n  public get visibleRatio() {\n    const range = this.range;\n    const size = this._size;\n    const offset = this.offset;\n    const visibleRange = this._flicking.camera.visibleRange;\n\n    const checkingRange = {\n      min: range.min + offset,\n      max: range.max + offset\n    };\n\n    if (checkingRange.max <= visibleRange.min || checkingRange.min >= visibleRange.max) {\n      return 0;\n    }\n\n    let visibleSize = size;\n\n    if (visibleRange.min > checkingRange.min) {\n      visibleSize -= visibleRange.min - checkingRange.min;\n    }\n    if (visibleRange.max < checkingRange.max) {\n      visibleSize -= checkingRange.max - visibleRange.max;\n    }\n\n    return visibleSize / size;\n  }\n\n  public set loading(val: boolean) { this._loading = val; }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element\n   * @ko {@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: PanelOptions[\"align\"]) {\n    this._align = val;\n    this._updateAlignPos();\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   * @param {Flicking} [options.elementProvider] A provider instance that redirects elements<ko>실제 엘리먼트를 반환하는 엘리먼트 공급자의 인스턴스</ko>\n   */\n  public constructor({\n    index,\n    align,\n    flicking,\n    elementProvider\n  }: PanelOptions) {\n    this._index = index;\n    this._flicking = flicking;\n    this._elProvider = elementProvider;\n\n    this._align = align;\n\n    this._removed = false;\n    this._rendered = true;\n    this._loading = false;\n    this._resetInternalStates();\n  }\n\n  /**\n   * Mark panel element to be appended on the camera element\n   * @internal\n   */\n  public markForShow() {\n    this._rendered = true;\n    this._elProvider.show(this._flicking);\n  }\n\n  /**\n   * Mark panel element to be removed from the camera element\n   * @internal\n   */\n  public markForHide() {\n    this._rendered = false;\n    this._elProvider.hide(this._flicking);\n  }\n\n  /**\n   * Update size of the panel\n   * @ko 패널의 크기를 갱신합니다\n   * @param {object} cached Predefined cached size of the panel<ko>사전에 캐시된 패널의 크기 정보</ko>\n   * @chainable\n   * @return {this}\n   */\n  public resize(cached?: {\n    size: number;\n    height?: number;\n    margin: { prev: number; next: number };\n  }): this {\n    const el = this.element;\n    const flicking = this._flicking;\n    const {\n      horizontal,\n      useFractionalSize\n    } = flicking;\n\n    if (cached) {\n      this._size = cached.size;\n      this._margin = { ...cached.margin };\n      this._height = cached.height ?? getElementSize({\n        el,\n        horizontal: false,\n        useFractionalSize,\n        useOffset: true,\n        style: getStyle(el)\n      });\n    } else {\n      const elStyle = getStyle(el);\n\n      this._size = getElementSize({\n        el,\n        horizontal,\n        useFractionalSize,\n        useOffset: true,\n        style: elStyle\n      });\n\n      this._margin = horizontal\n        ? {\n          prev: parseFloat(elStyle.marginLeft || \"0\"),\n          next: parseFloat(elStyle.marginRight || \"0\")\n        } : {\n          prev: parseFloat(elStyle.marginTop || \"0\"),\n          next: parseFloat(elStyle.marginBottom || \"0\")\n        };\n\n      this._height = horizontal\n        ? getElementSize({\n          el,\n          horizontal: false,\n          useFractionalSize,\n          useOffset: true,\n          style: elStyle\n        })\n        : this._size;\n    }\n\n    this.updatePosition();\n    this._updateAlignPos();\n\n    return this;\n  }\n\n  /**\n   * Change panel's size. This will change the actual size of the panel element by changing its CSS width/height property\n   * @ko 패널 크기를 변경합니다. 패널 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New panel size<ko>새 패널 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @chainable\n   * @return {this}\n   */\n  public setSize(size: Partial<{\n    width: number | string;\n    height: number | string;\n  }>): this {\n    setSize(this.element, size);\n\n    return this;\n  }\n\n  /**\n   * Check whether the given element is inside of this panel's {@link Panel#element element}\n   * @ko 해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다\n   * @param {HTMLElement} element The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>\n   * @return {boolean} A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>\n   */\n  public contains(element: HTMLElement): boolean {\n    return !!this.element?.contains(element);\n  }\n\n  /**\n   * Reset internal state and set {@link Panel#removed removed} to `true`\n   * @ko 내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.\n   * @return {void}\n   */\n  public destroy(): void {\n    this._resetInternalStates();\n    this._removed = true;\n  }\n\n  /**\n   * Check whether the given position is inside of this panel's {@link Panel#range range}\n   * @ko 주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.\n   * @param {number} pos A position to check<ko>확인하고자 하는 좌표</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @return {boolean} A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>\n   */\n  public includePosition(pos: number, includeMargin: boolean = false): boolean {\n    return this.includeRange(pos, pos, includeMargin);\n  }\n\n  /**\n   * Check whether the given range is fully included in this panel's area (inclusive)\n   * @ko 주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @returns {boolean} A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>\n   */\n  public includeRange(min: number, max: number, includeMargin: boolean = false): boolean {\n    const margin = this._margin;\n    const panelRange = this.range;\n\n    if (includeMargin) {\n      panelRange.min -= margin.prev;\n      panelRange.max += margin.next;\n    }\n\n    return max >= panelRange.min && min <= panelRange.max;\n  }\n\n  /**\n   * Check whether the panel is visble in the given range (exclusive)\n   * @ko 주어진 범위 내에서 이 패널의 일부가 보여지는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @returns {boolean} A Boolean value indicating whether the panel is visible<ko>해당 범위 내에서 패널을 볼 수 있는지 여부</ko>\n   */\n  public isVisibleOnRange(min: number, max: number): boolean {\n    const panelRange = this.range;\n\n    return max > panelRange.min && min < panelRange.max;\n  }\n\n  /**\n   * Move {@link Camera} to this panel\n   * @ko {@link Camera}를 이 패널로 이동합니다\n   * @param {number} [duration] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @returns {Promise<void>} A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>\n   */\n  public focus(duration?: number) {\n    return this._flicking.moveTo(this._index, duration);\n  }\n\n  /**\n   * Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel\n   * @ko 이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>이전 패널</ko>\n   */\n  public prev(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === 0 ? panelCount - 1 : index - 1)\n      : renderer.getPanel(index - 1);\n  }\n\n  /**\n   * Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel\n   * @ko 다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>다음 패널</ko>\n   */\n  public next(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === panelCount - 1 ? 0 : index + 1)\n      : renderer.getPanel(index + 1);\n  }\n\n  /**\n   * Increase panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increaseIndex(val: number): this {\n    this._index += Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Decrease panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreaseIndex(val: number): this {\n    this._index -= Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  public updatePosition(): this {\n    const prevPanel = this._flicking.renderer.panels[this._index - 1];\n\n    this._pos = prevPanel\n      ? prevPanel.range.max + prevPanel.margin.next + this._margin.prev\n      : this._margin.prev;\n\n    return this;\n  }\n\n  /**\n   * @internal\n   * @return {boolean} toggled\n   */\n  public toggle(prevPos: number, newPos: number): boolean {\n    const toggleDirection = this._toggleDirection;\n    const togglePosition = this._togglePosition;\n\n    if (toggleDirection === DIRECTION.NONE || newPos === prevPos) return false;\n\n    const prevToggled = this._toggled;\n\n    if (newPos > prevPos) {\n      if (togglePosition >= prevPos && togglePosition <= newPos) {\n        this._toggled = toggleDirection === DIRECTION.NEXT;\n      }\n    } else {\n      if (togglePosition <= prevPos && togglePosition >= newPos) {\n        this._toggled = toggleDirection !== DIRECTION.NEXT;\n      }\n    }\n\n    return prevToggled !== this._toggled;\n  }\n\n  /**\n   * @internal\n   */\n  public updateCircularToggleDirection(): this {\n    const flicking = this._flicking;\n\n    if (!flicking.circularEnabled) {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n      this._toggled = false;\n      return this;\n    }\n\n    const camera = flicking.camera;\n    const camRange = camera.range;\n    const camAlignPosition = camera.alignPosition;\n    const camVisibleRange = camera.visibleRange;\n    const camVisibleSize = camVisibleRange.max - camVisibleRange.min;\n\n    const minimumVisible = camRange.min - camAlignPosition;\n    const maximumVisible = camRange.max - camAlignPosition + camVisibleSize;\n\n    const shouldBeVisibleAtMin = this.includeRange(maximumVisible - camVisibleSize, maximumVisible, false);\n    const shouldBeVisibleAtMax = this.includeRange(minimumVisible, minimumVisible + camVisibleSize, false);\n\n    this._toggled = false;\n    if (shouldBeVisibleAtMin) {\n      this._toggleDirection = DIRECTION.PREV;\n      this._togglePosition = this.range.max + camRange.min - camRange.max + camAlignPosition;\n      this.toggle(Infinity, camera.position);\n    } else if (shouldBeVisibleAtMax) {\n      this._toggleDirection = DIRECTION.NEXT;\n      this._togglePosition = this.range.min + camRange.max - camVisibleSize + camAlignPosition;\n      this.toggle(-Infinity, camera.position);\n    } else {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n    }\n\n    return this;\n  }\n\n  private _updateAlignPos() {\n    this._alignPos = parseAlign(this._align, this._size);\n  }\n\n  private _resetInternalStates() {\n    this._size = 0;\n    this._pos = 0;\n    this._margin = { prev: 0, next: 0 };\n    this._height = 0;\n    this._alignPos = 0;\n    this._toggled = false;\n    this._togglePosition = 0;\n    this._toggleDirection = DIRECTION.NONE;\n  }\n}\n\nexport default Panel;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport Panel, { PanelOptions } from \"../../core/panel/Panel\";\nimport ElementProvider from \"../../core/panel/provider/ElementProvider\";\nimport { DIRECTION } from \"../../const/external\";\nimport { parsePanelAlign } from \"../../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nexport interface NormalRenderingStrategyOptions {\n  providerCtor: new (...args: any) => ElementProvider;\n}\n\n\nclass NormalRenderingStrategy implements RenderingStrategy {\n  private _providerCtor: NormalRenderingStrategyOptions[\"providerCtor\"];\n\n  public constructor({ providerCtor }: NormalRenderingStrategyOptions) {\n    this._providerCtor = providerCtor;\n  }\n\n  public renderPanels() {\n    // DO_NOTHING\n  }\n\n  public getRenderingIndexesByOrder(flicking: Flicking) {\n    const renderedPanels = flicking.renderer.panels.filter(panel => panel.rendered);\n    const toggledPrev = renderedPanels.filter(panel => panel.toggled && panel.toggleDirection === DIRECTION.PREV);\n    const toggledNext = renderedPanels.filter(panel => panel.toggled && panel.toggleDirection === DIRECTION.NEXT);\n    const notToggled = renderedPanels.filter(panel => !panel.toggled);\n\n    return [...toggledPrev, ...notToggled, ...toggledNext].map(panel => panel.index);\n  }\n\n  public getRenderingElementsByOrder(flicking: Flicking) {\n    const panels = flicking.panels;\n\n    return this.getRenderingIndexesByOrder(flicking).map(index => panels[index].element);\n  }\n\n  public updateRenderingPanels(flicking: Flicking) {\n    if (flicking.renderOnlyVisible) {\n      this._showOnlyVisiblePanels(flicking);\n    } else {\n      flicking.panels.forEach(panel => panel.markForShow());\n    }\n  }\n\n  public collectPanels(\n    flicking: Flicking,\n    elements: any[]\n  ) {\n    const align = parsePanelAlign(flicking.renderer.align);\n\n    return elements.map((el, index) => new Panel({\n      index,\n      elementProvider: new this._providerCtor(el),\n      align,\n      flicking\n    }));\n  }\n\n  public createPanel(\n    element: any,\n    options: Omit<PanelOptions, \"elementProvider\">\n  ) {\n    return new Panel({\n      ...options,\n      elementProvider: new this._providerCtor(element)\n    });\n  }\n\n  public updatePanelSizes(flicking: Flicking, size: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    flicking.panels.forEach(panel => panel.setSize(size));\n  }\n\n  private _showOnlyVisiblePanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes || panel.loading) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n}\n\nexport default NormalRenderingStrategy;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { DIRECTION } from \"../../const/external\";\nimport { circulateIndex } from \"../../utils\";\n\nimport Panel, { PanelOptions } from \"./Panel\";\nimport VirtualElementProvider from \"./provider/VirtualElementProvider\";\n\ninterface VirtualPanelOptions extends PanelOptions {\n  elementProvider: VirtualElementProvider;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass VirtualPanel extends Panel {\n  protected _elProvider: VirtualElementProvider;\n  protected _cachedInnerHTML: string | null;\n\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._elProvider.element; }\n\n  /**\n   * Cached innerHTML by the previous render function\n   * @ko 이전 렌더링에서 캐시된 innerHTML 정보\n   * @type {string|null}\n   * @readonly\n   */\n  public get cachedInnerHTML() { return this._cachedInnerHTML; }\n\n  /**\n   * An number for indexing which element it will be rendered on\n   * @ko 몇 번째 엘리먼트에 렌더링될 것인지를 나타내는 숫자\n   * @type {number}\n   * @readonly\n   */\n  public get elementIndex() {\n    const flicking = this._flicking;\n    const virtualElCount = flicking.panelsPerView + 1;\n    const panelCount = flicking.panelCount;\n    let index = this._index;\n\n    if (this._toggled) {\n      // To prevent element duplication\n      index = this._toggleDirection === DIRECTION.NEXT\n        ? index + panelCount\n        : index - panelCount;\n    }\n\n    return circulateIndex(index, virtualElCount);\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: VirtualPanelOptions) {\n    super(options);\n\n    options.elementProvider.init(this);\n    this._elProvider = options.elementProvider;\n    this._cachedInnerHTML = null;\n  }\n\n  public cacheRenderResult(result: string) {\n    this._cachedInnerHTML = result;\n  }\n\n  public uncacheRenderResult() {\n    this._cachedInnerHTML = null;\n  }\n\n  public render() {\n    const flicking = this._flicking;\n    const { renderPanel, cache } = flicking.virtual;\n\n    const element = this._elProvider.element;\n    const newInnerHTML = this._cachedInnerHTML || renderPanel(this, this._index);\n\n    if (newInnerHTML === element.innerHTML) return;\n\n    element.innerHTML = newInnerHTML;\n\n    if (cache) {\n      this.cacheRenderResult(newInnerHTML);\n    }\n  }\n\n  public increaseIndex(val: number) {\n    this.uncacheRenderResult();\n    return super.increaseIndex(val);\n  }\n\n  public decreaseIndex(val: number) {\n    this.uncacheRenderResult();\n    return super.decreaseIndex(val);\n  }\n}\n\nexport default VirtualPanel;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { PanelOptions } from \"../../core/panel/Panel\";\nimport VirtualPanel from \"../../core/panel/VirtualPanel\";\nimport VirtualElementProvider from \"../../core/panel/provider/VirtualElementProvider\";\nimport { parsePanelAlign, range, setSize } from \"../../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass VirtualRenderingStrategy implements RenderingStrategy {\n  public renderPanels(flicking: Flicking) {\n    const virtualManager = flicking.virtual;\n    const visiblePanels = flicking.visiblePanels as VirtualPanel[];\n    const invisibleIndexes = range(flicking.panelsPerView + 1);\n\n    visiblePanels.forEach(panel => {\n      const elementIndex = panel.elementIndex;\n\n      panel.render();\n\n      virtualManager.show(elementIndex);\n      invisibleIndexes[elementIndex] = -1;\n    });\n\n    invisibleIndexes\n      .filter(val => val >= 0)\n      .forEach(idx => {\n        virtualManager.hide(idx);\n      });\n  }\n\n  public getRenderingIndexesByOrder(flicking: Flicking) {\n    const virtualManager = flicking.virtual;\n    const visiblePanels = [...flicking.visiblePanels]\n      .filter(panel => panel.rendered)\n      .sort((panel1, panel2) => {\n        return (panel1.position + panel1.offset) - (panel2.position + panel2.offset);\n      }) as VirtualPanel[];\n\n    if (visiblePanels.length <= 0) return virtualManager.elements.map((_, idx) => idx);\n\n    const visibleIndexes = visiblePanels.map(panel => panel.elementIndex);\n    const invisibleIndexes = virtualManager.elements\n      .map((el, idx) => ({ ...el, idx }))\n      .filter(el => !el.visible)\n      .map(el => el.idx);\n\n    return [...visibleIndexes, ...invisibleIndexes];\n  }\n\n  public getRenderingElementsByOrder(flicking: Flicking) {\n    const virtualManager = flicking.virtual;\n    const elements = virtualManager.elements;\n\n    return this.getRenderingIndexesByOrder(flicking).map(index => elements[index].nativeElement);\n  }\n\n  public updateRenderingPanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes || panel.loading) {\n        panel.markForShow();\n      } else {\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n\n  public collectPanels(flicking: Flicking) {\n    const align = parsePanelAlign(flicking.renderer.align);\n\n    return range(flicking.virtual.initialPanelCount).map(index => new VirtualPanel({\n      index,\n      elementProvider: new VirtualElementProvider(flicking),\n      align,\n      flicking\n    }));\n  }\n\n  public createPanel(_el: any, options: PanelOptions) {\n    return new VirtualPanel({\n      ...options,\n      elementProvider: new VirtualElementProvider(options.flicking)\n    });\n  }\n\n  public updatePanelSizes(flicking: Flicking, size: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    flicking.virtual.elements.forEach(el => {\n      setSize(el.nativeElement, size);\n    });\n    flicking.panels.forEach(panel => panel.setSize(size));\n  }\n}\n\nexport default VirtualRenderingStrategy;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nimport FlickingError from \"./core/FlickingError\";\nimport Viewport from \"./core/Viewport\";\nimport AutoResizer from \"./core/AutoResizer\";\nimport { Panel } from \"./core/panel\";\nimport { VanillaElementProvider } from \"./core/panel/provider\";\nimport VirtualManager, { VirtualOptions } from \"./core/VirtualManager\";\nimport { Control, SnapControl, SnapControlOptions, FreeControl, StrictControl, FreeControlOptions, StrictControlOptions } from \"./control\";\nimport { Camera } from \"./camera\";\nimport { Renderer, VanillaRenderer, ExternalRenderer, RendererOptions, NormalRenderingStrategy, VirtualRenderingStrategy } from \"./renderer\";\nimport { EVENTS, ALIGN, MOVE_TYPE, DIRECTION, CIRCULAR_FALLBACK } from \"./const/external\";\nimport * as ERROR from \"./const/error\";\nimport { findIndex, getElement, includes, parseElement } from \"./utils\";\nimport { HoldStartEvent, HoldEndEvent, MoveStartEvent, SelectEvent, MoveEvent, MoveEndEvent, WillChangeEvent, WillRestoreEvent, NeedPanelEvent, VisibleChangeEvent, ReachEdgeEvent, ReadyEvent, AfterResizeEvent, BeforeResizeEvent, ChangedEvent, RestoredEvent, PanelChangeEvent } from \"./type/event\";\nimport { LiteralUnion, ValueOf } from \"./type/internal\";\nimport { ElementLike, Plugin, Status, MoveTypeOptions } from \"./type/external\";\n\n/**\n * @interface\n */\nexport interface FlickingEvents {\n  [EVENTS.READY]: ReadyEvent;\n  [EVENTS.BEFORE_RESIZE]: BeforeResizeEvent;\n  [EVENTS.AFTER_RESIZE]: AfterResizeEvent;\n  [EVENTS.HOLD_START]: HoldStartEvent;\n  [EVENTS.HOLD_END]: HoldEndEvent;\n  [EVENTS.MOVE_START]: MoveStartEvent;\n  [EVENTS.MOVE]: MoveEvent;\n  [EVENTS.MOVE_END]: MoveEndEvent;\n  [EVENTS.WILL_CHANGE]: WillChangeEvent;\n  [EVENTS.CHANGED]: ChangedEvent;\n  [EVENTS.WILL_RESTORE]: WillRestoreEvent;\n  [EVENTS.RESTORED]: RestoredEvent;\n  [EVENTS.SELECT]: SelectEvent;\n  [EVENTS.NEED_PANEL]: NeedPanelEvent;\n  [EVENTS.VISIBLE_CHANGE]: VisibleChangeEvent;\n  [EVENTS.REACH_EDGE]: ReachEdgeEvent;\n  [EVENTS.PANEL_CHANGE]: PanelChangeEvent;\n}\n\n/**\n * @interface\n */\nexport interface FlickingOptions {\n  // UI / LAYOUT\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number | { panel: number | string; camera: number | string };\n  defaultIndex: number;\n  horizontal: boolean;\n  circular: boolean;\n  circularFallback: LiteralUnion<ValueOf<typeof CIRCULAR_FALLBACK>>;\n  bound: boolean;\n  adaptive: boolean;\n  panelsPerView: number;\n  noPanelStyleOverride: boolean;\n  resizeOnContentsReady: boolean;\n  nested: boolean;\n\n  // EVENT\n  needPanelThreshold: number;\n  preventEventsBeforeInit: boolean;\n\n  // ANIMATION\n  deceleration: number;\n  duration: number;\n  easing: (x: number) => number;\n\n  // INPUT\n  inputType: string[];\n  moveType: ValueOf<typeof MOVE_TYPE> | MoveTypeOptions<ValueOf<typeof MOVE_TYPE>>;\n  threshold: number;\n  interruptable: boolean;\n  bounce: number | string | [number | string, number | string];\n  iOSEdgeSwipeThreshold: number;\n  preventClickOnDrag: boolean;\n  disableOnInit: boolean;\n  changeOnHold: boolean;\n\n  // PERFORMANCE\n  renderOnlyVisible: boolean;\n  virtual: VirtualOptions | null;\n\n  // OTHERS\n  autoInit: boolean;\n  autoResize: boolean;\n  useResizeObserver: boolean;\n  resizeDebounce: number;\n  maxResizeDebounce: number;\n  useFractionalSize: boolean;\n  externalRenderer: ExternalRenderer | null;\n\n  // @deprecated\n  renderExternal: {\n    renderer: new (options: RendererOptions) => ExternalRenderer;\n    rendererOptions: RendererOptions;\n  } | null;\n}\n\n/**\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|@egjs/component}\n * @requires {@link https://github.com/naver/egjs-axes|@egjs/axes}\n */\nclass Flicking extends Component<FlickingEvents> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @type {string}\n   * @readonly\n   * @example\n   * ```ts\n   * Flicking.VERSION;  // ex) 4.0.0\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n\n  // Core components\n  private _viewport: Viewport;\n  private _autoResizer: AutoResizer;\n  private _camera: Camera;\n  private _control: Control;\n  private _renderer: Renderer;\n  private _virtualManager: VirtualManager;\n\n  // Options\n  private _align: FlickingOptions[\"align\"];\n  private _defaultIndex: FlickingOptions[\"defaultIndex\"];\n  private _horizontal: FlickingOptions[\"horizontal\"];\n  private _circular: FlickingOptions[\"circular\"];\n  private _circularFallback: FlickingOptions[\"circularFallback\"];\n  private _bound: FlickingOptions[\"bound\"];\n  private _adaptive: FlickingOptions[\"adaptive\"];\n  private _panelsPerView: FlickingOptions[\"panelsPerView\"];\n  private _noPanelStyleOverride: FlickingOptions[\"noPanelStyleOverride\"];\n  private _resizeOnContentsReady: FlickingOptions[\"resizeOnContentsReady\"];\n  private _virtual: FlickingOptions[\"virtual\"];\n  private _nested: FlickingOptions[\"nested\"];\n\n  private _needPanelThreshold: FlickingOptions[\"needPanelThreshold\"];\n  private _preventEventsBeforeInit: FlickingOptions[\"preventEventsBeforeInit\"];\n\n  private _deceleration: FlickingOptions[\"deceleration\"];\n  private _duration: FlickingOptions[\"duration\"];\n  private _easing: FlickingOptions[\"easing\"];\n\n  private _inputType: FlickingOptions[\"inputType\"];\n  private _moveType: FlickingOptions[\"moveType\"];\n  private _threshold: FlickingOptions[\"threshold\"];\n  private _interruptable: FlickingOptions[\"interruptable\"];\n  private _bounce: FlickingOptions[\"bounce\"];\n  private _iOSEdgeSwipeThreshold: FlickingOptions[\"iOSEdgeSwipeThreshold\"];\n  private _preventClickOnDrag: FlickingOptions[\"preventClickOnDrag\"];\n  private _disableOnInit: FlickingOptions[\"disableOnInit\"];\n  private _changeOnHold: FlickingOptions[\"changeOnHold\"];\n\n  private _renderOnlyVisible: FlickingOptions[\"renderOnlyVisible\"];\n\n  private _autoInit: FlickingOptions[\"autoInit\"];\n  private _autoResize: FlickingOptions[\"autoResize\"];\n  private _useResizeObserver: FlickingOptions[\"useResizeObserver\"];\n  private _resizeDebounce: FlickingOptions[\"resizeDebounce\"];\n  private _maxResizeDebounce: FlickingOptions[\"maxResizeDebounce\"];\n  private _useFractionalSize: FlickingOptions[\"useFractionalSize\"];\n  private _externalRenderer: FlickingOptions[\"externalRenderer\"];\n  private _renderExternal: FlickingOptions[\"renderExternal\"];\n\n  // Internal State\n  private _initialized: boolean;\n  private _plugins: Plugin[];\n\n  // Components\n  /**\n   * {@link Control} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Control} 인스턴스\n   * @type {Control}\n   * @default SnapControl\n   * @readonly\n   * @see Control\n   * @see SnapControl\n   * @see FreeControl\n   */\n  public get control() { return this._control; }\n  /**\n   * {@link Camera} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Camera} 인스턴스\n   * @type {Camera}\n   * @default LinearCamera\n   * @readonly\n   * @see Camera\n   * @see LinearCamera\n   * @see BoundCamera\n   * @see CircularCamera\n   */\n  public get camera() { return this._camera; }\n  /**\n   * {@link Renderer} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Renderer} 인스턴스\n   * @type {Renderer}\n   * @default VanillaRenderer\n   * @readonly\n   * @see Renderer\n   * @see VanillaRenderer\n   * @see ExternalRenderer\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * A component that manages viewport size\n   * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n   * @type {Viewport}\n   * @readonly\n   * @see Viewport\n   */\n  public get viewport() { return this._viewport; }\n  // Internal States\n  /**\n   * Whether Flicking's {@link Flicking#init init()} is called.\n   * This is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.\n   * @ko Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n   * 이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._camera.circularEnabled; }\n  /**\n   * Whether the `virtual` option is enabled.\n   * The {@link Flicking#virtual virtual} option can't be enabled when  {@link Flicking#panelsPerView panelsPerView} is less or equal than zero.\n   * @ko {@link Flicking#virtual virtual} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#virtual virtual} 옵션은 {@link Flicking#panelsPerView panelsPerView} 옵션의 값이 0보다 같거나 작으면 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get virtualEnabled() { return this._panelsPerView > 0 && this._virtual != null; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get index() { return this._control.activeIndex; }\n  /**\n   * The root(`.flicking-viewport`) element\n   * @ko root(`.flicking-viewport`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._viewport.element; }\n  /**\n   * Currently active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel}\n   * @readonly\n   * @see Panel\n   */\n  public get currentPanel() { return this._control.activePanel; }\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._renderer.panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._renderer.panelCount; }\n  /**\n   * Array of panels that is visible at the current position\n   * @ko 현재 보이는 패널의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get visiblePanels() { return this._camera.visiblePanels; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._control.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._control.holding; }\n  /**\n   * A current list of activated plugins\n   * @ko 현재 활성화된 플러그인 목록\n   * @type {Plugin[]}\n   * @readonly\n   */\n  public get activePlugins() { return this._plugins; }\n\n  // Options Getter\n  // UI / LAYOUT\n  /**\n   * Align position of the panels within viewport. You can set different values each for the panel and camera\n   * @ko 뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다\n   * @type {ALIGN | string | number | { panel: string | number, camera: string | number }}\n   * @property {ALIGN | string | number} panel The align value for each {@link Panel}s<ko>개개의 {@link Panel}에 적용할 값</ko>\n   * @property {ALIGN | string | number} camera The align value for {@link Camera}<ko>{@link Camera}에 적용할 값</ko>\n   * @default \"center\"\n   * @see {@link https://naver.github.io/egjs-flicking/Options#align align ( Options )}\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // Literal strings\n   *   \"prev\", \"center\", \"next\",\n   *   // % values, applied to both panel & camera\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000,\n   *   // Setting a different value for panel & camera\n   *   { panel: \"10%\", camera: \"25%\" }\n   * ];\n   *\n   * possibleOptions.forEach(align => {\n   *   new Flicking(\"#el\", { align });\n   * });\n   * ```\n   */\n  public get align() { return this._align; }\n  /**\n   * Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer\n   * @ko Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다\n   * @type {number}\n   * @default 0\n   * @see {@link https://naver.github.io/egjs-flicking/Options#defaultindex defaultIndex ( Options )}\n   */\n  public get defaultIndex() { return this._defaultIndex; }\n  /**\n   * Direction of panel movement (true: horizontal, false: vertical)\n   * @ko 패널 이동 방향 (true: 가로방향, false: 세로방향)\n   * @type {boolean}\n   * @default true\n   * @see {@link https://naver.github.io/egjs-flicking/Options#horizontal horizontal ( Options )}\n   */\n  public get horizontal() { return this._horizontal; }\n  /**\n   * Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.\n   * @ko 순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#circular circular ( Options )}\n   */\n  public get circular() { return this._circular; }\n  /**\n   * Set panel control mode for the case when circular cannot be enabled.\n   * \"linear\" will set the view's range from the top of the first panel to the top of the last panel.\n   * \"bound\" will prevent the view from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel.\n   * @ko 순환 모드 사용 불가능시 사용할 패널 조작 범위 설정 방식을 변경합니다.\n   * \"linear\" 사용시 시점이 첫번째 엘리먼트 위에서부터 마지막 엘리먼트 위까지 움직일 수 있도록 설정합니다.\n   * \"bound\" 사용시 시점이 첫번째 엘리먼트와 마지막 엘리먼트의 끝과 끝 사이에서 움직일 수 있도록 설정합니다.\n   * @see CIRCULAR_FALLBACK\n   * @type {string}\n   * @default \"linear\"\n   * @see {@link https://naver.github.io/egjs-flicking/Options#circularfallback circularFallback ( Options )}\n   */\n  public get circularFallback() { return this._circularFallback; }\n  /**\n   * Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n   * Only can be enabled when `circular=false`\n   * @ko 뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n   * `circular=false`인 경우에만 사용할 수 있습니다\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#bound bound ( Options )}\n   */\n  public get bound() { return this._bound; }\n  /**\n   * Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`\n   * @ko 이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#adaptive adaptive ( Options )}\n   */\n  public get adaptive() { return this._adaptive; }\n  /**\n   * A visible number of panels on viewport. Enabling this option will automatically resize panel size\n   * @ko 한 화면에 보이는 패널의 개수. 이 옵션을 활성화할 경우 패널의 크기를 강제로 재조정합니다\n   * @type {number}\n   * @default -1\n   * @see {@link https://naver.github.io/egjs-flicking/Options#panelsperview panelsPerView ( Options )}\n   */\n  public get panelsPerView() { return this._panelsPerView; }\n  /**\n   * Enabling this option will not change `width/height` style of the panels if {@link Flicking#panelsPerView} is enabled.\n   * This behavior can be useful in terms of performance when you're manually managing all panel sizes\n   * @ko 이 옵션을 활성화할 경우, {@link Flicking#panelsPerView} 옵션이 활성화되었을 때 패널의 `width/height` 스타일을 변경하지 않도록 설정합니다.\n   * 모든 패널들의 크기를 직접 관리하고 있을 경우, 이 옵션을 활성화하면 성능면에서 유리할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get noPanelStyleOverride() { return this._noPanelStyleOverride; }\n  /**\n   * Enabling this option will automatically call {@link Flicking#resize} when all image/video inside panels are loaded.\n   * This can be useful when you have contents inside Flicking that changes its size when it's loaded\n   * @ko 이 옵션을 활성화할 경우, Flicking 패널 내부의 이미지/비디오들이 로드되었을 때 자동으로 {@link Flicking#resize}를 호출합니다.\n   * 이 동작은 Flicking 내부에 로드 전/후로 크기가 변하는 콘텐츠를 포함하고 있을 때 유용하게 사용하실 수 있습니다.\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#resizeOnContentsReady resizeOnContentsReady ( Options )}\n   */\n  public get resizeOnContentsReady() { return this._resizeOnContentsReady; }\n  /**\n   * If you enable this option on child Flicking when the Flicking is placed inside the Flicking, the parent Flicking will move in the same direction after the child Flicking reaches the first/last panel.\n   * If the parent Flicking and child Flicking have different horizontal option, you do not need to set this option.\n   * @ko Flicking 내부에 Flicking이 배치될 때 하위 Flicking에서 이 옵션을 활성화하면 하위 Flicking이 첫/마지막 패널에 도달한 뒤부터 같은 방향으로 상위 Flicking이 움직입니다.\n   * 만약 상위 Flicking과 하위 Flicking이 서로 다른 horizontal 옵션을 가지고 있다면 이 옵션을 설정할 필요가 없습니다.\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#nested nested ( Options )}\n   */\n  public get nested() { return this._nested; }\n  // EVENTS\n  /**\n   * A Threshold from viewport edge before triggering `needPanel` event\n   * @ko `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리\n   * @type {number}\n   * @default 0\n   * @see {@link https://naver.github.io/egjs-flicking/Options#needpanelthreshold needPanelThreshold ( Options )}\n   */\n  public get needPanelThreshold() { return this._needPanelThreshold; }\n  /**\n   * When enabled, events are not triggered before `ready` when initializing\n   * @ko 활성화할 경우 초기화시 `ready` 이벤트 이전의 이벤트가 발생하지 않습니다.\n   * @type {boolean}\n   * @default true\n   * @see {@link https://naver.github.io/egjs-flicking/Options#preventeventsbeforeinit preventEventsBeforeInit ( Options )}\n   */\n  public get preventEventsBeforeInit() { return this._preventEventsBeforeInit; }\n  // ANIMATION\n  /**\n   * Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time\n   * @ko 사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다\n   * @type {number}\n   * @default 0.0075\n   * @see {@link https://naver.github.io/egjs-flicking/Options#deceleration deceleration ( Options )}\n   */\n  public get deceleration() { return this._deceleration; }\n  /**\n   * An easing function applied to the panel movement animation. Default value is `easeOutCubic`\n   * @ko 패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다\n   * @type {function}\n   * @default x => 1 - Math.pow(1 - x, 3)\n   * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n   * @see {@link https://naver.github.io/egjs-flicking/Options#easing Easing ( Options )}\n   */\n  public get easing() { return this._easing; }\n  /**\n   * Default duration of the animation (ms)\n   * @ko 디폴트 애니메이션 재생 시간 (ms)\n   * @type {number}\n   * @default 500\n   * @see {@link https://naver.github.io/egjs-flicking/Options#duration duration ( Options )}\n   */\n  public get duration() { return this._duration; }\n  // INPUT\n  /**\n   * Types of input devices to enable\n   * @ko 활성화할 입력 장치 종류\n   * @type {string[]}\n   * @default [\"touch\", \"mouse\"]\n   * @see {@link https://naver.github.io/egjs-axes/Options#paninput-options Possible values (PanInputOption#inputType)}\n   * <ko>{@link https://naver.github.io/egjs-axes/Options#paninput-options 가능한 값들 (PanInputOption#inputType)}</ko>\n   * @see {@link https://naver.github.io/egjs-flicking/Options#inputtype inputType ( Options )}\n   */\n  public get inputType() { return this._inputType; }\n  /**\n   * Movement style by user input. This will change instance type of {@link Flicking#control}\n   * You can use the values of the constant {@link MOVE_TYPE}\n   * @ko 사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다\n   * 상수 {@link MOVE_TYPE}에 정의된 값들을 이용할 수 있습니다\n   * @type {MOVE_TYPE | Pair<string, object>}\n   * @default \"snap\"\n   * @see {@link https://naver.github.io/egjs-flicking/Options#movetype moveType ( Options )}\n   * @example\n   * |moveType|control|options|\n   * |:---:|:---:|:---:|\n   * |\"snap\"|{@link SnapControl}||\n   * |\"freeScroll\"|{@link FreeControl}|{@link FreeControlOptions}|\n   *\n   * ```ts\n   * import Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking({\n   *   moveType: MOVE_TYPE.SNAP\n   * });\n   * ```\n   *\n   * ```ts\n   * const flicking = new Flicking({\n   *   // If you want more specific settings for the moveType\n   *   // [moveType, options for that moveType]\n   *   // In this case, it's [\"freeScroll\", FreeControlOptions]\n   *   moveType: [MOVE_TYPE.FREE_SCROLL, { stopAtEdge: true }]\n   * });\n   * ```\n   */\n  public get moveType() { return this._moveType; }\n  /**\n   * Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.\n   * @ko 패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.\n   * @type {number}\n   * @default 40\n   * @see {@link https://naver.github.io/egjs-flicking/Options#threshold Threshold ( Options )}\n   */\n  public get threshold() { return this._threshold; }\n  /**\n   * Set animation to be interruptable by click/touch.\n   * @ko 사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.\n   * @type {boolean}\n   * @default true\n   * @see {@link https://naver.github.io/egjs-flicking/Options#interruptable Interruptable ( Options )}\n   */\n  public get interruptable() { return this._interruptable; }\n  /**\n   * The size value of the bounce area. Only can be enabled when `circular=false`.\n   * You can set different bounce value for prev/next direction by using array.\n   * `number` for px value, and `string` for px, and % value relative to viewport size.\n   * You have to call {@link Control#updateInput} after changing this to take effect.\n   * @ko Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n   * 배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n   * `number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n   * 이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.\n   * @type {string | number | Array<string | number>}\n   * @default \"20%\"\n   * @see {@link https://naver.github.io/egjs-flicking/Options#bounce bounce ( Options )}\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // % values, relative to viewport element(\".flicking-viewport\")'s size\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000\n   * ];\n   * ```\n   *\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n   *\n   * flicking.bounce = \"100%\";\n   * flicking.control.updateInput(); // Call this to update!\n   * ```\n   */\n  public get bounce() { return this._bounce; }\n  /**\n   * Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward\n   * @ko iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)\n   * @type {number}\n   * @default 30\n   * @see {@link https://naver.github.io/egjs-flicking/Options#iosedgeswipethreshold iOSEdgeSwipeThreshold ( Options )}\n   */\n  public get iOSEdgeSwipeThreshold() { return this._iOSEdgeSwipeThreshold; }\n  /**\n   * Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element\n   * @ko 사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다\n   * @type {boolean}\n   * @default true\n   * @see {@link https://naver.github.io/egjs-flicking/Options#preventclickondrag preventClickOnDrag ( Options )}\n   */\n  public get preventClickOnDrag() { return this._preventClickOnDrag; }\n  /**\n   * Automatically call {@link Flicking#disableInput disableInput()} on initialization\n   * @ko Flicking init시에 {@link Flicking#disableInput disableInput()}을 바로 호출합니다\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#disableoninit disableOnInit ( Options )}\n   */\n  public get disableOnInit() { return this._disableOnInit; }\n  /**\n   * Change active panel index on mouse/touch hold while animating.\n   * `index` of the `willChange`/`willRestore` event will be used as new index.\n   * @ko 애니메이션 도중 마우스/터치 입력시 현재 활성화된 패널의 인덱스를 변경합니다.\n   * `willChange`/`willRestore` 이벤트의 `index`값이 새로운 인덱스로 사용될 것입니다.\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#changeonhold changeOnHold ( Options )}\n   */\n  public get changeOnHold() { return this._changeOnHold; }\n  // PERFORMANCE\n  /**\n   * Whether to render visible panels only. This can dramatically increase performance when there're many panels\n   * @ko 보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#renderonlyvisible renderOnlyVisible ( Options )}\n   */\n  public get renderOnlyVisible() { return this._renderOnlyVisible; }\n  /**\n   * By enabling this option, it will reduce memory consumption by restricting the number of DOM elements to `panelsPerView + 1`\n   * Must be used with `panelsPerview`.\n   * After Flicking's initialized, this property can be used to add/remove the panel count.\n   * @ko 이 옵션을 활성화할 경우 패널 엘리먼트의 개수를 `panelsPerView + 1` 개로 고정함으로써, 메모리 사용량을 줄일 수 있습니다.\n   * `panelsPerView` 옵션과 함께 사용되어야만 합니다.\n   * Flicking 초기화 이후에, 이 프로퍼티는 렌더링하는 패널의 개수를 추가/제거하기 위해 사용될 수 있습니다.\n   * @type {VirtualManager}\n   * @property {function} renderPanel A rendering function for the panel element's innerHTML<ko>패널 엘리먼트의 innerHTML을 렌더링하는 함수</ko>\n   * @property {number} initialPanelCount Initial panel count to render<ko>최초로 렌더링할 패널의 개수</ko>\n   * @property {boolean} [cache=false] Whether to cache rendered panel's innerHTML<ko>렌더링된 패널의 innerHTML 정보를 캐시할지 여부</ko>\n   * @property {string} [panelClass=\"flicking-panel\"] The class name that will be applied to rendered panel elements<ko>렌더링되는 패널 엘리먼트에 적용될 클래스 이름</ko>\n   * @see {@link https://naver.github.io/egjs-flicking/Options#virtual virtual ( Options )}\n   * @example\n   * ```ts\n   * import Flicking, { VirtualPanel } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking(\"#some_el\", {\n   *   panelsPerView: 3,\n   *   virtual: {\n   *     renderPanel: (panel: VirtualPanel, index: number) => `Panel ${index}`,\n   *     initialPanelCount: 100\n   *   }\n   * });\n   *\n   * // Add 100 virtual panels (at the end)\n   * flicking.virtual.append(100);\n   *\n   * // Remove 100 virtual panels from 0 to 100\n   * flicking.virtual.remove(0, 100);\n   * ```\n   */\n  public get virtual() { return this._virtualManager; }\n\n  // OTHERS\n  /**\n   * Call {@link Flicking#init init()} automatically when creating Flicking's instance\n   * @ko Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다\n   * @type {boolean}\n   * @default true\n   * @see {@link https://naver.github.io/egjs-flicking/Options#autoinit autoInit ( Options )}\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Whether to automatically call {@link Flicking#resize resize()} when the viewport element(.flicking-viewport)'s size is changed\n   * @ko 뷰포트 엘리먼트(.flicking-viewport)의 크기 변경시 {@link Flicking#resize resize()} 메소드를 자동으로 호출할지 여부를 설정합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * Whether to listen {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver ResizeObserver}'s event instead of Window's {@link https://developer.mozilla.org/ko/docs/Web/API/Window/resize_event resize} event when using the `autoResize` option\n   * @ko autoResize 옵션 사용시 {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver ResizeObserver}의 이벤트를 Window객체의 {@link https://developer.mozilla.org/ko/docs/Web/API/Window/resize_event resize} 이벤트 대신 수신할지 여부를 설정합니다\n   * @type {boolean}\n   * @default true\n   * @see {@link https://naver.github.io/egjs-flicking/Options#useresizeobserver useResizeObserver ( Options )}\n   */\n  public get useResizeObserver() { return this._useResizeObserver; }\n  /**\n   * Delays size recalculation from `autoResize` by the given time in milisecond.\n   * If the size is changed again while being delayed, it cancels the previous one and delays from the beginning again.\n   * This can increase performance by preventing `resize` being called too often.\n   * @ko `autoResize` 설정시에 호출되는 크기 재계산을 주어진 시간(단위: ms)만큼 지연시킵니다.\n   * 지연시키는 도중 크기가 다시 변경되었을 경우, 이전 것을 취소하고 주어진 시간만큼 다시 지연시킵니다.\n   * 이를 통해 `resize`가 너무 많이 호출되는 것을 방지하여 성능을 향상시킬 수 있습니다.\n   * @type {number}\n   * @default 0\n   * @see {@link https://naver.github.io/egjs-flicking/Options#resizedebounce resizeDebounce ( Options )}\n   */\n  public get resizeDebounce() { return this._resizeDebounce; }\n  /**\n   * The maximum time for size recalculation delay when using `resizeDebounce`, in milisecond.\n   * This guarantees that size recalculation is performed at least once every (n)ms.\n   * @ko `resizeDebounce` 사용시에 크기 재계산이 지연되는 최대 시간을 지정합니다. (단위: ms)\n   * 이를 통해, 적어도 (n)ms에 한번은 크기 재계산을 수행하는 것을 보장할 수 있습니다.\n   * @type {number}\n   * @default 100\n   * @see {@link https://naver.github.io/egjs-flicking/Options#maxresizedebounce maxResizeDebounce ( Options )}\n   */\n  public get maxResizeDebounce() { return this._maxResizeDebounce; }\n  /**\n   * By enabling this, Flicking will calculate all internal size with CSS width computed with getComputedStyle.\n   * This can prevent 1px offset issue in some cases where panel size has the fractional part.\n   * All sizes will have the original size before CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transform transform} is applied on the element.\n   * @ko 이 옵션을 활성화할 경우, Flicking은 내부의 모든 크기를 {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect getBoundingClientRect}를 이용하여 계산합니다.\n   * 이를 통해, 패널 크기에 소수점을 포함할 경우에 발생할 수 있는 일부 1px 오프셋 이슈를 해결 가능합니다.\n   * 모든 크기는 CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transform transform}이 엘리먼트에 적용되기 이전의 크기를 사용할 것입니다.\n   * @type {boolean}\n   * @default false\n   * @see {@link https://naver.github.io/egjs-flicking/Options#usefractionalsize useFractionalSize ( Options )}\n   */\n  public get useFractionalSize() { return this._useFractionalSize; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @default null\n   * @internal\n   * @readonly\n   */\n  public get externalRenderer() { return this._externalRenderer; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @default null\n   * @internal\n   * @readonly\n   * @deprecated\n   */\n  public get renderExternal() { return this._renderExternal; }\n\n  // Options Setter\n  // UI / LAYOUT\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n    this._renderer.align = val;\n    this._camera.align = val;\n    void this.resize();\n  }\n\n  public set defaultIndex(val: FlickingOptions[\"defaultIndex\"]) { this._defaultIndex = val; }\n  public set horizontal(val: FlickingOptions[\"horizontal\"]) {\n    this._horizontal = val;\n    this._control.controller.updateDirection();\n    void this.resize();\n  }\n\n  public set circular(val: FlickingOptions[\"circular\"]) {\n    this._circular = val;\n    void this.resize();\n  }\n\n  public set bound(val: FlickingOptions[\"bound\"]) {\n    this._bound = val;\n    void this.resize();\n  }\n\n  public set adaptive(val: FlickingOptions[\"adaptive\"]) {\n    this._adaptive = val;\n    void this.resize();\n  }\n\n  public set panelsPerView(val: FlickingOptions[\"panelsPerView\"]) {\n    this._panelsPerView = val;\n    void this.resize();\n  }\n\n  public set noPanelStyleOverride(val: FlickingOptions[\"noPanelStyleOverride\"]) {\n    this._noPanelStyleOverride = val;\n    void this.resize();\n  }\n\n  public set resizeOnContentsReady(val: FlickingOptions[\"resizeOnContentsReady\"]) {\n    this._resizeOnContentsReady = val;\n    if (val) {\n      this._renderer.checkPanelContentsReady(this._renderer.panels);\n    }\n  }\n\n  public set nested(val: FlickingOptions[\"nested\"]) {\n    this._nested = val;\n    const axes = this._control.controller.axes;\n\n    if (axes) {\n      axes.options.nested = val;\n    }\n  }\n\n  // EVENTS\n  public set needPanelThreshold(val: FlickingOptions[\"needPanelThreshold\"]) { this._needPanelThreshold = val; }\n  public set preventEventsBeforeInit(val: FlickingOptions[\"preventEventsBeforeInit\"]) { this._preventEventsBeforeInit = val; }\n  // ANIMATION\n  public set deceleration(val: FlickingOptions[\"deceleration\"]) {\n    this._deceleration = val;\n    const axes = this._control.controller.axes;\n\n    if (axes) {\n      axes.options.deceleration = val;\n    }\n  }\n\n  public set easing(val: FlickingOptions[\"easing\"]) {\n    this._easing = val;\n    const axes = this._control.controller.axes;\n\n    if (axes) {\n      axes.options.easing = val;\n    }\n  }\n\n  public set duration(val: FlickingOptions[\"duration\"]) { this._duration = val; }\n  // INPUT\n  public set inputType(val: FlickingOptions[\"inputType\"]) {\n    this._inputType = val;\n    const panInput = this._control.controller.panInput;\n\n    if (panInput) {\n      panInput.options.inputType = val;\n    }\n  }\n\n  public set moveType(val: FlickingOptions[\"moveType\"]) {\n    this._moveType = val;\n\n    const prevControl = this._control;\n    const newControl = this._createControl();\n    const activePanel = prevControl.activePanel;\n    newControl.copy(prevControl);\n\n    const prevProgressInPanel = activePanel\n      ? this._camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this._control = newControl;\n    this._control.updatePosition(prevProgressInPanel);\n    this._control.updateInput();\n  }\n\n  public set threshold(val: FlickingOptions[\"threshold\"]) { this._threshold = val; }\n  public set interruptable(val: FlickingOptions[\"interruptable\"]) {\n    this._interruptable = val;\n\n    const axes = this._control.controller.axes;\n\n    if (axes) {\n      axes.options.interruptable = val;\n    }\n  }\n\n  public set bounce(val: FlickingOptions[\"bounce\"]) {\n    this._bounce = val;\n    this._control.updateInput();\n  }\n\n  public set iOSEdgeSwipeThreshold(val: FlickingOptions[\"iOSEdgeSwipeThreshold\"]) {\n    this._iOSEdgeSwipeThreshold = val;\n    const panInput = this._control.controller.panInput;\n\n    if (panInput) {\n      panInput.options.iOSEdgeSwipeThreshold = val;\n    }\n  }\n\n  public set preventClickOnDrag(val: FlickingOptions[\"preventClickOnDrag\"]) {\n    const prevVal = this._preventClickOnDrag;\n\n    if (val === prevVal) return;\n\n    const controller = this._control.controller;\n\n    if (val) {\n      controller.addPreventClickHandler();\n    } else {\n      controller.removePreventClickHandler();\n    }\n\n    this._preventClickOnDrag = val;\n  }\n\n  public set disableOnInit(val: FlickingOptions[\"disableOnInit\"]) { this._disableOnInit = val; }\n  public set changeOnHold(val: FlickingOptions[\"changeOnHold\"]) { this._changeOnHold = val; }\n  // PERFORMANCE\n  public set renderOnlyVisible(val: FlickingOptions[\"renderOnlyVisible\"]) {\n    this._renderOnlyVisible = val;\n    void this._renderer.render();\n  }\n\n  // OTHERS\n  public set autoResize(val: FlickingOptions[\"autoResize\"]) {\n    this._autoResize = val;\n\n    if (val) {\n      this._autoResizer.enable();\n    } else {\n      this._autoResizer.disable();\n    }\n  }\n\n  public set useResizeObserver(val: FlickingOptions[\"useResizeObserver\"]) {\n    this._useResizeObserver = val;\n\n    if (this._autoResize) {\n      this._autoResizer.enable();\n    }\n  }\n\n  /**\n   * @param root A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n   * <ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>\n   * @param {object} [options={}] An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n   * <ko>\n   *\n   * |code|조건|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n   *\n   * </ko>\n   * @example\n   * ```ts\n   * import Flicking from \"@egjs/flicking\";\n   *\n   * // Creating new instance of Flicking with HTMLElement\n   * const flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n   *\n   * // Creating new instance of Flicking with CSS selector\n   * const flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n   * ```\n   */\n  public constructor(root: HTMLElement | string, {\n    align = ALIGN.CENTER,\n    defaultIndex = 0,\n    horizontal = true,\n    circular = false,\n    circularFallback = CIRCULAR_FALLBACK.LINEAR,\n    bound = false,\n    adaptive = false,\n    panelsPerView = -1,\n    noPanelStyleOverride = false,\n    resizeOnContentsReady = false,\n    nested = false,\n    needPanelThreshold = 0,\n    preventEventsBeforeInit = true,\n    deceleration = 0.0075,\n    duration = 500,\n    easing = x => 1 - Math.pow(1 - x, 3),\n    inputType = [\"mouse\", \"touch\"],\n    moveType = \"snap\",\n    threshold = 40,\n    interruptable = true,\n    bounce = \"20%\",\n    iOSEdgeSwipeThreshold = 30,\n    preventClickOnDrag = true,\n    disableOnInit = false,\n    changeOnHold = false,\n    renderOnlyVisible = false,\n    virtual = null,\n    autoInit = true,\n    autoResize = true,\n    useResizeObserver = true,\n    resizeDebounce = 0,\n    maxResizeDebounce = 100,\n    useFractionalSize = false,\n    externalRenderer = null,\n    renderExternal = null\n  }: Partial<FlickingOptions> = {}) {\n    super();\n\n    // Internal states\n    this._initialized = false;\n    this._plugins = [];\n\n    // Bind options\n    this._align = align;\n    this._defaultIndex = defaultIndex;\n    this._horizontal = horizontal;\n    this._circular = circular;\n    this._circularFallback = circularFallback;\n    this._bound = bound;\n    this._adaptive = adaptive;\n    this._panelsPerView = panelsPerView;\n    this._noPanelStyleOverride = noPanelStyleOverride;\n    this._resizeOnContentsReady = resizeOnContentsReady;\n    this._nested = nested;\n    this._virtual = virtual;\n    this._needPanelThreshold = needPanelThreshold;\n    this._preventEventsBeforeInit = preventEventsBeforeInit;\n    this._deceleration = deceleration;\n    this._duration = duration;\n    this._easing = easing;\n    this._inputType = inputType;\n    this._moveType = moveType;\n    this._threshold = threshold;\n    this._interruptable = interruptable;\n    this._bounce = bounce;\n    this._iOSEdgeSwipeThreshold = iOSEdgeSwipeThreshold;\n    this._preventClickOnDrag = preventClickOnDrag;\n    this._disableOnInit = disableOnInit;\n    this._changeOnHold = changeOnHold;\n    this._renderOnlyVisible = renderOnlyVisible;\n    this._autoInit = autoInit;\n    this._autoResize = autoResize;\n    this._useResizeObserver = useResizeObserver;\n    this._resizeDebounce = resizeDebounce;\n    this._maxResizeDebounce = maxResizeDebounce;\n    this._useFractionalSize = useFractionalSize;\n    this._externalRenderer = externalRenderer;\n    this._renderExternal = renderExternal;\n\n    // Create core components\n    this._viewport = new Viewport(this, getElement(root));\n    this._autoResizer = new AutoResizer(this);\n    this._renderer = this._createRenderer();\n    this._camera = this._createCamera();\n    this._control = this._createControl();\n    this._virtualManager = new VirtualManager(this, virtual);\n\n    if (this._autoInit) {\n      void this.init();\n    }\n  }\n\n  /**\n   * Initialize Flicking and move to the default index\n   * This is automatically called on Flicking's constructor when `autoInit` is true(default)\n   * @ko Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n   * 이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다\n   * @fires Flicking#ready\n   * @return {Promise<void>}\n   */\n  public init(): Promise<void> {\n    if (this._initialized) return Promise.resolve();\n\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const virtualManager = this._virtualManager;\n    const originalTrigger = this.trigger;\n    const preventEventsBeforeInit = this._preventEventsBeforeInit;\n\n    camera.init();\n    virtualManager.init();\n    renderer.init(this);\n    control.init(this);\n\n    if (preventEventsBeforeInit) {\n      this.trigger = () => this;\n    }\n\n    this._initialResize();\n\n    // Look at initial panel\n    this._moveToInitialPanel();\n\n    if (this._autoResize) {\n      this._autoResizer.enable();\n    }\n    if (this._preventClickOnDrag) {\n      control.controller.addPreventClickHandler();\n    }\n    if (this._disableOnInit) {\n      this.disableInput();\n    }\n    renderer.checkPanelContentsReady(renderer.panels);\n\n    return renderer.render().then(() => {\n      // Done initializing & emit ready event\n      this._plugins.forEach(plugin => plugin.init(this));\n      this._initialized = true;\n      if (preventEventsBeforeInit) {\n        this.trigger = originalTrigger;\n      }\n      this.trigger(new ComponentEvent(EVENTS.READY));\n    });\n  }\n\n  /**\n   * Destroy Flicking and remove all event handlers\n   * @ko Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this.off();\n\n    this._autoResizer.disable();\n    this._control.destroy();\n    this._camera.destroy();\n    this._renderer.destroy();\n\n    this._plugins.forEach(plugin => plugin.destroy());\n\n    this._initialized = false;\n  }\n\n  /**\n   * Move to the previous panel (current index - 1)\n   * @ko 이전 패널로 이동합니다 (현재 인덱스 - 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public prev(duration: number = this._duration): Promise<void> {\n    return this.moveTo(this._control.activePanel?.prev()?.index ?? -1, duration, DIRECTION.PREV);\n  }\n\n  /**\n   * Move to the next panel (current index + 1)\n   * @ko 다음 패널로 이동합니다 (현재 인덱스 + 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public next(duration: number = this._duration) {\n    return this.moveTo(this._control.activePanel?.next()?.index ?? this._renderer.panelCount, duration, DIRECTION.NEXT);\n  }\n\n  /**\n   * Move to the panel with given index\n   * @ko 주어진 인덱스에 해당하는 패널로 이동합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public moveTo(index: number, duration: number = this._duration, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE));\n    }\n\n    if (this._control.animating) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.ANIMATION_ALREADY_PLAYING, ERROR.CODE.ANIMATION_ALREADY_PLAYING));\n    }\n\n    if (this._control.holding) {\n      this._control.controller.release();\n    }\n\n    return this._control.moveToPanel(panel, {\n      duration,\n      direction\n    });\n  }\n\n  /**\n   * Change the destination and duration of the animation currently playing\n   * @ko 재생 중인 애니메이션의 목적지와 재생 시간을 변경합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} direction Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE INDEX_OUT_OF_RANGE} When the root is not either string or HTMLElement\n   * <ko>{@link ERROR_CODE INDEX_OUT_OF_RANGE} 해당 인덱스를 가진 패널이 존재하지 않을 경우</ko>\n   * @return {void}\n   */\n  public updateAnimation(index: number, duration?: number, direction?: ValueOf<typeof DIRECTION>): void {\n    if (!this._control.animating) {\n      return;\n    }\n\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      throw new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE);\n    }\n\n    this._control.updateAnimation(panel, duration, direction);\n  }\n\n  /**\n   * Stops the animation currently playing\n   * @ko 재생 중인 애니메이션을 중단시킵니다\n   * @fires Flicking#moveEnd\n   * @return {void}\n   */\n  public stopAnimation(): void {\n    if (!this._control.animating) {\n      return;\n    }\n\n    this._control.stopAnimation();\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   * @example\n   * ```ts\n   * const panel = flicking.getPanel(0);\n   * // Which is a shorthand to...\n   * const samePanel = flicking.panels[0];\n   * ```\n   */\n  public getPanel(index: number): Panel | null {\n    return this._renderer.getPanel(index);\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @return {this}\n   */\n  public enableInput(): this {\n    this._control.enable();\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @return {this}\n   */\n  public disableInput(): this {\n    this._control.disable();\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to {@link Flicking#setStatus setStatus()}\n   * @ko 현재 상태를 반환합니다. 반환받은 값을 {@link Flicking#setStatus setStatus()} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다\n   * @param {object} options Status retrieving options<ko>Status 반환 옵션</ko>\n   * @param {boolean} [options.index=true] Include current panel index to the returning status. Camera will automatically move to the given index when the {@link Flicking#setStatus setStatus} is called<ko>현재 패널 인덱스를 반환값에 포함시킵니다. {@link Flicking#setStatus setStatus} 호출시 자동으로 해당 인덱스로 카메라를 움직입니다</ko>\n   * @param {boolean} [options.position=true] Include camera position to the returning status. This works only when the {@link Flicking#moveType moveType} is `freeScroll`<ko>카메라의 현재 위치를 반환값에 포함시킵니다. 이 옵션은 {@link Flicking#moveType moveType}이 `freeScroll`일 경우에만 동작합니다</ko>\n   * @param {boolean} [options.includePanelHTML=false] Include panel's `outerHTML` to the returning status<ko>패널의 `outerHTML`을 반환값에 포함시킵니다</ko>\n   * @param {boolean} [options.visiblePanelsOnly=false] Include only {@link Flicking#visiblePanel visiblePanel}'s HTML. This option is available only when the `includePanelHTML` is true\n   * <ko>현재 보이는 패널({@link Flicking#visiblePanel visiblePanel})의 HTML만 반환합니다. `includePanelHTML`이 `true`일 경우에만 동작합니다.</ko>\n   * @return {Status} An object with current status value information<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus({\n    index = true,\n    position = true,\n    includePanelHTML = false,\n    visiblePanelsOnly = false\n  }: Partial<{\n    index: boolean;\n    position: boolean;\n    includePanelHTML: boolean;\n    visiblePanelsOnly: boolean;\n  }> = {}): Status {\n    const camera = this._camera;\n    const panels = visiblePanelsOnly ? this.visiblePanels : this.panels;\n\n    const status: Status = {\n      panels: panels.map(panel => {\n        const panelInfo: Status[\"panels\"][0] = { index: panel.index };\n\n        if (includePanelHTML) {\n          panelInfo.html = panel.element.outerHTML;\n        }\n\n        return panelInfo;\n      })\n    };\n\n    if (index) {\n      status.index = this.index;\n    }\n    if (position) {\n      const nearestAnchor = camera.findNearestAnchor(camera.position);\n\n      if (nearestAnchor) {\n        status.position = {\n          panel: nearestAnchor.panel.index,\n          progressInPanel: camera.getProgressInPanel(nearestAnchor.panel)\n        };\n      }\n\n    }\n\n    if (visiblePanelsOnly) {\n      const visiblePanels = this.visiblePanels;\n\n      status.visibleOffset = visiblePanels[0]?.index ?? 0;\n    }\n\n    return status;\n  }\n\n  /**\n   * Restore to the state of the given {@link Status}\n   * @ko 주어진 {@link Status}의 상태로 복원합니다\n   * @param {Partial<Status>} status Status value to be restored. You should use the return value of the {@link Flicking#getStatus getStatus()} method<ko>복원할 상태 값. {@link Flicking#getStatus getStatus()} 메서드의 반환값을 지정하면 됩니다</ko>\n   * @return {void}\n   */\n  public setStatus(status: Status): void {\n    if (!this._initialized) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_INITIALIZED, ERROR.CODE.NOT_INITIALIZED);\n    }\n\n    const {\n      index,\n      position,\n      visibleOffset,\n      panels\n    } = status;\n\n    const renderer = this._renderer;\n    const control = this._control;\n\n    // Can't add/remove panels on external rendering\n    if (panels[0]?.html && !this._renderExternal) {\n      renderer.batchRemove({ index: 0, deleteCount: this.panels.length, hasDOMInElements: true });\n      renderer.batchInsert({ index: 0, elements: parseElement(panels.map(panel => panel.html!)), hasDOMInElements: true });\n    }\n\n    if (index) {\n      const panelIndex = visibleOffset\n        ? index - visibleOffset\n        : index;\n\n      void this.moveTo(panelIndex, 0).catch(() => void 0);\n    }\n\n    if (position && this._moveType === MOVE_TYPE.FREE_SCROLL) {\n      const { panel, progressInPanel } = position;\n      const panelIndex = visibleOffset\n        ? panel - visibleOffset\n        : panel;\n      const panelRange = renderer.panels[panelIndex].range;\n      const newCameraPos = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      void control.moveToPosition(newCameraPos, 0).catch(() => void 0);\n    }\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다\n   * @param {...Plugin} plugins The plugin(s) to add<ko>추가할 플러그인(들)</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public addPlugins(...plugins: Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(item => item.init(this));\n    }\n\n    this._plugins.push(...plugins);\n\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거합니다.\n   * @param {...Plugin} plugin The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public removePlugins(...plugins: Plugin[]) {\n    plugins.forEach(item => {\n      const foundIndex = findIndex(this._plugins, val => val === item);\n\n      if (foundIndex >= 0) {\n        item.destroy();\n        this._plugins.splice(foundIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Update viewport/panel sizes\n   * @ko 패널 및 뷰포트의 크기를 갱신합니다\n   * @method\n   * @fires Flicking#beforeResize\n   * @fires Flicking#afterResize\n   * @return {this}\n   */\n  public async resize(): Promise<void> {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    const activePanel = control.activePanel;\n    const prevWidth = viewport.width;\n    const prevHeight = viewport.height;\n    const prevProgressInPanel = activePanel\n      ? camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: prevWidth,\n      height: prevHeight,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    await renderer.forceRenderAllPanels(); // Render all panel elements, to update sizes\n    renderer.updatePanelSize();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.updateAdaptiveHeight();\n    camera.updateOffset();\n    await renderer.render();\n\n    if (control.animating) {\n      // TODO:\n    } else {\n      control.updatePosition(prevProgressInPanel);\n      control.updateInput();\n    }\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== prevWidth || newHeight !== prevHeight;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: prevWidth,\n        height: prevHeight\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n\n  /**\n   * Add new panels after the last panel\n   * @ko 패널 목록의 제일 끝에 새로운 패널들을 추가합니다\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of appended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#flick\");\n   * // These are possible parameters\n   * flicking.append(document.createElement(\"div\"));\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public append(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(this._renderer.panelCount, element);\n  }\n\n  /**\n   * Add new panels before the first panel\n   * This will increase index of panels after by the number of panels added\n   * @ko 패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n   * 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.prepend(document.createElement(\"div\"));\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public prepend(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(0, element);\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.insert(0, document.createElement(\"div\"));\n   * flicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\n   * flicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public insert(index: number, element: ElementLike | ElementLike[]): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchInsert({ index, elements: parseElement(element), hasDOMInElements: true });\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return {Panel[]} An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchRemove({ index, deleteCount, hasDOMInElements: true });\n  }\n\n  private _createControl(): Control {\n    const moveType = this._moveType;\n    const moveTypes = Object.keys(MOVE_TYPE).map(key => MOVE_TYPE[key] as ValueOf<typeof MOVE_TYPE>);\n\n    const moveTypeStr = Array.isArray(moveType)\n      ? moveType[0]\n      : moveType;\n\n    const moveTypeOptions = Array.isArray(moveType)\n      ? moveType[1] ?? {}\n      : {};\n\n    if (!includes(moveTypes, moveTypeStr)) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"moveType\", JSON.stringify(moveType)), ERROR.CODE.WRONG_OPTION);\n    }\n\n    switch (moveTypeStr) {\n      case MOVE_TYPE.SNAP:\n        return new SnapControl(moveTypeOptions as SnapControlOptions);\n      case MOVE_TYPE.FREE_SCROLL:\n        return new FreeControl(moveTypeOptions as FreeControlOptions);\n      case MOVE_TYPE.STRICT:\n        return new StrictControl(moveTypeOptions as StrictControlOptions);\n    }\n  }\n\n  private _createCamera(): Camera {\n    if (this._circular && this._bound) {\n      // eslint-disable-next-line no-console\n      console.warn(\"\\\"circular\\\" and \\\"bound\\\" option cannot be used together, ignoring bound.\");\n    }\n\n    return new Camera(this, {\n      align: this._align\n    });\n  }\n\n  private _createRenderer(): Renderer {\n    const externalRenderer = this._externalRenderer;\n    if (this._virtual && this._panelsPerView <= 0) {\n      // eslint-disable-next-line no-console\n      console.warn(\"\\\"virtual\\\" and \\\"panelsPerView\\\" option should be used together, ignoring virtual.\");\n    }\n\n    return externalRenderer\n      ? externalRenderer\n      : this._renderExternal\n        ? this._createExternalRenderer()\n        : this._createVanillaRenderer();\n  }\n\n  private _createExternalRenderer(): ExternalRenderer {\n    const {\n      renderer,\n      rendererOptions\n    } = this._renderExternal!;\n\n    return new (renderer)({ align: this._align, ...rendererOptions });\n  }\n\n  private _createVanillaRenderer(): VanillaRenderer {\n    const virtual = this.virtualEnabled;\n\n    return new VanillaRenderer({\n      align: this._align,\n      strategy: virtual\n        ? new VirtualRenderingStrategy()\n        : new NormalRenderingStrategy({\n          providerCtor: VanillaElementProvider\n        })\n    });\n  }\n\n  private _moveToInitialPanel(): void {\n    const renderer = this._renderer;\n    const control = this._control;\n    const camera = this._camera;\n    const defaultPanel = renderer.getPanel(this._defaultIndex) || renderer.getPanel(0);\n\n    if (!defaultPanel) return;\n\n    const nearestAnchor = camera.findNearestAnchor(defaultPanel.position);\n    const initialPanel = (nearestAnchor && defaultPanel.index !== nearestAnchor.panel.index) ? nearestAnchor.panel : defaultPanel;\n    control.setActive(initialPanel, null, false);\n\n    if (!nearestAnchor) {\n      throw new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(initialPanel.position), ERROR.CODE.POSITION_NOT_REACHABLE);\n    }\n\n    let position = initialPanel.position;\n\n    if (!camera.canReach(initialPanel)) {\n      position = nearestAnchor.position;\n    }\n\n    camera.lookAt(position);\n    control.updateInput();\n    camera.updateOffset();\n  }\n\n  private _initialResize() {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: 0,\n      height: 0,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    renderer.updatePanelSize();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.updateOffset();\n    control.updateInput();\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== 0 || newHeight !== 0;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: 0,\n        height: 0\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n}\n\nexport default Flicking;\n", "import Component from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nconst withFlickingMethods = (prototype: any, flickingName: string) => {\n  [Component.prototype, Flicking.prototype].forEach(proto => {\n    Object.getOwnPropertyNames(proto).filter(name => !prototype[name] && name.indexOf(\"_\") !== 0 && name !== \"constructor\")\n      .forEach((name: string) => {\n        const descriptor = Object.getOwnPropertyDescriptor(proto, name)!;\n\n        if (descriptor.value) {\n          // Public Function\n          Object.defineProperty(prototype, name, {\n            value: function(...args) {\n              return descriptor.value.call(this[flickingName], ...args);\n            }\n          });\n        } else {\n          const getterDescriptor: { get?: () => any; set?: (val: any) => void } = {};\n          if (descriptor.get) {\n            getterDescriptor.get = function() {\n              const flicking = this[flickingName];\n              return flicking && descriptor.get?.call(flicking);\n            };\n          }\n          if (descriptor.set) {\n            getterDescriptor.set = function(...args) {\n              return descriptor.set?.call(this[flickingName], ...args);\n            };\n          }\n\n          Object.defineProperty(prototype, name, getterDescriptor);\n        }\n      });\n  });\n};\n\nexport default withFlickingMethods;\n", "import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\nimport Renderer from \"../renderer/Renderer\";\nimport Panel from \"../core/panel/Panel\";\n\nexport default (flicking: Flicking, diffResult: DiffResult<any>, rendered: any[]) => {\n  const renderer = flicking.renderer;\n  const panels = renderer.panels;\n  const prevList = [...diffResult.prevList];\n\n  const added: Panel[] = [];\n  const removed: Panel[] = [];\n\n  if (diffResult.removed.length > 0) {\n    let endIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.removed.forEach(removedIdx => {\n      if (endIdx < 0) {\n        endIdx = removedIdx;\n      }\n\n      if (prevIdx >= 0 && removedIdx !== prevIdx - 1) {\n        removed.push(...batchRemove(renderer, prevIdx, endIdx + 1));\n\n        endIdx = removedIdx;\n        prevIdx = removedIdx;\n      } else {\n        prevIdx = removedIdx;\n      }\n\n      prevList.splice(removedIdx, 1);\n    });\n\n    removed.push(...batchRemove(renderer, prevIdx, endIdx + 1));\n  }\n\n  diffResult.ordered.forEach(([from, to]) => {\n    const prevPanel = panels.splice(from, 1)[0];\n    panels.splice(to, 0, prevPanel);\n  });\n\n  if (diffResult.ordered.length > 0) {\n    panels.forEach((panel, idx) => {\n      const indexDiff = idx - panel.index;\n\n      if (indexDiff > 0) {\n        panel.increaseIndex(indexDiff);\n      } else {\n        panel.decreaseIndex(-indexDiff);\n      }\n    });\n\n    panels.sort((panel1, panel2) => panel1.index - panel2.index);\n\n    panels.forEach(panel => {\n      panel.updatePosition();\n    });\n  }\n\n  if (diffResult.added.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    const addedElements = rendered.slice(prevList.length);\n\n    diffResult.added.forEach((addedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && addedIdx !== prevIdx + 1) {\n        added.push(...batchInsert(renderer, diffResult, addedElements, startIdx, idx + 1));\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = addedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      added.push(...batchInsert(renderer, diffResult, addedElements, startIdx));\n    }\n  }\n\n  if (diffResult.added.length > 0 || diffResult.removed.length > 0) {\n    renderer.updateAfterPanelChange(added, removed);\n  }\n};\n\nconst batchInsert = (renderer: Renderer, diffResult: DiffResult<any>, addedElements: any[], startIdx: number, endIdx?: number) => {\n  return renderer.batchInsertDefer(\n    ...diffResult.added.slice(startIdx, endIdx).map((index, elIdx) => ({ index, elements: [addedElements[elIdx]], hasDOMInElements: false }))\n  );\n};\n\nconst batchRemove = (renderer: Renderer, startIdx: number, endIdx?: number) => {\n  const removed = renderer.panels.slice(startIdx, endIdx);\n\n  return renderer.batchRemoveDefer({ index: startIdx, deleteCount: removed.length, hasDOMInElements: false });\n};\n\n", "import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\n\nexport default <T>(flicking: Flicking, diffResult: DiffResult<T>) => {\n  const removedPanels = diffResult.removed.reduce((map, idx) => {\n    map[idx] = true;\n    return map;\n  }, {});\n\n  const maintainedMap = diffResult.maintained.reduce((map, [prev, current]) => {\n    map[prev] = current;\n    return map;\n  }, {});\n\n  return [\n    ...flicking.panels\n      .filter(panel => !removedPanels[panel.index])\n      // Sort panels by position\n      .sort((panel1, panel2) => (panel1.position + panel1.offset) - (panel2.position + panel2.offset))\n      .map(panel => diffResult.list[maintainedMap[panel.index]]),\n    ...diffResult.added.map(idx => diffResult.list[idx])\n  ];\n};\n\n", "import { FlickingOptions } from \"../Flicking\";\nimport { ALIGN } from \"../const/external\";\nimport { parseArithmeticExpression } from \"../utils\";\n\nexport default (align: FlickingOptions[\"align\"] = ALIGN.CENTER, horizontal: boolean = true, firstPanelSize?: string) => {\n  const cameraAlign = getCameraAlign(align);\n  const panelAlign = getPanelAlign(align);\n\n  if (panelAlign == null) return \"\";\n\n  const camPosition = `calc(${cameraAlign} - (${firstPanelSize || \"0px\"} * ${panelAlign.percentage}) - ${panelAlign.absolute}px)`;\n\n  return horizontal\n    ? `translate(${camPosition})`\n    : `translate(0, ${camPosition})`;\n};\n\nconst getCameraAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { camera: string | number }).camera\n    : align;\n\n  return parseAlign(alignVal);\n};\n\nconst getPanelAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { panel: string | number }).panel\n    : align;\n\n  return parseArithmeticExpression(parseAlign(alignVal));\n};\n\nconst parseAlign = (alignVal: number | string) => {\n  if (typeof alignVal === \"number\") {\n    return `${alignVal}px`;\n  }\n\n  switch (alignVal) {\n    case ALIGN.CENTER:\n      return \"50%\";\n    case ALIGN.NEXT:\n      return \"100%\";\n    case ALIGN.PREV:\n      return \"0%\";\n    default:\n      return alignVal;\n  }\n};\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\nimport type { FlickingOptions, FlickingEvents } from \"./Flicking\";\n\nexport * from \"./core\";\nexport * from \"./camera\";\nexport * from \"./control\";\nexport * from \"./renderer\";\nexport * from \"./const/external\";\nexport * from \"./cfc\";\nexport * from \"./utils\";\n\nexport * from \"./type/event\";\nexport * from \"./type/external\";\nexport type { FlickingOptions, FlickingEvents };\n\nexport default Flicking;\n"],
  "mappings": "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",
  "names": ["isUndefined", "value", "eventType", "props", "_canceled", "_b", "__values", "Object", "keys", "key", "_eventHandler", "event", "_i", "params", "eventName", "ActualComponentEvent", "handlers", "length", "currentTarget", "forEach", "handler", "handlerToAttach", "eventHash", "once", "listener_1", "args", "_this", "off", "on", "name", "handlerList", "push", "handlerToDetach", "idx", "handlerList_1", "handlerFunction", "splice", "Component", "ComponentEvent", "some", "arr", "callback", "length", "i", "find", "getUserAgentString", "agent", "userAgent", "navigator", "toLowerCase", "execRegExp", "pattern", "text", "RegExp", "exec", "e", "hasUserAgentData", "userAgentData", "brands", "uaList", "findVersion", "versionTest", "result", "convertVersion", "replace", "findPreset", "presets", "userPreset", "version", "preset", "test", "brand", "versionAlias", "findPresetBrand", "brandInfo", "findBrand", "id", "_a", "BROWSER_PRESETS", "CHROMIUM_PRESETS", "WEBKIT_PRESETS", "WEBVIEW_PRESETS", "OS_PRESETS", "isWebView", "getLegacyAgent", "nextAgent", "isMobile", "browser", "name", "majorVersion", "webview", "chromium", "chromiumVersion", "webkit", "webkitVersion", "os", "browserPreset", "browserVersion", "_b", "osPreset", "osVersion", "chromiumPreset", "webkitPreset", "parseInt", "isHints", "getClientHintsAgent", "osData", "fullVersionList", "mobile", "firstBrand", "platform", "chromiumBrand", "webkitBrand", "platfomResult", "platformVersion", "browserBrandByFullVersionList", "browserBrand", "uaFullVersion", "agent", "userAgent", "hasUserAgentData", "getClientHintsAgent", "getLegacyAgent", "keys", "obj", "Object", "OBSERVERS_PATH", "Observer", "value", "_emitter", "Component", "_current", "Object", "defineProperty", "get", "set", "isUpdate", "trigger", "subscribe", "callback", "on", "unsubscribe", "off", "observe", "defaultValue", "Observer", "getObservers", "instance", "OBSERVERS_PATH", "getObserver", "name", "observers", "injectReactiveSubscribe", "object", "name", "callback", "getObserver", "subscribe", "_this", "keys", "getObservers", "forEach", "observerName", "unsubscribe", "ReactiveSubscribe", "Constructor", "prototype", "win", "window", "navigator", "userAgent", "DIRECTION_NONE", "DIRECTION_LEFT", "DIRECTION_RIGHT", "DIRECTION_HORIZONTAL", "DIRECTION_UP", "DIRECTION_DOWN", "DIRECTION_VERTICAL", "DIRECTION_ALL", "MOUSE_LEFT", "MOUSE_RIGHT", "MOUSE_MIDDLE", "ANY", "NONE", "SHIFT", "CTRL", "ALT", "META", "VELOCITY_INTERVAL", "IOS_EDGE_THRESHOLD", "IS_IOS_SAFARI", "window", "getAgent", "browser", "name", "TRANSFORM", "document", "bodyStyle", "head", "getElementsByTagName", "style", "target", "i", "len", "length", "PREVENT_DRAG_CSSPROPS", "toArray", "nodes", "el", "push", "$", "param", "multi", "match", "dummy", "createElement", "innerHTML", "childNodes", "querySelectorAll", "undefined", "value", "current", "nodeName", "nodeType", "jQuery", "constructor", "prototype", "jquery", "get", "Array", "isArray", "map", "v", "raf", "requestAnimationFrame", "webkitRequestAnimationFrame", "caf", "cancelAnimationFrame", "webkitCancelAnimationFrame", "keyInfo_1", "oldraf_1", "callback", "wrapCallback", "timestamp", "key", "setTimeout", "performance", "now", "Date", "getTime", "clearTimeout", "fp", "obj", "tranformed", "k", "filter", "filtered", "every", "equal", "base", "roundNumFunc", "roundNumber", "num", "roundUnit", "getRoundFunc", "roundNumbers", "getDecimalPlace", "val", "isFinite", "indexOf", "p", "e", "Math", "round", "inversePow", "n", "pow", "getAngle", "posX", "posY", "atan2", "PI", "isCssPropsFromAxes", "originalCssProps", "same", "Object", "keys", "forEach", "prop", "getDirection", "useHorizontal", "useVertical", "DIRECTION_ALL", "DIRECTION_HORIZONTAL", "DIRECTION_VERTICAL", "DIRECTION_NONE", "useDirection", "checkType", "direction", "userDirection", "setCssProps", "element", "option", "touchActionMap", "_a", "oldCssProps", "touchAction", "newCssProps_1", "revertCssProps", "EventManager", "_axes", "pos", "roundPos", "_getRoundPos", "trigger", "ComponentEvent", "input", "inputEvent", "event", "isTrusted", "destPos", "depaPos", "roundDepa", "setTo", "_createUserControll", "duration", "__assign", "bounceRatio", "_getBounceRatio", "holding", "animationManager", "axisManager", "eventInfo", "getEventInfo", "moveTo", "delta", "set", "axis", "getObserver", "_this", "isCanceled", "off", "userControl", "toPos", "userDuration", "options", "opt", "range", "bounce", "InterruptManager", "_options", "interruptable", "_prevented", "prevented", "getInsidePosition", "circular", "toDestPos", "targetRange", "max", "min", "isOutside", "isEndofBounce", "getDuration", "distance", "deceleration", "sqrt", "isCircularable", "getCirculatedPos", "AxisManager", "_axis", "_complementOptions", "_pos", "reduce", "startPos", "fullDepaPos", "axes", "acc", "axisOptions", "Error", "axisOption", "test", "SUPPORT_TOUCH", "SUPPORT_POINTER", "SUPPORT_MSPOINTER", "SUPPORT_POINTER_EVENTS", "isValidKey", "inputKey", "ANY", "NONE", "shiftKey", "ctrlKey", "altKey", "metaKey", "SHIFT", "CTRL", "ALT", "META", "EventInput", "preventDefault", "removeEventListener", "_stopContextMenu", "prevEvent", "center", "_getCenter", "movement", "_getMovement", "x", "y", "scale", "_getScale", "angle", "deltaX", "deltaY", "offsetX", "offsetY", "latestInterval", "_latestInterval", "timeStamp", "deltaTime", "velocityX", "velocityY", "VELOCITY_INTERVAL", "srcEvent", "preventSystemEvent", "start", "end", "clientX", "clientY", "buttonCodeMap", "MOUSE_LEFT", "MOUSE_RIGHT", "MOUSE_MIDDLE", "button", "_isTouchEvent", "buttons", "type", "inputButton", "_isValidButton", "_getButton", "addEventListener", "__extends", "MouseEventInput", "_isValidEvent", "_preventMouseButton", "extendEvent", "which", "prev", "TouchEventInput", "_baseTouches", "touches", "_getDistance", "identifier", "PointerEventInput", "_updatePointerEvent", "_removePointerEvent", "_firstInputs", "_recentInputs", "pointerId", "addFlag", "TouchMouseEventInput", "id", "nextSpot", "prevSpot", "toAxis", "source", "offset", "convertInputType", "inputType", "hasTouch", "hasMouse", "hasPointer", "getAddEventOptions", "eventName", "passive", "InputObserver", "interruptManager", "eventManager", "_interruptManager", "_eventManager", "_axisManager", "_animationManager", "isInterrupted", "changeOption", "_isStopped", "setInterrupt", "stopAnimation", "_moveDistance", "hold", "_isOutside", "useAnimation", "isInterrupting", "nativeEvent", "__childrenAxesAlreadyChanged", "_atOutside", "nested", "_isEndofAxis", "animateTo", "triggerChange", "finish", "velocity", "inputDuration", "__childrenAxesAlreadyReleased", "displacement", "getDisplacement", "getDelta", "triggerRelease", "userWish", "getUserControl", "isEqual", "restore", "triggerFinish", "tn", "tx", "out", "interpolate", "clamp", "AnimationManager", "animationEnd", "bind", "wishDuration", "durations_1", "abs", "minimumDuration", "maximumDuration", "totalVelocity", "total", "_animateParam", "orgPos_1", "_raf", "triggerAnimationEnd", "beforeParam", "circularTargets", "_createAnimationParam", "retTrigger", "triggerAnimationStart", "console", "warn", "_animateLoop", "orgPos", "movedPos", "done", "complete", "startTime", "originalIntendedPos_1", "state_1", "_initState", "loop_1", "animateParam", "nextState", "_getNextState", "finished", "_getFinalPos", "originalIntendedPos", "ERROR_LIMIT", "finalPos", "_getRoundUnit", "result", "minRoundUnit", "getAxisOptions", "EasingManager", "threshold", "initSlope", "_easing", "diffTime", "restart", "currentPos", "_initialEasingPer", "_prevEasingPer", "ratio", "_durationOffset", "info", "easingPer", "prevState", "prevPos", "directions", "nextPos", "circulatedPos", "rangeOffset", "easing", "Axes", "_super", "Infinity", "inputObserver", "setAnimationManager", "mapped", "split", "concat", "_inputs", "disconnect", "mapAxes", "connect", "index", "splice", "setBy", "setAxis", "updateAnimation", "destroy", "DIRECTION_LEFT", "DIRECTION_RIGHT", "DIRECTION_UP", "DIRECTION_DOWN", "ReactiveSubscribe", "Component", "getDirectionByAngle", "thresholdAngle", "toAngle", "PanInput", "_dragged", "stopPropagation", "preventClickOnDrag", "iOSEdgeSwipeThreshold", "releaseOnScroll", "_onPanstart", "_onPanmove", "_onPanend", "_direction", "observer", "_activeEvent", "_detachElementEvent", "_detachWindowEvent", "_attachElementEvent", "_originalCssProps", "_enabled", "activeEvent", "onRelease", "_observer", "release", "panEvent", "onEventStart", "getTouches", "cancelable", "edgeThreshold", "_isOverThreshold", "_atRightEdge", "innerWidth", "_attachWindowEvent", "onEventMove", "swipeLeftToRight", "_rightEdgeTimer", "swipeRightToLeft", "_getOffset", "prevent", "some", "change", "onEventEnd", "move", "properties", "Number", "_preventClickWhenDragged", "_voidFunction", "RotatePanInput", "isEnabled", "rect", "getBoundingClientRect", "_coefficientForDistanceToAngle", "width", "_rotateOrigin", "left", "top", "height", "_prevAngle", "_triggerChange", "vx", "vy", "_lastDiff", "_getPosFromOrigin", "positiveAngle", "quadrant", "_getQuadrant", "diff", "_getDifference", "_prevQuadrant", "prevAngle", "prevQuadrant", "q", "PinchInput", "_onPinchStart", "_onPinchMove", "_onPinchEnd", "_detachEvent", "_attachEvent", "pinchEvent", "_baseValue", "_pinchFlag", "pinchScale", "WheelInput", "releaseDelay", "useNormalized", "_onWheel", "_holding", "_timer", "KEY_LEFT_ARROW", "KEY_A", "KEY_UP_ARROW", "KEY_W", "KEY_RIGHT_ARROW", "KEY_D", "KEY_DOWN_ARROW", "KEY_S", "DIRECTION_REVERSE", "DIRECTION_FORWARD", "DELAY", "MoveKeyInput", "_onKeydown", "_onKeyup", "getAttribute", "setAttribute", "isMoveKey", "keyCode", "offsets", "isWindow", "window", "ua", "navigator", "userAgent", "SUPPORT_COMPUTEDSTYLE", "IS_IE", "test", "SUPPORT_ADDEVENTLISTENER", "document", "WIDTH", "HEIGHT", "getAttribute", "el", "name", "toArray", "arr", "slice", "call", "hasSizeAttribute", "target", "prefix", "hasLoadingAttribute", "hasSkipAttribute", "addEvent", "element", "type", "handler", "SUPPORT_ADDEVENTLISTENER", "addEventListener", "attachEvent", "removeEvent", "removeEventListener", "detachEvent", "innerWidth", "getSize", "innerHeight", "getStyles", "SUPPORT_COMPUTEDSTYLE", "window", "getComputedStyle", "currentStyle", "size", "parseFloat", "toLowerCase", "getContentElements", "tags", "skipElements", "querySelectorAll", "__spreadArrays", "map", "tag", "join", "filter", "indexOf", "elements", "addAutoSizer", "length", "resizeAllAutoSizers", "__PREFIX__", "push", "resize", "removeAutoSizer", "index", "fixed", "style", "HEIGHT", "WIDTH", "splice", "elementPrefix", "dataWidth", "parseInt", "dataHeight", "forEach", "__extends", "Loader", "options", "_super", "_this", "e", "clear", "onError", "hasLoading", "checkElement", "withPreReady", "hasDataSize", "onReady", "__assign", "isSkip", "onAlreadyReady", "onAlreadyPreReady", "constructor", "EVENTS", "onCheck", "off", "trigger", "isPreReady", "isReady", "setTimeout", "onPreReady", "Component", "ElementLoader", "ImReadyManager", "loaders", "elementInfos", "loader", "getLoader", "check", "on", "info", "checkPreReady", "onPreReadyElement", "_a", "checkReady", "onReadyElement", "hasError", "totalCount", "every", "totalErrorCount", "isPreReadyOver", "preReadyCount", "readyCount", "destroy", "tagName", "Object", "keys", "children", "setHasLoading", "some", "childrenImReady", "clone", "contentElements", "ComponentEvent", "errorCount", "getErrorCount", "ImageLoader", "src", "complete", "naturalWidth", "onAlreadyError", "addEvents", "IS_IE", "setAttribute", "VideoLoader", "readyState", "error", "ImReady", "img", "video", "CODE", "WRONG_TYPE", "ELEMENT_NOT_FOUND", "VAL_MUST_NOT_NULL", "NOT_ATTACHED_TO_FLICKING", "WRONG_OPTION", "INDEX_OUT_OF_RANGE", "POSITION_NOT_REACHABLE", "TRANSFORM_NOT_SUPPORTED", "STOP_CALLED_BY_USER", "ANIMATION_INTERRUPTED", "ANIMATION_ALREADY_PLAYING", "NOT_ALLOWED_IN_FRAMEWORK", "NOT_INITIALIZED", "NO_ACTIVE", "NOT_ALLOWED_IN_VIRTUAL", "MESSAGE", "wrongVal", "correctTypes", "map", "type", "join", "selector", "val", "name", "optionName", "min", "max", "position", "EVENTS", "READY", "BEFORE_RESIZE", "AFTER_RESIZE", "HOLD_START", "HOLD_END", "MOVE_START", "MOVE", "MOVE_END", "WILL_CHANGE", "CHANGED", "WILL_RESTORE", "RESTORED", "SELECT", "NEED_PANEL", "VISIBLE_CHANGE", "REACH_EDGE", "PANEL_CHANGE", "ALIGN", "PREV", "CENTER", "NEXT", "DIRECTION", "NONE", "MOVE_TYPE", "SNAP", "FREE_SCROLL", "STRICT", "CLASS", "VERTICAL", "HIDDEN", "DEFAULT_VIRTUAL", "CIRCULAR_FALLBACK", "LINEAR", "BOUND", "merge", "target", "sources", "_i", "arguments", "length", "forEach", "source", "Object", "keys", "key", "getElement", "el", "parent", "targetEl", "isString", "parentEl", "document", "queryResult", "querySelector", "FlickingError", "ERROR", "nodeType", "Node", "ELEMENT_NODE", "checkExistence", "value", "nameOnErrMsg", "clamp", "x", "Math", "getFlickingAttached", "toArray", "iterable", "slice", "call", "parseAlign", "align", "size", "alignPoint", "parseArithmeticSize", "parseBounce", "bounce", "parsedBounce", "Array", "isArray", "parsedVal", "cssValue", "base", "parsed", "parseArithmeticExpression", "percentage", "absolute", "cssRegex", "idx", "matchResult", "exec", "sign", "unit", "parsedValue", "parseFloat", "signMultiplier", "parseCSSSizeValue", "parsePanelAlign", "panel", "getDirection", "start", "end", "parseElement", "element", "elements", "tempDiv", "createElement", "innerHTML", "push", "apply", "__spread", "children", "firstChild", "removeChild", "getMinusCompensatedIndex", "includes", "array", "array_1", "__values", "array_1_1", "done", "next", "circulatePosition", "pos", "offset", "find", "checker", "array_2", "array_2_1", "findRight", "findIndex", "getProgress", "prev", "getStyle", "window", "getComputedStyle", "currentStyle", "setSize", "_a", "width", "height", "style", "isBetween", "circulateIndex", "index", "range", "arr", "i", "getElementSize", "horizontal", "useFractionalSize", "useOffset", "baseSize", "isBorderBoxSizing", "boxSizing", "border", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth", "padding", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "sizeStr", "setPrototypeOf", "obj", "proto", "__proto__", "_super", "__extends", "message", "code", "_this", "prototype", "Error", "Viewport", "flicking", "_flicking", "_el", "_width", "_height", "_padding", "left", "right", "top", "bottom", "_isBorderBoxSizing", "defineProperty", "get", "newWidth", "newHeight", "resize", "elStyle", "AutoResizer", "_onResize", "resizeDebounce", "maxResizeDebounce", "_maxResizeDebounceTimer", "setTimeout", "_doScheduledResize", "_resizeTimer", "clearTimeout", "_skipFirstResize", "isFirstResize", "_enabled", "_resizeObserver", "enable", "viewport", "disable", "useResizeObserver", "ResizeObserver", "viewportSizeNot0", "resizeObserver", "observe", "addEventListener", "disconnect", "removeEventListener", "VanillaElementProvider", "_element", "_rendered", "show", "cameraEl", "camera", "parentElement", "appendChild", "hide", "VirtualElementProvider", "_virtualElement", "nativeElement", "visible", "elIndex", "_panel", "elementIndex", "virtualElements", "virtual", "init", "VirtualManager", "options", "_renderPanel", "renderPanel", "_initialPanelCount", "_b", "initialPanelCount", "_cache", "_c", "cache", "_panelClass", "_d", "panelClass", "_elements", "set", "renderer", "panels", "uncacheRenderResult", "virtualEnabled", "externalRenderer", "renderExternal", "_initVirtualElements", "nativeEl", "display", "append", "count", "insert", "prepend", "batchInsert", "hasDOMInElements", "remove", "batchRemove", "deleteCount", "cameraElement", "panelsPerView", "fragment", "createDocumentFragment", "newElements", "panelEl", "className", "dataset", "toString", "EVENT", "HOLD", "CHANGE", "RELEASE", "ANIMATION_END", "FINISH", "POSITION_KEY", "STATE_TYPE", "State", "_delta", "_targetPanel", "onEnter", "prevState", "onHold", "ctx", "onChange", "onRelease", "onAnimationEnd", "onFinish", "_moveToChangedPosition", "axesEvent", "transitTo", "delta", "AXES", "prevPosition", "newPosition", "circularEnabled", "lookAt", "moveEvent", "ComponentEvent", "isTrusted", "holding", "direction", "trigger", "isCanceled", "DISABLED", "IdleState", "animating", "panelCount", "holdStartEvent", "HOLDING", "controller", "control", "animatingContext", "moveStartEvent", "ANIMATING", "HoldingState", "_releaseEvent", "inputEvent", "offsetX", "offsetY", "DRAGGING", "flick", "setTo", "IDLE", "releaseEvent", "srcEvent", "clickedElement", "touchEvent", "touch", "changedTouches", "elementFromPoint", "clientX", "clientY", "clickedPanel", "panels_1", "panels_1_1", "contains", "cameraPosition", "clickedPanelPosition", "DraggingState", "destPos", "duration", "moveToPosition", "err", "AnimatingState", "targetPanel", "updateInput", "changeOnHold", "setActive", "activePanel", "DisabledState", "stop", "StateMachine", "nextStateType", "nextState", "_state", "fire", "eventType", "externalCtx", "currentState", "__assign", "AxesController", "_onAxesHold", "_dragged", "_onAxesChange", "_panInput", "isEnabled", "_preventClickWhenDragged", "e", "preventDefault", "stopPropagation", "_resetInternalValues", "_stateMachine", "_axes", "state", "_animatingContext", "axes", "circular", "axis", "Axes", "deceleration", "interruptable", "nested", "easing", "PanInput", "inputType", "threshold", "iOSEdgeSwipeThreshold", "scale", "releaseOnScroll", "connect", "on", "destroy", "removePreventClickHandler", "release", "updateAnimation", "stopAnimation", "update", "controlParams", "axisManager", "addPreventClickHandler", "off", "animateTo", "Promise", "reject", "startPos", "resolve", "animate", "resetContext", "once", "newPos", "animationFinishHandler", "interruptionHandler", "updateDirection", "panInput", "Control", "_controller", "_activePanel", "_getPosition", "updatePosition", "progressInPanel", "clampToReachablePosition", "resetActive", "moveToPanel", "_triggerIndexChangeEvent", "_animateToPosition", "newActivePanel", "prevActivePanel", "updateAdaptiveHeight", "prevIndex", "prevPanel", "copy", "triggeringEvent", "event", "then", "__awaiter", "render", "sent", "catch", "nearestAnchor", "findNearestAnchor", "removed", "canReach", "camPos_1", "camRangeDiff", "rangeDiff", "possiblePositions", "filter", "reduce", "nearestPosition", "abs", "Infinity", "AnchorPoint", "_index", "_pos", "SnapControl", "_count", "activeAnchor", "findActiveAnchor", "anchorAtCamera", "snapThreshold", "_calcSnapThreshold", "posDelta", "absPosDelta", "snapDelta", "targetAnchor", "_findSnappedAnchor", "_findAdjacentAnchor", "currentPos", "clampedPosition", "anchorAtPosition", "findAnchorIncludePosition", "isFinite", "anchors", "anchorPoints", "loopCount", "floor", "circularIndexOffset", "anchorAtPositionIndex", "anchor", "loop", "anchorIncludePosition", "adjacentAnchor", "getNextAnchor", "getPrevAnchor", "isNextDirection", "panelSize", "alignPos", "alignPosition", "margin", "FreeControl", "stopAtEdge", "_stopAtEdge", "panelRange", "targetPos", "StrictControl", "_resetIndexRange", "cameraRange", "currentIndex", "prevPanelIndex", "nextPanelIndex", "nextPanel", "prevPos", "nextPos", "_indexRange", "axesRange", "indexRange", "isOverThreshold", "firstAnchor", "lastAnchor", "shouldBounceToFirst", "shouldBounceToLast", "isAdjacent", "CameraMode", "getAnchors", "anchorsIncludingPosition", "includePosition", "nearest", "prevDist", "anchorIdx", "dist", "getCircularOffset", "panelPos", "canSee", "visibleRange", "isVisibleOnRange", "LinearCameraMode", "checkAvailability", "getRange", "firstPanel", "getPanel", "lastPanel", "CircularCameraMode", "firstPanelPrev", "lastPanelNext", "visibleSize", "panelSizeSum", "canSetCircularMode", "every", "camRange", "minDist", "minDistIndex", "anchorCount", "positionInRange", "anchorInRange", "possibleAnchors", "toggled", "toggledPrev", "toggleDirection", "toggledNext", "_calcPanelAreaSum", "visibleInCurrentRange", "sum", "sizeIncludingMargin", "BoundCameraMode", "viewportSize", "panelAreaSize", "isBiggerThanViewport", "firstPos", "lastPos", "alignVal", "reachablePanels", "shouldPrependBoundAnchor", "shouldAppendBoundAnchor", "indexOffset_1", "newAnchors", "splice", "nearestPanelAtMin", "_findNearestPanel", "panelAtMin", "panelAtMax", "panelIdx", "Camera", "_checkTranslateSupport", "transforms", "supportedStyle", "documentElement", "transformName", "transforms_1", "transforms_1_1", "prefixedTransform", "_transform", "_align", "_position", "_alignPos", "_offset", "_circularOffset", "_circularEnabled", "_mode", "_range", "_visiblePanels", "_anchors", "NaN", "nearestPanel", "bounceSize", "prevRange", "nextRange", "nextPosition", "viewportEl", "firstElementChild", "_updateMode", "_togglePanels", "_refreshVisiblePanels", "_checkNeedPanel", "_checkReachEnd", "updateOffset", "applyTransform", "getProgressInPanel", "activeIndex", "updateRange", "updateCircularToggleDirection", "updateAlignPos", "updateAnchors", "adaptive", "unRenderedPanels", "rendered", "resetNeedPanelHistory", "_needPanelTriggered", "rendering", "actualPosition", "newVisiblePanels", "prevVisiblePanels", "added", "visiblePanels", "needPanelTriggered", "cameraSize", "needPanelThreshold", "cameraPrev", "cameraNext", "wasBetweenRange", "isBetweenRange", "circularMode", "fallbackMode", "circularFallback", "bound", "toggle", "some", "isToggled", "Renderer", "strategy", "_panels", "_rendering", "_strategy", "panelAlign", "_collectPanels", "forceRenderAllPanels", "markForShow", "updatePanelSize", "_updatePanelSizeByGrid", "items", "allPanelsInserted", "batchInsertDefer", "updateAfterPanelChange", "prevFirstPanel", "addedPanels", "item", "insertingIdx", "panelsPushed", "panelsInserted", "_createPanel", "_insertPanelElements", "increaseIndex", "allPanelsRemoved", "batchRemoveDefer", "removingIdx", "panelsPulled", "panelsRemoved", "decreaseIndex", "_removePanelElements", "panelsAdded", "_updateCameraAndControl", "targetIndex", "checkPanelContentsReady", "checkingPanels", "resizeOnContentsReady", "hasContents", "contentsReadyChecker", "ImReady", "loading", "prevProgressInPanel", "panelBehind", "initialized", "readyCount", "totalCount", "check", "_showOnlyVisiblePanels", "visibleIndexes", "visibles", "markForHide", "referencePanel", "gap", "panelSizeObj", "firstPanelSizeObj", "noPanelStyleOverride", "updatePanelSizes", "_removeAllChildsFromCamera", "nextSibling", "nextSiblingElement", "insertBefore", "VanillaRenderer", "updateRenderingPanels", "renderPanels", "_resetPanelElementOrder", "_removeAllTextNodes", "collectPanels", "createPanel", "reversedElements", "getRenderingElementsByOrder", "reverse", "nextEl", "nextElementSibling", "childNodes", "node", "TEXT_NODE", "ExternalRenderer", "Panel", "elementProvider", "_elProvider", "_removed", "_loading", "_resetInternalStates", "_size", "_margin", "_toggled", "_toggleDirection", "cameraRangeDiff", "progress", "camPos", "disappearPosNext", "disappearPosPrev", "checkingRange", "_updateAlignPos", "cached", "marginLeft", "marginRight", "marginTop", "marginBottom", "includeMargin", "includeRange", "focus", "moveTo", "togglePosition", "_togglePosition", "prevToggled", "camAlignPosition", "camVisibleRange", "camVisibleSize", "minimumVisible", "maximumVisible", "shouldBeVisibleAtMin", "shouldBeVisibleAtMax", "NormalRenderingStrategy", "providerCtor", "_providerCtor", "getRenderingIndexesByOrder", "renderedPanels", "notToggled", "renderOnlyVisible", "VirtualPanel", "_cachedInnerHTML", "virtualElCount", "cacheRenderResult", "result", "newInnerHTML", "VirtualRenderingStrategy", "virtualManager", "invisibleIndexes", "sort", "panel1", "panel2", "_", "Flicking", "root", "defaultIndex", "_e", "_f", "_g", "_h", "_j", "_k", "_l", "_m", "_o", "_p", "_q", "preventEventsBeforeInit", "_r", "_s", "_t", "pow", "_u", "_v", "moveType", "_w", "_x", "_y", "_z", "_0", "preventClickOnDrag", "_1", "disableOnInit", "_2", "_3", "_4", "_5", "autoInit", "_6", "autoResize", "_7", "_8", "_9", "_10", "_11", "_12", "_initialized", "_plugins", "_defaultIndex", "_horizontal", "_circular", "_circularFallback", "_bound", "_adaptive", "_panelsPerView", "_noPanelStyleOverride", "_resizeOnContentsReady", "_nested", "_virtual", "_needPanelThreshold", "_preventEventsBeforeInit", "_deceleration", "_duration", "_easing", "_inputType", "_moveType", "_threshold", "_interruptable", "_bounce", "_iOSEdgeSwipeThreshold", "_preventClickOnDrag", "_disableOnInit", "_changeOnHold", "_renderOnlyVisible", "_autoInit", "_autoResize", "_useResizeObserver", "_resizeDebounce", "_maxResizeDebounce", "_useFractionalSize", "_externalRenderer", "_renderExternal", "_viewport", "_autoResizer", "_renderer", "_createRenderer", "_camera", "_createCamera", "_control", "_createControl", "_virtualManager", "prevControl", "newControl", "prevVal", "originalTrigger", "_initialResize", "_moveToInitialPanel", "disableInput", "plugin", "enableInput", "getStatus", "includePanelHTML", "visiblePanelsOnly", "status", "panelInfo", "html", "outerHTML", "visibleOffset", "setStatus", "panelIndex", "newCameraPos", "addPlugins", "plugins", "removePlugins", "foundIndex", "prevWidth", "prevHeight", "sizeChanged", "moveTypes", "moveTypeStr", "moveTypeOptions", "JSON", "stringify", "console", "warn", "_createExternalRenderer", "_createVanillaRenderer", "rendererOptions", "defaultPanel", "initialPanel", "VERSION", "Component", "withFlickingMethods", "flickingName", "getOwnPropertyNames", "indexOf", "descriptor", "getOwnPropertyDescriptor", "args", "getterDescriptor", "diffResult", "prevList", "endIdx_1", "prevIdx_1", "removedIdx", "ordered", "__read", "from", "to", "indexDiff", "startIdx_1", "prevIdx_2", "addedElements_1", "addedIdx", "addedElements", "startIdx", "endIdx", "elIdx", "removedPanels", "maintainedMap", "maintained", "current", "list", "firstPanelSize", "cameraAlign", "getCameraAlign", "getPanelAlign", "camPosition"]
}
